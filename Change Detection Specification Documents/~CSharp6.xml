<?xml version="1.0" encoding="utf-8"?>
<Syntax xmlns="SyntaxSpecification"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="SyntaxSpecification file:///E:/Projects/Change-Detection-Foundation/Change%20Detection%20Specification%20Documents/SyntaxSpecification.xsd"
   xmlns:cg="CodeGeneration" xmlns:loa="LevelsOfAbstraction"
   language="C#">
   <Type name="ExpressionSyntax" abstract="true"/>
   <Type name="ParenthesizedExpressionSyntax" base="ExpressionSyntax" loa:hierarchical="Internal">
    <Properties>
      <Property index="0" name="OpenParenToken" readOnly="true" optional="false" loa:lexical="Terminal" loa:syntactical="Puntuactor" loa:semantic="None"/>
      <Property index="1" name="Expression" optional="false" changepoint="true" loa:lexical="NonTerminal" loa:syntactical="Expression" loa:semantic="Containment"/>
      <Property index="2" name="CloseParenToken" readOnly="true" optional="false" loa:lexical="Terminal" loa:syntactical="Puntuactor" loa:semantic="None"/>
    </Properties>
   </Type>
   <Type name="PrefixUnaryExpressionSyntax" base="ExpressionSyntax" cg:kind="Suppress" loa:hierarchical="LeafOrInternal">
      <Properties>
        <Property index="0" name="OperatorToken" optional="false" changepoint="true" loa:lexical="Terminal" loa:syntactical="Operator" loa:semantic="None"/>
        <Property index="1" name="Operand" optional="false" changepoint="true" loa:lexical="NonTerminal" loa:syntactical="Expression" loa:semantic="Containment"/>
      </Properties>
      <!-- e.g., can be leaf when the operand is a leaf, such as the increment and decrement, where the operand is always a variable -->
   </Type>
   <Type name="AwaitExpressionSyntax" base="ExpressionSyntax" loa:hierarchical="Internal">
      <Properties>
        <Property index="0" name="AwaitKeyword" readOnly="true" optional="false" loa:lexical="Terminal" loa:syntactical="Keyword" loa:semantic="None"/>
        <Property index="1" name="Expression" optional="false" changepoint="true" loa:lexical="NonTerminal" loa:syntactical="Expression" loa:semantic="Containment"/>
      </Properties>
   </Type>
   <Type name="PostfixUnaryExpressionSyntax" base="ExpressionSyntax" cg:kind="Suppress" loa:hierarchical="LeafOrInternal">
      <Properties>
        <Property index="0" name="Operand" optional="false" changepoint="true" loa:lexical="NonTerminal" loa:syntactical="Expression" loa:semantic="Containment"/>
        <Property index="1" name="OperatorToken" optional="false" changepoint="true" loa:lexical="Terminal" loa:syntactical="Operator" loa:semantic="None"/>
      </Properties>
      <!-- e.g., can be leaf when the operand is a leaf, such as the increment and decrement, where the operand is always a variable -->
   </Type>
   <Type name="MemberAccessExpressionSyntax" base="ExpressionSyntax" cg:kind="Suppress" loa:hierarchical="Internal">
      <Properties>
        <Property index="0" name="Expression" optional="false" changepoint="true" loa:lexical="NonTerminal" loa:syntactical="Expression" loa:semantic="Containment"/>
        <Property index="1" name="OperatorToken" readOnly="true" optional="false" changepoint="true" loa:lexical="Terminal" loa:syntactical="Operator" loa:semantic="Containment"/>
        <Property index="2" name="Name" optional="false" changepoint="true" loa:lexical="Terminal" loa:syntactical="Identifier" loa:semantic="Containment"/>
      </Properties>
    </Type>
    <Type name="ConditionalAccessExpressionSyntax" base="ExpressionSyntax" loa:hierarchical="Internal">
      <Properties>
        <Property index="0" name="Expression" kind="Expression" optional="false" changepoint="true" loa:lexical="NonTerminal" loa:syntactical="Expression" loa:semantic="Containment"/>
        <Property index="1" name="OperatorToken" kind="Token" readOnly="true" optional="false" loa:lexical="Terminal" loa:syntactical="Operator" loa:semantic="None"/>
        <Property index="2" name="WhenNotNull" kind="Expression" optional="false" changepoint="true" loa:lexical="NonTerminal" loa:syntactical="Expression" loa:semantic="Containment"/>
      </Properties>
    </Type>
    <Type name="MemberBindingExpressionSyntax" base="ExpressionSyntax" loa:hierarchical="NonEssential">
      <Properties>
        <Property index="1" name="OperatorToken" readOnly="true" optional="false" multiplicity="Single" loa:lexical="Terminal" loa:syntactical="Operator" loa:semantic="None"/>
        <Property index="2" name="Name" optional="false" changepoint="true" multiplicity="Single" loa:lexical="Terminal" loa:syntactical="Identifier" loa:semantic="Containment"/>
      </Properties>
    </Type>
    <Type name="ElementBindingExpressionSyntax" base="ExpressionSyntax">
      <Properties>
        <Property index="1" name="ArgumentList" optional="false" changepoint="true" multiplicity="Single" loa:lexical="NonTerminal"/>
      </Properties>
    </Type>
    <Type name="ImplicitElementAccessSyntax" base="ExpressionSyntax">
      <Properties>
        <Property index="0" name="ArgumentList" kind="Expression" optional="false" changepoint="true" multiplicity="Single"/>
      </Properties>
    </Type>
   <!-- xsi:schemaLocation="SyntaxSpecification file:///E:/MyRepositories/Change-Detection-Foundation/SSXD.xsd" -->
</Syntax>



































