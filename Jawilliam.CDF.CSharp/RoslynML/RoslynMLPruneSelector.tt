<#@ template language="C#" debug="True" hostSpecific="true"#>
<#@ output extension=".cs" #>
<#@ include file="..\TemplateFileManagerV2.1.ttinclude" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.Common.2.7.0\lib\netstandard1.3\Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.CSharp.2.7.0\lib\netstandard1.3\Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)\packages\CodePlex.LinqToXsd.2.0.2\lib\Xml.Schema.Linq.dll" #>
<#@ assembly name="$(SolutionDir)\Jawilliam.CDF\bin\Debug\Jawilliam.CDF.dll" #>
<#@ assembly name="$(SolutionDir)\Jawilliam.CDF.XObjects\bin\Debug\Jawilliam.CDF.XObjects.dll" #>
<#@ assembly name="$(SolutionDir)\packages\System.Collections.Immutable.1.3.1\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Jawilliam.CDF" #>
<#@ import namespace="Jawilliam.CDF.GTED" #>
<#@ import namespace="Jawilliam.CDF.XObjects.RDSL" #>
<#
// <copyright file="LearningFromCSharpSyntaxVisitor.tt" company="Jasoco" author="Jawilliam">
//  Copyright Â© . All Rights Reserved.
// </copyright>

Type csharpSyntaxVisitor = typeof(CSharpSyntaxVisitor);
MethodInfo[] allMethods = csharpSyntaxVisitor.GetMembers().OfType<MethodInfo>().ToArray();

// Filters to methods starting with 'Visit' prefix, except that being called just 'Visit'.
MethodInfo[] visitMethods = allMethods.Where(m => m.Name.StartsWith("Visit") && m.Name != "Visit").ToArray();

// This methods represents the case logic of CSharpSyntaxVisitor for each type of syntax node, then lets to collect all that syntax node types.
List<Type> syntaxNodeTypes = visitMethods.Select(m => m.GetParameters().Single(p => p.Name == "node").ParameterType).Distinct().ToList();

// Build up the class system of syntax node types by completing the total hierarchy. 
List<Type> syntaxNodeSystem = new List<Type>(syntaxNodeTypes);
List<Type> syntaxInnerNodes = new List<Type>(220);
syntaxInnerNodes.AddRange(syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Intersect(syntaxNodeSystem));
List<Type> missingSyntaxTypes = syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Except(syntaxNodeSystem).ToList();
while (missingSyntaxTypes.Any())
{
    syntaxInnerNodes.AddRange(missingSyntaxTypes);
    syntaxNodeSystem.AddRange(missingSyntaxTypes);
    missingSyntaxTypes = syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Except(syntaxNodeSystem).ToList();
}

var syntaxNodeViews = syntaxNodeSystem
.Select(t => new
{
    Parent = t.BaseType.Name,
    Child = new Tree { Root = new Node { Label = t.Name } }
})
.ToList();

List<ITree> syntaxNodeHierarachies = new List<ITree>(220);
foreach (var parentType in syntaxInnerNodes)
{
    var parent = syntaxNodeViews.First(n => object.Equals(n.Child.Root.Label, parentType.Name));
    foreach (var child in syntaxNodeViews.Where(t => object.Equals(t.Parent, parent.Child.Root.Label)))
    {
        parent.Child.Children.Add(child.Child);
        child.Child.Parent = parent.Child;
    }
}

var syntaxSystemRoot = syntaxNodeViews.Where(t => t.Parent == typeof(object).Name).Single().Child;

CodeGenerationTools code = new CodeGenerationTools(this);
CodeRegion region = new CodeRegion(this, 1);
string namespaceName = code.VsNamespaceSuggestion();

var manager = TemplateFileManager.Create(this);

// var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.NodeTypes.Load(@"E:\Projects\Software Development Investigation\Jawilliam.Msr.Roslyn\CSharp\NodeTypeSystem.xml");
var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.Load(@"E:\MyRepositories\Change-Detection-Foundation\Jawilliam.CDF.CSharp\RDSL.xml");

#>using Microsoft.CodeAnalysis.CSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

<#
BeginNamespace(namespaceName, code);
#>
public partial class RoslynMLPruneSelector
{
	/// <summary>
    /// Method hook for implementing logic to execute before the <see cref="PruneSelector(XElement)"/>.
    /// </summary>
    /// <param name="property">the property being questioned.</param>
    /// <param name="result">Mechanism to modify the result of <see cref="PruneSelector(XElement)"/>.</param>
    /// <param name="ignoreCore">If true, the <see cref="PruneSelectorCore(XElement)"/> is not executed and <see cref="PruneSelector(XElement)"/> returns the current value of <paramref name="result"/>.</param>
    partial void PruneSelectorBefore(XElement property, ref bool result, ref bool ignoreCore);
    
    /// <summary>
    /// Method hook for implementing logic to execute after the <see cref="PruneSelectorCore(XElement)"/>.
    /// </summary>
    /// <param name="property">the property being questioned.</param>
    /// <param name="result">Mechanism to modify the result of <see cref="PruneSelectorCore(XElement)"/>.</param>
    partial void PruneSelectorAfter(XElement property, ref bool result);

	/// <summary>
    /// Determines which properties should remain (true) or which properties should not remain (false) according to the type of parent element.
    /// </summary>
    /// <param name="property">the property being questioned.</param>
    /// <returns>true if the property would remain, false otherwise.</returns>
    /// <remarks>This is the default implementation for <see cref="PruneSelector(XElement)"/>.</remarks>
    public virtual bool PruneSelectorCore(XElement property)
	{
		if(property.Parent == null)
			return true;

		switch(property.Parent.Name.LocalName)
		{
<#

foreach(ITree syntaxNode in syntaxSystemRoot.PostOrder<ITree>(e => e.Children)
.Where(n => !object.Equals(n.Root.Label, "SyntaxNode") && 
            !object.Equals(n.Root.Label, "CSharpSyntaxNode")))
{
	//manager.StartNewFile(syntaxNode.Root.Label + ".cs");

	var xSyntaxNodeType = xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == syntaxNode.Root.Label.ToString());
	if(xSyntaxNodeType == null) continue;
	var xSyntaxNodeBaseType = xSyntaxNodeType != null && xSyntaxNodeType.@base != null ?
	 xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == xSyntaxNodeType.@base) 
	 : null;

	var isAbstract = xSyntaxNodeType.@abstract;
	if(xSyntaxNodeType != null)
    {
		var xSyntaxNodeBaseTypeProperties = xSyntaxNodeBaseType != null && xSyntaxNodeBaseType.Properties != null 
											&& xSyntaxNodeBaseType.Properties.Property != null 
				? xSyntaxNodeBaseType.Properties.Property
				: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var xSyntaxNodeProperties = xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null 
			? xSyntaxNodeType.Properties.Property
			: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

	if(xSyntaxNodeType != null && !isAbstract)
	{
#>
			case "<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>": return this.Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>Selector(property);
<#
	}
 }
}
#>
			default: return true;//throw new ArgumentException($"The type {property.Parent.Name.LocalName} has not been found.");
		}
	}		
	
    /// <summary>
    /// Determines which properties should remain (true) or which properties should not remain (false) according to the type of parent element.
    /// </summary>
    /// <param name="property">the property being questioned.</param>
    /// <returns>true if the property would remain, false otherwise.</returns>
    public virtual bool PruneSelector(XElement property)
	{
		bool result = true;
		var ignoreCore = false;
		PruneSelectorBefore(property, ref result, ref ignoreCore);
		if(ignoreCore) 
			return result;
		
		result = this.PruneSelectorCore(property);
		PruneSelectorAfter(property, ref result);
		return result;
	}

<#

foreach(ITree syntaxNode in syntaxSystemRoot.PostOrder<ITree>(e => e.Children)
.Where(n => !object.Equals(n.Root.Label, "SyntaxNode") && 
            !object.Equals(n.Root.Label, "CSharpSyntaxNode")))
{
	//manager.StartNewFile(syntaxNode.Root.Label + ".cs");

	var xSyntaxNodeType = xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == syntaxNode.Root.Label.ToString());
	if(xSyntaxNodeType == null) continue;
	var xSyntaxNodeBaseType = xSyntaxNodeType != null && xSyntaxNodeType.@base != null ?
	 xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == xSyntaxNodeType.@base) 
	 : null;

	var isAbstract = xSyntaxNodeType.@abstract;
	
	var isUpdatable = false;
	if(xSyntaxNodeType != null && xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null)
		isUpdatable = xSyntaxNodeType.Properties.Property.Any(p => p.changepoint);

	if(xSyntaxNodeType != null)
    {
		var xSyntaxNodeBaseTypeProperties = xSyntaxNodeBaseType != null && xSyntaxNodeBaseType.Properties != null 
											&& xSyntaxNodeBaseType.Properties.Property != null 
				? xSyntaxNodeBaseType.Properties.Property
				: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var xSyntaxNodeProperties = xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null 
			? xSyntaxNodeType.Properties.Property
			: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var currentType = typeof(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
			.Assembly.GetType("Microsoft.CodeAnalysis.CSharp.Syntax." + code.Escape(syntaxNode.Root.Label.ToString()));
		var currentPropertiesMetadata = currentType.GetMembers().OfType<PropertyInfo>()
			.Where(p => xSyntaxNodeProperties.Any(n => n.name == p.Name))
			.Select(p => new Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>(p, xSyntaxNodeProperties.Single(n => n.name == p.Name)))
			.OrderBy(p => p.Item2.index)
			.ToArray();

	if(xSyntaxNodeType != null && !isAbstract)
	{
		var filterOutTheseProperties = currentPropertiesMetadata
			.Where(p => !(p.Item2.Rules?.Topology?.relevant ?? false))
			.Select(p => p.Item2.name).ToArray();
#>
	/// <summary>
    /// Method hook for implementing logic to execute before the <see cref="Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>Selector(XElement)"/>.
    /// </summary>
    /// <param name="property">the property being questioned.</param>
    /// <param name="result">Mechanism to modify the result of <see cref="Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>Selector(XElement)"/>.</param>
    /// <param name="ignoreCore">If true, the <see cref="Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>SelectorCore(XElement)"/> is not executed and <see cref="Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>Selector(XElement)"/> returns the current value of <paramref name="result"/>.</param>
    partial void Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>SelectorBefore(XElement property, ref bool result, ref bool ignoreCore);
    
    /// <summary>
    /// Method hook for implementing logic to execute after the <see cref="Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>SelectorCore(XElement)"/>.
    /// </summary>
    /// <param name="property">the property being questioned.</param>
    /// <param name="result">Mechanism to modify the result of <see cref="Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>SelectorCore(XElement)"/>.</param>
    partial void Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>SelectorAfter(XElement property, ref bool result);

	/// <summary>
    /// Determines which properties should remain (true) or which properties should not remain (false) according to the type of parent element.
    /// </summary>
    /// <param name="property">the property being questioned.</param>
    /// <returns>true if the property would remain, false otherwise.</returns>
    /// <remarks>This is the default implementation for <see cref="Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>Selector(XElement)"/>.</remarks>
    public virtual bool Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>SelectorCore(XElement property)
    {
		if(property == null)
			throw new ArgumentNullException(nameof(property));

<#
		if(!filterOutTheseProperties.Any())
		{
#>		return true;
<#
		}
		else
		{
			foreach(var p in filterOutTheseProperties)
			{
#>		if(property.Attribute("part")?.Value == "<#= p #>")
			return false;
<#
			}
#>		
		return true;
<#
		}
#>
    }	
	
    /// <summary>
    /// Determines which properties should remain (true) or which properties should not remain (false) according to the type of parent element.
    /// </summary>
    /// <param name="property">the property being questioned.</param>
    /// <returns>true if the property would remain, false otherwise.</returns>
    public virtual bool Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>Selector(XElement property)
	{
		bool result = true;
		var ignoreCore = false;
		Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>SelectorBefore(property, ref result, ref ignoreCore);
		if(ignoreCore) 
			return result;
		
		result = this.Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>SelectorCore(property);
		Prune<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>SelectorAfter(property, ref result);
		return result;
	}

<#
	}
 }
}
#>
}
<#
	
EndNamespace(namespaceName);

manager.Process();
#>
<#+ 
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

string GetSyntaxType(Type t, CodeGenerationTools code, string listTypeArgument)
{
	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SeparatedSyntaxList"))
		return "SeparatedList_of_" + listTypeArgument;

	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SyntaxList"))
		return "List_of_" + listTypeArgument;

	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SyntaxTokenList"))
		return "TokenList";

	if(!t.FullName.StartsWith("Microsoft.CodeAnalysis."))
		return t.Name;

	if(t.Name == "SyntaxList`1" /*|| t.Name == "SeparatedSyntaxList`1"*/)
		return "IEnumerable<" + this.GetSyntaxType(t.GenericTypeArguments[0], code, "") + ">";

	var codeAnalysisTypes = new []{ "SyntaxNode"/*, "SyntaxTokenList"*/, "SyntaxTrivia" };
	return codeAnalysisTypes.Contains(t.Name) ? "Microsoft.CodeAnalysis." + code.Escape(t.Name) : code.Escape(t.Name) + "<TAnnotation>";
}
#>
