<#@ template language="C#" debug="True" hostSpecific="true"#>
<#@ output extension=".cs" #>
<#@ include file="..\TemplateFileManagerV2.1.ttinclude" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.Common.2.7.0\lib\netstandard1.3\Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.CSharp.2.7.0\lib\netstandard1.3\Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)\packages\CodePlex.LinqToXsd.2.0.2\lib\Xml.Schema.Linq.dll" #>
<#@ assembly name="$(SolutionDir)\Jawilliam.CDF\bin\Debug\Jawilliam.CDF.dll" #>
<#@ assembly name="$(SolutionDir)\Jawilliam.CDF.XObjects\bin\Debug\Jawilliam.CDF.XObjects.dll" #>
<#@ assembly name="$(SolutionDir)\packages\System.Collections.Immutable.1.3.1\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Jawilliam.CDF" #>
<#@ import namespace="Jawilliam.CDF.GTED" #>
<#@ import namespace="Jawilliam.CDF.XObjects.RDSL" #>
<#
// <copyright file="LearningFromCSharpSyntaxVisitor.tt" company="Jasoco" author="Jawilliam">
//  Copyright Â© . All Rights Reserved.
// </copyright>

Type csharpSyntaxVisitor = typeof(CSharpSyntaxVisitor);
MethodInfo[] allMethods = csharpSyntaxVisitor.GetMembers().OfType<MethodInfo>().ToArray();

// Filters to methods starting with 'Visit' prefix, except that being called just 'Visit'.
MethodInfo[] visitMethods = allMethods.Where(m => m.Name.StartsWith("Visit") && m.Name != "Visit").ToArray();

// This methods represents the case logic of CSharpSyntaxVisitor for each type of syntax node, then lets to collect all that syntax node types.
List<Type> syntaxNodeTypes = visitMethods.Select(m => m.GetParameters().Single(p => p.Name == "node").ParameterType).Distinct().ToList();

// Build up the class system of syntax node types by completing the total hierarchy. 
List<Type> syntaxNodeSystem = new List<Type>(syntaxNodeTypes);
List<Type> syntaxInnerNodes = new List<Type>(220);
syntaxInnerNodes.AddRange(syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Intersect(syntaxNodeSystem));
List<Type> missingSyntaxTypes = syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Except(syntaxNodeSystem).ToList();
while (missingSyntaxTypes.Any())
{
    syntaxInnerNodes.AddRange(missingSyntaxTypes);
    syntaxNodeSystem.AddRange(missingSyntaxTypes);
    missingSyntaxTypes = syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Except(syntaxNodeSystem).ToList();
}

var syntaxNodeViews = syntaxNodeSystem
.Select(t => new
{
    Parent = t.BaseType.Name,
    Child = new Tree { Root = new Node { Label = t.Name } }
})
.ToList();

List<ITree> syntaxNodeHierarachies = new List<ITree>(220);
foreach (var parentType in syntaxInnerNodes)
{
    var parent = syntaxNodeViews.First(n => object.Equals(n.Child.Root.Label, parentType.Name));
    foreach (var child in syntaxNodeViews.Where(t => object.Equals(t.Parent, parent.Child.Root.Label)))
    {
        parent.Child.Children.Add(child.Child);
        child.Child.Parent = parent.Child;
    }
}

var syntaxSystemRoot = syntaxNodeViews.Where(t => t.Parent == typeof(object).Name).Single().Child;

CodeGenerationTools code = new CodeGenerationTools(this);
CodeRegion region = new CodeRegion(this, 1);
string namespaceName = code.VsNamespaceSuggestion();

var manager = TemplateFileManager.Create(this);

// var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.NodeTypes.Load(@"E:\Projects\Software Development Investigation\Jawilliam.Msr.Roslyn\CSharp\NodeTypeSystem.xml");
var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.Load(@"E:\MyRepositories\Change-Detection-Foundation\Jawilliam.CDF.CSharp\RDSL.xml");

#>using Microsoft.CodeAnalysis.CSharp;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

<#
BeginNamespace(namespaceName, code);
#>
public partial class RoslynML : CSharpSyntaxVisitor<XElement>
{
	private static bool IsOperator(SyntaxKind kind)
    {
        switch (kind)
        {
            case SyntaxKind.TildeToken:
            case SyntaxKind.ExclamationToken:
            case SyntaxKind.PercentToken:
            case SyntaxKind.CaretToken:
            case SyntaxKind.AmpersandToken:
            case SyntaxKind.AsteriskToken:
            case SyntaxKind.MinusToken:
            case SyntaxKind.PlusToken:
            case SyntaxKind.EqualsToken:
            case SyntaxKind.BarToken:
            case SyntaxKind.ColonToken:
            case SyntaxKind.LessThanToken:
            case SyntaxKind.GreaterThanToken:
            case SyntaxKind.DotToken:
            case SyntaxKind.QuestionToken:
            case SyntaxKind.SlashToken:
            case SyntaxKind.BarBarToken:
            case SyntaxKind.AmpersandAmpersandToken:
            case SyntaxKind.MinusMinusToken:
            case SyntaxKind.PlusPlusToken:
            case SyntaxKind.ColonColonToken:
            case SyntaxKind.QuestionQuestionToken:
            case SyntaxKind.MinusGreaterThanToken:
            case SyntaxKind.ExclamationEqualsToken:
            case SyntaxKind.EqualsEqualsToken:
            case SyntaxKind.EqualsGreaterThanToken:
            case SyntaxKind.LessThanEqualsToken:
            case SyntaxKind.LessThanLessThanToken:
            case SyntaxKind.LessThanLessThanEqualsToken:
            case SyntaxKind.GreaterThanEqualsToken:
            case SyntaxKind.GreaterThanGreaterThanToken:
            case SyntaxKind.GreaterThanGreaterThanEqualsToken:
            case SyntaxKind.SlashEqualsToken:
            case SyntaxKind.AsteriskEqualsToken:
            case SyntaxKind.BarEqualsToken:
            case SyntaxKind.AmpersandEqualsToken:
            case SyntaxKind.PlusEqualsToken:
            case SyntaxKind.MinusEqualsToken:
            case SyntaxKind.CaretEqualsToken:
            case SyntaxKind.PercentEqualsToken:
                return true;
    
            default:
                return false;
        }
    }

    private static void ClassificationForPunctuation(XElement element, Microsoft.CodeAnalysis.SyntaxToken token)
    {
        if (IsOperator(token.Kind()))
        {
            // special cases...
            switch (token.Kind())
            {
                case SyntaxKind.LessThanToken:
                case SyntaxKind.GreaterThanToken:
                    // the < and > tokens of a type parameter list should be classified as
                    // punctuation; otherwise, they're operators.
                    if (token.Parent != null)
                    {
                        if (token.Parent.Kind() == SyntaxKind.TypeParameterList ||
                            token.Parent.Kind() == SyntaxKind.TypeArgumentList)
                        {
                            element.Add(new XAttribute("Punctuation", true));
							if (SyntaxFacts.IsLanguagePunctuation(token.Kind()))
							{
							    element.Add(new XAttribute("Language", true));
							}
							if (SyntaxFacts.IsPreprocessorPunctuation(token.Kind()))
							{
							    element.Add(new XAttribute("Preprocessor", true));
							}
                        }
                    }

                    break;
                case SyntaxKind.ColonToken:
                    // the : for inheritance/implements or labels should be classified as
                    // punctuation; otherwise, it's from a conditional operator.
                    if (token.Parent != null)
                    {
                        if (token.Parent.Kind() != SyntaxKind.ConditionalExpression)
                        {
                            element.Add(new XAttribute("Punctuation", true));
                        }
						else
						{
							element.Add(new XAttribute("Operator", true));
						}
						if (SyntaxFacts.IsLanguagePunctuation(token.Kind()))
						{
						    element.Add(new XAttribute("Language", true));
						}
						if (SyntaxFacts.IsPreprocessorPunctuation(token.Kind()))
						{
						    element.Add(new XAttribute("Preprocessor", true));
						}
                    }
                    break;
				default:
				    element.Add(new XAttribute("Operator", true));
					break;
            }            
        }
        else
        {
            element.Add(new XAttribute("Punctuation", true));
			if (SyntaxFacts.IsLanguagePunctuation(token.Kind()))
			{
			    element.Add(new XAttribute("Language", true));
			}
			if (SyntaxFacts.IsPreprocessorPunctuation(token.Kind()))
			{
			    element.Add(new XAttribute("Preprocessor", true));
			}
        }
    }

    /// <summary>
    /// Annotates an element with syntax metadata.
    /// </summary>
    /// <param name="element">the XML element being serialized.</param>
    /// <param name="node">the node being represented by the serializing XML element.</param>
    protected virtual void Annotate(XElement element, Microsoft.CodeAnalysis.SyntaxToken node)
    {
        element.Add(new XAttribute("kind", Enum.GetName(typeof (SyntaxKind), node.Kind())));
		if (SyntaxFacts.IsKeywordKind(node.Kind()))
        {
            element.Add(new XAttribute("Keyword", true));
			if (SyntaxFacts.IsAccessorDeclarationKeyword(node.Kind()))
			{
			    element.Add(new XAttribute("AccessorDeclaration", true));
			}
			if (SyntaxFacts.IsContextualKeyword(node.Kind()))
			{
			    element.Add(new XAttribute("Contextual", true));
			}    
			if (SyntaxFacts.IsQueryContextualKeyword(node.Kind()))
			{
			    element.Add(new XAttribute("Query", true));
			}
			if (SyntaxFacts.IsTypeParameterVarianceKeyword(node.Kind()))
			{
			    element.Add(new XAttribute("TypeParameterVariance", true));
			}
        }
        else if (SyntaxFacts.IsPunctuation(node.Kind()))
        {
            ClassificationForPunctuation(element, node);
        }

        // if (SyntaxFacts.IsPrefixUnaryExpressionOperatorToken(node.Kind()))
        // {
        //     element.Add(new XAttribute("PrefixUnaryOperator", true));
        // }
		// 
        // if (SyntaxFacts.IsPostfixUnaryExpressionToken(node.Kind()))
        // {
        //     element.Add(new XAttribute("PostfixUnaryOperator", true));
        // }

        // if (SyntaxFacts.IsLiteralExpression(node.Kind()))
        // {
        //     element.Add(new XAttribute("Literal", true));
        // }

        // if (SyntaxFacts.IsInstanceExpression(node.Kind()))
        // {
        //     element.Add(new XAttribute("InstanceExpression", true));
        // }

        // if (SyntaxFacts.IsBinaryExpressionOperatorToken(node.Kind()))
        // {
        //     element.Add(new XAttribute("BinaryExpressionOperator", true));
        // }
		// 
        // if (SyntaxFacts.IsAssignmentExpressionOperatorToken(node.Kind()))
        // {
        //     element.Add(new XAttribute("AssignmentExpressionOperator", true));
        // }		

		if(node.ToString() != "")
		{
			element.Add(new XAttribute("startLine", node.GetLocation().GetLineSpan().StartLinePosition.Line + 1));
			element.Add(new XAttribute("startColumn", node.GetLocation().GetLineSpan().StartLinePosition.Character + 1));
			element.Add(new XAttribute("endLine", node.GetLocation().GetLineSpan().EndLinePosition.Line + 1));
			element.Add(new XAttribute("endColumn", node.GetLocation().GetLineSpan().EndLinePosition.Character));
            element.Add(new XAttribute("pos", node.GetLocation().SourceSpan.Start));
            element.Add(new XAttribute("length", node.GetLocation().SourceSpan.Length));
		}
    }

    /// <summary>
    /// Annotates an element with syntax metadata.
    /// </summary>
    /// <param name="element">the XML element being serialized.</param>
    /// <param name="node">the node being represented by the serializing XML element.</param>
    protected virtual void Annotate(XElement element, Microsoft.CodeAnalysis.SyntaxNode node)
    {
        element.Add(new XAttribute("kind", Enum.GetName(typeof (SyntaxKind), node.Kind())));
        //if (SyntaxFacts.IsAliasQualifier(node))
        //{
        //    element.Add(new XAttribute("Keyword", true));
        //}
    	//
        if (SyntaxFacts.IsKeywordKind(node.Kind()))
        {
            element.Add(new XAttribute("Keyword", true));
        }
    
        //if (SyntaxFacts.IsReservedKeyword(node.Kind()))
        //{
        //    element.Add(new XAttribute("ReservedKeyword", true));
        //}
    	//
        //if (SyntaxFacts.IsAttributeTargetSpecifier(node.Kind()))
        //{
        //    element.Add(new XAttribute("AttributeTargetSpecifier", true));
        //}
    	
        //if (SyntaxFacts.IsAccessibilityModifier(node.Kind()))
        //{
        //    element.Add(new XAttribute("AccessibilityModifier", true));
        //}
    
        //if (SyntaxFacts.IsPreprocessorKeyword(node.Kind()))
        //{
        //    element.Add(new XAttribute("PreprocessorKeyword", true));
        //}        
    
        if (SyntaxFacts.IsTrivia(node.Kind()))
        {
            element.Add(new XAttribute("Trivia", true));
        }
    
        if (SyntaxFacts.IsPreprocessorDirective(node.Kind()))
        {
            element.Add(new XAttribute("PreprocessorDirective", true));
        }
    
        if (SyntaxFacts.IsName(node.Kind()))
        {
            element.Add(new XAttribute("Name", true));
        }
    
        if (SyntaxFacts.IsPredefinedType(node.Kind()))
        {
            element.Add(new XAttribute("PredefinedType", true));
        }
    
        if (SyntaxFacts.IsTypeSyntax(node.Kind()))
        {
            element.Add(new XAttribute("TypeSyntax", true));
        }
    
        if (SyntaxFacts.IsTypeDeclaration(node.Kind()))
        {
            element.Add(new XAttribute("TypeDeclaration", true));
        }
    
        // if (SyntaxFacts.IsAssignmentExpression(node.Kind()))
        // {
        //     element.Add(new XAttribute("AssignmentExpression", true));
        // }       
    
        if (SyntaxFacts.IsDocumentationCommentTrivia(node.Kind()))
        {
            element.Add(new XAttribute("DocumentationCommentTrivia", true));
        }		

		if(node.ToString() != "")
		{
			element.Add(new XAttribute("startLine", node.GetLocation().GetLineSpan().StartLinePosition.Line + 1));
			element.Add(new XAttribute("startColumn", node.GetLocation().GetLineSpan().StartLinePosition.Character + 1));
			element.Add(new XAttribute("endLine", node.GetLocation().GetLineSpan().EndLinePosition.Line + 1));
			element.Add(new XAttribute("endColumn", node.GetLocation().GetLineSpan().EndLinePosition.Character));
            element.Add(new XAttribute("pos", node.GetLocation().SourceSpan.Start));
            element.Add(new XAttribute("length", node.GetLocation().SourceSpan.Length));
		}
    }

    /// <summary>
    /// Annotates an element with syntax metadata.
    /// </summary>
    /// <param name="element">the XML element being serialized.</param>
    /// <param name="node">the trivia being represented by the serializing XML element.</param>
    protected virtual void Annotate(XElement element, Microsoft.CodeAnalysis.SyntaxTrivia node)
    {
        element.Add(new XAttribute("kind", Enum.GetName(typeof (SyntaxKind), node.Kind())));
        //if (SyntaxFacts.IsAliasQualifier(node))
        //{
        //    element.Add(new XAttribute("Keyword", true));
        //}
    	//
        if (SyntaxFacts.IsKeywordKind(node.Kind()))
        {
            element.Add(new XAttribute("Keyword", true));
        }
    
        //if (SyntaxFacts.IsReservedKeyword(node.Kind()))
        //{
        //    element.Add(new XAttribute("ReservedKeyword", true));
        //}
    	//
        //if (SyntaxFacts.IsAttributeTargetSpecifier(node.Kind()))
        //{
        //    element.Add(new XAttribute("AttributeTargetSpecifier", true));
        //}
    	
        //if (SyntaxFacts.IsAccessibilityModifier(node.Kind()))
        //{
        //    element.Add(new XAttribute("AccessibilityModifier", true));
        //}
    
        //if (SyntaxFacts.IsPreprocessorKeyword(node.Kind()))
        //{
        //    element.Add(new XAttribute("PreprocessorKeyword", true));
        //}        
    
        if (SyntaxFacts.IsTrivia(node.Kind()))
        {
            element.Add(new XAttribute("Trivia", true));
        }
    
        if (SyntaxFacts.IsPreprocessorDirective(node.Kind()))
        {
            element.Add(new XAttribute("PreprocessorDirective", true));
        }
    
        if (SyntaxFacts.IsName(node.Kind()))
        {
            element.Add(new XAttribute("Name", true));
        }
    
        if (SyntaxFacts.IsPredefinedType(node.Kind()))
        {
            element.Add(new XAttribute("PredefinedType", true));
        }
    
        if (SyntaxFacts.IsTypeSyntax(node.Kind()))
        {
            element.Add(new XAttribute("TypeSyntax", true));
        }
    
        if (SyntaxFacts.IsTypeDeclaration(node.Kind()))
        {
            element.Add(new XAttribute("TypeDeclaration", true));
        }
    
        // if (SyntaxFacts.IsAssignmentExpression(node.Kind()))
        // {
        //     element.Add(new XAttribute("AssignmentExpression", true));
        // }       
    
        if (SyntaxFacts.IsDocumentationCommentTrivia(node.Kind()))
        {
            element.Add(new XAttribute("DocumentationCommentTrivia", true));
        }		

		if(node.ToString() != "")
		{
			element.Add(new XAttribute("startLine", node.GetLocation().GetLineSpan().StartLinePosition.Line + 1));
			element.Add(new XAttribute("startColumn", node.GetLocation().GetLineSpan().StartLinePosition.Character + 1));
			element.Add(new XAttribute("endLine", node.GetLocation().GetLineSpan().EndLinePosition.Line + 1));
			element.Add(new XAttribute("endColumn", node.GetLocation().GetLineSpan().EndLinePosition.Character));
            element.Add(new XAttribute("pos", node.GetLocation().SourceSpan.Start));
            element.Add(new XAttribute("length", node.GetLocation().SourceSpan.Length));
		}
    }

    /// <summary>
    /// Called when the visitor visits a AttributeArgumentListSyntax node.
    /// </summary>
    public virtual XElement Visit(Microsoft.CodeAnalysis.SyntaxToken node)
    {
		var result = new XElement("Token");
        result.Add(new XText(node.ValueText));
        this.Annotate(result, node);

    	var leadingTrivia = this.VisitLeadingTrivia(node).ToArray();
        var trailingTrivia = this.VisitTrailingTrivia(node).ToArray();
		if(leadingTrivia.Any() || trailingTrivia.Any())
		{
			result.AddAnnotation((leading: leadingTrivia, trailingTrivia: trailingTrivia));
		}

        return result;
    }

    private Hashtable VisitedTrivia = new Hashtable();

    /// <summary>
    /// Visits each trivia that appears before the given node.
    /// </summary>
    /// <param name="node">node of reference</param>
    /// <returns>the XML-like representation of each of the found trivia.</returns>
    public virtual IEnumerable<XElement> VisitLeadingTrivia(Microsoft.CodeAnalysis.SyntaxNode node)
    {
        if (node.HasLeadingTrivia)
        {
            foreach (var tr in node.GetLeadingTrivia())
            {
                if (this.VisitedTrivia.Contains(tr))
                    continue;

                var result = this.VisitTrivia(tr);
                this.VisitedTrivia.Add(tr, tr);
                if (result != null)
                    yield return result;
            }
        }
    }
    
    /// <summary>
    /// Visits each trivia that appears after the given node.
    /// </summary>
    /// <param name="node">node of reference</param>
    /// <returns>the XML-like representation of each of the found trivia.</returns>
    public virtual IEnumerable<XElement> VisitTrailingTrivia(Microsoft.CodeAnalysis.SyntaxNode node)
    {
        if (node.HasTrailingTrivia)
        {
            foreach (var tr in node.GetTrailingTrivia())
            {
                if (this.VisitedTrivia.Contains(tr))
                    continue;

                var result = this.VisitTrivia(tr);
                this.VisitedTrivia.Add(tr, tr);
                if (result != null)
                    yield return result;
            }
        }
    }	

    /// <summary>
    /// Visits each trivia that appears before the given token.
    /// </summary>
    /// <param name="node">token of reference</param>
    /// <returns>the XML-like representation of each of the found trivia.</returns>
    public virtual IEnumerable<XElement> VisitLeadingTrivia(Microsoft.CodeAnalysis.SyntaxToken token)
    {
        if (token.HasLeadingTrivia)
        {
            foreach (var tr in token.LeadingTrivia)
            {
                if (this.VisitedTrivia.Contains(tr))
                    continue;

                var result = this.VisitTrivia(tr);
                this.VisitedTrivia.Add(tr, tr);
                if (result != null)
                    yield return result;
            }
        }
    }
    
    /// <summary>
    /// Visits each trivia that appears after the given token.
    /// </summary>
    /// <param name="node">token of reference</param>
    /// <returns>the XML-like representation of each of the found trivia.</returns>
    public virtual IEnumerable<XElement> VisitTrailingTrivia(Microsoft.CodeAnalysis.SyntaxToken token)
    {
        if (token.HasTrailingTrivia)
        {
            foreach (var tr in token.TrailingTrivia)
            {
                if (this.VisitedTrivia.Contains(tr))
                    continue;

                var result = this.VisitTrivia(tr);
                this.VisitedTrivia.Add(tr, tr);
                if (result != null)
                    yield return result;
            }
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="trivia"></param>
    /// <returns></returns>
    public virtual XElement VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia trivia)
    {
		if(!trivia.HasStructure && 
           trivia.Kind() != SyntaxKind.SingleLineCommentTrivia &&
           trivia.Kind() != SyntaxKind.MultiLineCommentTrivia) 
			return null;

		return trivia.HasStructure
			? this.Visit((CSharpSyntaxNode)trivia.GetStructure())
			: this.VisitCommentTrivia(trivia);
    }

	private void AnnotateTrivia(Microsoft.CodeAnalysis.SyntaxNode node, XElement xElement)
	{		
        var leadingTrivia = this.VisitLeadingTrivia(node).ToArray();
        var trailingTrivia = this.VisitTrailingTrivia(node).ToArray();
    	if(leadingTrivia.Any() || trailingTrivia.Any())
    	{
    		xElement.AddAnnotation((leading: leadingTrivia, trailingTrivia: trailingTrivia));
    	}
	}

    /// <summary>
    /// Called when the visitor visits a comment node.
    /// </summary>
    public virtual XElement VisitCommentTrivia(Microsoft.CodeAnalysis.SyntaxTrivia node)
    {
        var result = new XElement("CommentTrivia");
        result.Add(new XText(node.ToFullString()));
        this.Annotate(result, node);

        return result;
    }

<#

foreach(ITree syntaxNode in syntaxSystemRoot.PostOrder<ITree>(e => e.Children)
.Where(n => !object.Equals(n.Root.Label, "SyntaxNode") && 
            !object.Equals(n.Root.Label, "CSharpSyntaxNode")))
{
	//manager.StartNewFile(syntaxNode.Root.Label + ".cs");

	var xSyntaxNodeType = xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == syntaxNode.Root.Label.ToString());
	if(xSyntaxNodeType == null) continue;
	var xSyntaxNodeBaseType = xSyntaxNodeType != null && xSyntaxNodeType.@base != null ?
	 xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == xSyntaxNodeType.@base) 
	 : null;

	var isAbstract = xSyntaxNodeType.@abstract;
	
	var isUpdatable = false;
	if(xSyntaxNodeType != null && xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null)
		isUpdatable = xSyntaxNodeType.Properties.Property.Any(p => p.changepoint);

	if(xSyntaxNodeType != null)
    {
		var xSyntaxNodeBaseTypeProperties = xSyntaxNodeBaseType != null && xSyntaxNodeBaseType.Properties != null 
											&& xSyntaxNodeBaseType.Properties.Property != null 
				? xSyntaxNodeBaseType.Properties.Property
				: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var xSyntaxNodeProperties = xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null 
			? xSyntaxNodeType.Properties.Property
			: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var currentType = typeof(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
			.Assembly.GetType("Microsoft.CodeAnalysis.CSharp.Syntax." + code.Escape(syntaxNode.Root.Label.ToString()));
		var currentPropertiesMetadata = currentType.GetMembers().OfType<PropertyInfo>()
			.Where(p => xSyntaxNodeProperties.Any(n => n.name == p.Name))
			.Select(p => new Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>(p, xSyntaxNodeProperties.Single(n => n.name == p.Name)))
			.OrderBy(p => p.Item2.index)
			.ToArray();

	if(xSyntaxNodeType != null && !isAbstract)
	{
#>
	/// <summary>
    /// Called when the visitor visits a <#= code.Escape(syntaxNode.Root.Label.ToString()) #> node.
    /// </summary>
    public override XElement Visit<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>(Microsoft.CodeAnalysis.CSharp.Syntax.<#= code.Escape(syntaxNode.Root.Label.ToString()) #> node)
    {
		var result = new XElement("<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "")#>");
<#
		foreach (var currentProperty in currentPropertiesMetadata)
		{
			string listType = currentProperty.Item2.collectionType;
#>
		//<#= currentProperty.Item1.Name #>
<#
			if(currentProperty.Item2.optional)
			{
				var secondCondition = currentProperty.Item2.type == "SyntaxToken" 
					? $" && node.{currentProperty.Item1.Name}.Kind() != SyntaxKind.None"
					: "";  
#>		if(node.<#= currentProperty.Item1.Name #> != null<#= secondCondition #>)
		{
<#
			}
			else if(currentProperty.Item2.multiplicity == "Collection")
			{
#>		if(node.<#= currentProperty.Item1.Name #>.Count > 0)
		{
<#
			}
			if(currentProperty.Item2.type == "SyntaxToken" && currentProperty.Item2.multiplicity == "Single")
			{
#>		<#= currentProperty.Item2.optional ? "	" : "" #>var x<#= currentProperty.Item1.Name #> = this.Visit(node.<#= currentProperty.Item1.Name #>);
		<#= currentProperty.Item2.optional ? "	" : "" #>x<#= currentProperty.Item1.Name #>.Add(new XAttribute("part", "<#= currentProperty.Item1.Name #>"));
		<#= currentProperty.Item2.optional ? "	" : "" #>result.Add(x<#= currentProperty.Item1.Name #>);
<#
			}
			else if(currentProperty.Item2.type != "SyntaxToken" && currentProperty.Item2.multiplicity == "Single")
			{
#>		<#= currentProperty.Item2.optional ? "	" : "" #>var x<#= currentProperty.Item1.Name #> = this.Visit(node.<#= currentProperty.Item1.Name #>);
		<#= currentProperty.Item2.optional ? "	" : "" #>x<#= currentProperty.Item1.Name #>.Add(new XAttribute("part", "<#= currentProperty.Item1.Name #>"));
		<#= currentProperty.Item2.optional ? "	" : "" #>result.Add(x<#= currentProperty.Item1.Name #>);
<#
			}
			else if(currentProperty.Item2.collectionType == null && currentProperty.Item2.multiplicity == "Collection")
			{
#>
			var x<#= currentProperty.Item1.Name #> = new XElement("<#= this.GetSyntaxType(currentProperty.Item1.PropertyType, code, listType).Replace("Syntax", "") #>");
			x<#= currentProperty.Item1.Name #>.Add(new XAttribute("part", "<#= currentProperty.Item1.Name #>"));
			foreach(var x in node.<#= currentProperty.Item1.Name #>)
			{
				var xElement = this.Visit(x);
				x<#= currentProperty.Item1.Name #>.Add(xElement);
			}
			this.FixListTrivia(x<#= currentProperty.Item1.Name #>);
			result.Add(x<#= currentProperty.Item1.Name #>);
<#
			}
			else if(currentProperty.Item2.collectionType != null && currentProperty.Item2.multiplicity == "Collection")
			{
#>
			var x<#= currentProperty.Item1.Name #> = new XElement("<#= this.GetSyntaxType(currentProperty.Item1.PropertyType, code, listType).Replace("Syntax", "") #>");
			x<#= currentProperty.Item1.Name #>.Add(new XAttribute("part", "<#= currentProperty.Item1.Name #>"));
			foreach(var x in node.<#= currentProperty.Item1.Name #>)
			{
				var xElement = this.Visit(x);
				x<#= currentProperty.Item1.Name #>.Add(xElement);
			}
			this.FixListTrivia(x<#= currentProperty.Item1.Name #>);
			result.Add(x<#= currentProperty.Item1.Name #>);
<#
			}
			else
				throw new ApplicationException("Not supported case");
				
		if(currentProperty.Item2.optional)
		{
#>		}
<#
		}
		else if(currentProperty.Item2.multiplicity == "Collection")
		{
#>		}
<#
		}
		}
#>

		this.Annotate(result, node);

    	var kindAttribute = result.Attribute("kind");
        if (kindAttribute?.Value == result.Name.LocalName)
           kindAttribute.Remove();

		this.AnnotateTrivia(node, result);

		return result;
    }

<#
	}
 }
}
#>
}
<#
	
EndNamespace(namespaceName);

manager.Process();
#>
<#+ 
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

string GetSyntaxType(Type t, CodeGenerationTools code, string listTypeArgument)
{
	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SeparatedSyntaxList"))
		return "SeparatedList_of_" + listTypeArgument;

	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SyntaxList"))
		return "List_of_" + listTypeArgument;

	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SyntaxTokenList"))
		return "TokenList";

	if(!t.FullName.StartsWith("Microsoft.CodeAnalysis."))
		return t.Name;

	if(t.Name == "SyntaxList`1" /*|| t.Name == "SeparatedSyntaxList`1"*/)
		return "IEnumerable<" + this.GetSyntaxType(t.GenericTypeArguments[0], code, "") + ">";

	var codeAnalysisTypes = new []{ "SyntaxNode"/*, "SyntaxTokenList"*/, "SyntaxTrivia" };
	return codeAnalysisTypes.Contains(t.Name) ? "Microsoft.CodeAnalysis." + code.Escape(t.Name) : code.Escape(t.Name) + "<TAnnotation>";
}
#>
