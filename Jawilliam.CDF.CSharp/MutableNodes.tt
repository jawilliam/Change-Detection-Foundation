<#@ template language="C#" debug="True" hostSpecific="true"#>
<#@ output extension=".cs" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.Common.2.7.0\lib\netstandard1.3\Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.CSharp.2.7.0\lib\netstandard1.3\Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)\packages\CodePlex.LinqToXsd.2.0.2\lib\Xml.Schema.Linq.dll" #>
<#@ assembly name="$(SolutionDir)\Jawilliam.CDF\bin\Debug\Jawilliam.CDF.dll" #>
<#@ assembly name="$(SolutionDir)\Jawilliam.CDF.XObjects\bin\Debug\Jawilliam.CDF.XObjects.dll" #>
<#@ assembly name="$(SolutionDir)\packages\System.Collections.Immutable.1.3.1\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Jawilliam.CDF" #>
<#@ import namespace="Jawilliam.CDF.GTED" #>
<#@ import namespace="Jawilliam.CDF.XObjects.RDSL" #>
<#
// <copyright file="LearningFromCSharpSyntaxVisitor.tt" company="Jasoco" author="Jawilliam">
//  Copyright Â© . All Rights Reserved.
// </copyright>

Type csharpSyntaxVisitor = typeof(CSharpSyntaxVisitor);
MethodInfo[] allMethods = csharpSyntaxVisitor.GetMembers().OfType<MethodInfo>().ToArray();

// Filters to methods starting with 'Visit' prefix, except that being called just 'Visit'.
MethodInfo[] visitMethods = allMethods.Where(m => m.Name.StartsWith("Visit") && m.Name != "Visit").ToArray();

// This methods represents the case logic of CSharpSyntaxVisitor for each type of syntax node, then lets to collect all that syntax node types.
List<Type> syntaxNodeTypes = visitMethods.Select(m => m.GetParameters().Single(p => p.Name == "node").ParameterType).Distinct().ToList();

// Build up the class system of syntax node types by completing the total hierarchy. 
List<Type> syntaxNodeSystem = new List<Type>(syntaxNodeTypes);
List<Type> syntaxInnerNodes = new List<Type>(220);
syntaxInnerNodes.AddRange(syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Intersect(syntaxNodeSystem));
List<Type> missingSyntaxTypes = syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Except(syntaxNodeSystem).ToList();
while (missingSyntaxTypes.Any())
{
    syntaxInnerNodes.AddRange(missingSyntaxTypes);
    syntaxNodeSystem.AddRange(missingSyntaxTypes);
    missingSyntaxTypes = syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Except(syntaxNodeSystem).ToList();
}

var syntaxNodeViews = syntaxNodeSystem
.Select(t => new
{
    Parent = t.BaseType.Name,
    Child = new Tree { Root = new Node { Label = t.Name } }
})
.ToList();

List<ITree> syntaxNodeHierarachies = new List<ITree>(220);
foreach (var parentType in syntaxInnerNodes)
{
    var parent = syntaxNodeViews.First(n => object.Equals(n.Child.Root.Label, parentType.Name));
    foreach (var child in syntaxNodeViews.Where(t => object.Equals(t.Parent, parent.Child.Root.Label)))
    {
        parent.Child.Children.Add(child.Child);
        child.Child.Parent = parent.Child;
    }
}

var syntaxSystemRoot = syntaxNodeViews.Where(t => t.Parent == typeof(object).Name).Single().Child;

CodeGenerationTools code = new CodeGenerationTools(this);
CodeRegion region = new CodeRegion(this, 1);
string namespaceName = code.VsNamespaceSuggestion();

var manager = TemplateFileManager.Create(this);

// var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.NodeTypes.Load(@"E:\Projects\Software Development Investigation\Jawilliam.Msr.Roslyn\CSharp\NodeTypeSystem.xml");
var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.Load(@"E:\MyRepositories\Change-Detection-Foundation\Jawilliam.CDF.CSharp\RDSL.xml");
#>
using Microsoft.CodeAnalysis.CSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

<#
BeginNamespace(namespaceName, code);

foreach(ITree syntaxNode in syntaxSystemRoot.PostOrder<ITree>(e => e.Children)
.Where(n => !object.Equals(n.Root.Label, "SyntaxNode") && 
            !object.Equals(n.Root.Label, "CSharpSyntaxNode")))
{
	//manager.StartNewFile(syntaxNode.Root.Label + ".cs");

	var xSyntaxNodeType = xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == syntaxNode.Root.Label.ToString());
	if(xSyntaxNodeType == null) continue;
	var xSyntaxNodeBaseType = xSyntaxNodeType != null && xSyntaxNodeType.@base != null ?
	 xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == xSyntaxNodeType.@base) 
	 : null;

	var isAbstract = xSyntaxNodeType.@abstract;
	
	var isUpdatable = false;
	if(xSyntaxNodeType != null && xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null)
		isUpdatable = xSyntaxNodeType.Properties.Property.Any(p => p.changepoint);

	if(xSyntaxNodeType != null)
    {
		var xSyntaxNodeBaseTypeProperties = xSyntaxNodeBaseType != null && xSyntaxNodeBaseType.Properties != null 
											&& xSyntaxNodeBaseType.Properties.Property != null 
				? xSyntaxNodeBaseType.Properties.Property
				: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var xSyntaxNodeProperties = xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null 
			? xSyntaxNodeType.Properties.Property
			: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var currentType = typeof(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
			.Assembly.GetType("Microsoft.CodeAnalysis.CSharp.Syntax." + code.Escape(syntaxNode.Root.Label.ToString()));
		var currentPropertiesMetadata = currentType.GetMembers().OfType<PropertyInfo>()
			.Where(p => xSyntaxNodeProperties.Any(n => n.name == p.Name))
			.Select(p => new Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>(p, xSyntaxNodeProperties.Single(n => n.name == p.Name)))
			.OrderBy(p => p.Item2.index)
			.ToArray();

		//foreach (var currentProperty in currentPropertiesMetadata.Where(p => p.Item2.inherited != true))
		//{
		//	string listType = currentProperty.Item2.collectionType;
		//}

	if(xSyntaxNodeType != null)
	{
		var baseDeclarationText = xSyntaxNodeBaseType == null ? "Jawilliam.CDF.Domain.ElementTypeFormatInfo" : code.Escape(xSyntaxNodeBaseType.name.ToString()).Replace("Syntax", "") + "FormatInfo";
	}
 }
}
	
EndNamespace(namespaceName);

manager.Process();
#>
<#+ 
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

string GetSyntaxType(Type t, CodeGenerationTools code, string listTypeArgument)
{
	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SeparatedSyntaxList"))
		return "SeparatedList_of_" + listTypeArgument;

	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SyntaxList"))
		return "List_of_" + listTypeArgument;

	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SyntaxTokenList"))
		return "TokenList";

	if(!t.FullName.StartsWith("Microsoft.CodeAnalysis."))
		return t.Name;

	if(t.Name == "SyntaxList`1" /*|| t.Name == "SeparatedSyntaxList`1"*/)
		return "IEnumerable<" + this.GetSyntaxType(t.GenericTypeArguments[0], code, "") + ">";

	var codeAnalysisTypes = new []{ "SyntaxNode"/*, "SyntaxTokenList"*/, "SyntaxTrivia" };
	return codeAnalysisTypes.Contains(t.Name) ? "Microsoft.CodeAnalysis." + code.Escape(t.Name) : code.Escape(t.Name) + "<TAnnotation>";
}

string GetTextExpressionWhen(IEnumerable<Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>> xProperties, Func<Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType, bool> filter)
{
	var expression = (from p in xProperties
		              where filter != null && filter(p.Item2)
	                  orderby p.Item2.index 
					  select this.GetTextExpressionWhen(p, filter)).ToArray();
	return !expression.Any() ? "new string[0]" : expression.Aggregate("", (s1, s2) => s1 + (s1 != "" ? ".Concat" + s2 : s2));
}

string GetTextExpressionWhen(Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType> xProperty, Func<Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType, bool> filter)
{
	// if(xProperty.Item2.Flags.Flag.Any(f => f.context == "GetText" && f.role.Contains("$" + filter + "-Runway")))
	//	return "(this." + xProperty.Item2.name + " != null ? this." + xProperty.Item2.name + ".GetText(textFormatInfo) : new string[0])";

	if(xProperty.Item2.kind == "Token")
	{
		return "(!string.IsNullOrWhiteSpace(this." + xProperty.Item2.name + "?.Text) ? new[] { " + (xProperty.Item2.Text.prefix != null ? "\""+ xProperty.Item2.Text.prefix + "\" + " : "") + "this." + xProperty.Item2.name + ".Text" + (xProperty.Item2.Text.postfix != null ? " + \""+xProperty.Item2.Text.postfix+"\"" : "") + " } : new string[0])";
	}

	if(xProperty.Item2.kind == "Expression")
	{
		var ifMultiplicityText = xProperty.Item2.multiplicity == "Collection" ? " && this." + xProperty.Item2.name + ".List.Any() ? " : " ? ";
		return "(this." + xProperty.Item2.name + " != null" + ifMultiplicityText + (xProperty.Item2.Text.prefix != null ? "new string[]{ \""+ xProperty.Item2.Text.prefix +"\" }.Concat(" : " ") + "this." + xProperty.Item2.name + ".GetText(textFormatInfo)" + (xProperty.Item2.Text.prefix != null ? ")" : "") + (xProperty.Item2.Text.postfix != null ? ".Concat(new string[]{ \""+xProperty.Item2.Text.postfix+"\" })" : "") + " : new string[0])";
	}

	throw new ApplicationException(xProperty.Item2.name);
}

string GetChildrenExpressionWhen(IEnumerable<Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>> xProperties, Func<Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType, bool> filter)
{
	var expression = (from p in xProperties 
		              where filter != null && filter(p.Item2)
	                  orderby p.Item2.index 
					  select this.GetChildrenExpressionWhen(p, filter)).ToArray();
	return !expression.Any() ? "" : expression.Aggregate("", (s1, s2) => s1 + s2);
}              

string GetChildrenExpressionWhen(Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType> xProperty, Func<Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType, bool> filter)
{
	return System.Environment.NewLine + "				if(this." + xProperty.Item2.name + " != null) yield return this." + xProperty.Item2.name + ";";
	/*if(xProperty.Item2.multiplicity == "Single" || xProperty.Item2.multiplicity == "Collection")
		return System.Environment.NewLine + "				if(this." + xProperty.Item2.name + " != null) yield return this." + xProperty.Item2.name + ";";
*/
	/*if(xProperty.Item2.multiplicity == "Collection")
		return System.Environment.NewLine + "				foreach (var syntaxtEntity in (this." + xProperty.Item2.name + " != null ? this." + xProperty.Item2.name + ".GetChildren(representationFormatInfo) : new ISyntaxEntity[0])) { yield return syntaxtEntity; }";
	*/
	throw new ApplicationException();
}

string CopyWhen(IEnumerable<Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>> xProperties, CodeGenerationTools code)
{
	var expression = (from p in xProperties 
	                  orderby p.Item2.index 
					  select this.CopyWhen(p, code)).ToArray();
	return !expression.Any() ? "" : expression.Aggregate("", (s1, s2) => s1 + (System.Environment.NewLine + s2));
} 

string CopyWhen(Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType> xProperty, CodeGenerationTools code)
{
	if(xProperty.Item2.kind == "Info")
		return "		this." + xProperty.Item2.name + " = node." + xProperty.Item2.name + ";";

	if(xProperty.Item2.kind == "Token")
		return "		if(node." + xProperty.Item2.name + ".Kind() == SyntaxKind.None) this." + xProperty.Item2.name + " = null; else (this." + xProperty.Item2.name + " ?? (this." + xProperty.Item2.name + " = new SyntaxToken<TAnnotation>(node." + xProperty.Item2.name + ".Kind()))).Copy(node." + xProperty.Item2.name + ");";
	
	if(xProperty.Item2.kind == "Expression")
	{
		string listTypeArgument = xProperty.Item2.collectionType;
		return "		this." + xProperty.Item2.name + " = (" + this.CleanTypeName(code.Escape(xProperty.Item1.PropertyType.Name + "<TAnnotation>"), listTypeArgument) + ")this.Converter.Visit" + (!string.IsNullOrWhiteSpace(listTypeArgument) ? string.Format("<Microsoft.CodeAnalysis.CSharp.Syntax.{0}, {0}<TAnnotation>>", listTypeArgument) : "") + "(node." + xProperty.Item2.name + (xProperty.Item2.collectionSeparator != null ? ", \"" + xProperty.Item2.collectionSeparator + "\"" : "") +");";
	}

	throw new ApplicationException();
}

string CopyMutableWhen(IEnumerable<Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>> xProperties, CodeGenerationTools code)
{
	var expression = (from p in xProperties 
	                  orderby p.Item2.index 
					  select this.CopyMutableWhen(p, code)).ToArray();
	return !expression.Any() ? "" : expression.Aggregate("", (s1, s2) => s1 + (System.Environment.NewLine + s2));
} 

string CopyMutableWhen(Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType> xProperty, CodeGenerationTools code)
{
	// if(xProperty.Item2.Flags.Flag.Any(f => f.context == "Property" && f.role == "Info"))
	//	return "		this." + xProperty.Item2.name + " = node." + xProperty.Item2.name + ";";

	/*if(xProperty.Item2.Flags.Flag.Any(f => f.context == "Property" && f.role == "Runway"))
	{
		string listTypeArgument = xProperty.Item2.collectionType;
		return "		this." + xProperty.Item2.name + " = (" + this.CleanTypeName(code.Escape(xProperty.Item1.PropertyType.Name) + "<TAnnotation>", listTypeArgument) + ")node." + xProperty.Item2.name + "?.Clone();";
	}*/

	if(xProperty.Item2.kind == "Token")
		return "		this." + xProperty.Item2.name + " = (SyntaxToken<TAnnotation>)node." + xProperty.Item2.name + "?.Clone();";
	
	if(xProperty.Item2.kind == "Expression")
	{
		string listTypeArgument = xProperty.Item2.collectionType;
		return "		this." + xProperty.Item2.name + " = (" + this.CleanTypeName(code.Escape(xProperty.Item1.PropertyType.Name) + "<TAnnotation>", listTypeArgument) + ")node." + xProperty.Item2.name + "?.Clone();";
	}

	throw new ApplicationException();
}

string GetInsertExpressionWhen(IEnumerable<Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>> xProperties, Func<Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType, bool> filter, CodeGenerationTools code)
{
	int i = 0;
	var expression = (from p in xProperties 
		              where filter != null && filter(p.Item2) && p.Item2.changepoint
	                  orderby p.Item2.index 
					  select this.GetInsertExpressionWhen(p, filter, code)).ToArray();
	return !expression.Any() ? "" : expression.Aggregate("", (s1, s2) => s1 + s2);
}              

string GetInsertExpressionWhen(Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType> xProperty, Func<Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType, bool> filter, CodeGenerationTools code)
{
	string listTypeArgument = xProperty.Item2.collectionType;
	if(xProperty.Item2.multiplicity == "Single" || xProperty.Item2.multiplicity == "Collection")
		return System.Environment.NewLine + "				if(offset == asTheKChild)" + 
			   System.Environment.NewLine + "				{" + 
			   System.Environment.NewLine + "					this." + xProperty.Item2.name + " = (" + this.CleanTypeName(code.Escape(xProperty.Item1.PropertyType.Name) + "<TAnnotation>", listTypeArgument) + ")thisNode;" + 
			   System.Environment.NewLine + "					return true;" + 
			   System.Environment.NewLine + "				}" + 
			   System.Environment.NewLine + "				offset++;";

	/*if(xProperty.Item2.Flags.Flag.Any(f => f.context == "GetChildren" && f.role.Contains("$" + filter + "-Runway")))
		return System.Environment.NewLine + "				if(this." + xProperty.Item2.name + ".Insert(thisNode, asTheKChild, ref offset, representationFormatInfo)) return true;";
		*/
	/*if(xProperty.Item2.multiplicity == "Collection")
		return System.Environment.NewLine + "				foreach (var syntaxtEntity in this." + xProperty.Item2.name + ".GetChildren(representationFormatInfo)) { yield return syntaxtEntity; }";
*/
	throw new ApplicationException();
}

string GetDeleteExpressionWhen(IEnumerable<Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>> xProperties, Func<Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType, bool> filter)
{
	var expression = (from p in xProperties 
		              where filter != null && filter(p.Item2) && p.Item2.changepoint
	                  orderby p.Item2.index 
					  select this.GetDeleteExpressionWhen(p, filter)).ToArray();
	return !expression.Any() ? "" : expression.Aggregate("", (s1, s2) => s1 + (s1 == "" ? s2 : (System.Environment.NewLine + s2)));
}              

string GetDeleteExpressionWhen(Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType> xProperty, Func<Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType, bool> filter)
{
	if(xProperty.Item2.multiplicity == "Single" || xProperty.Item2.multiplicity == "Collection")
		return "        if(this." + xProperty.Item2.name + " == thisNode) this." + xProperty.Item2.name + " = null;";

	/*if(xProperty.Item2.multiplicity == "Collection")
		return System.Environment.NewLine + "				foreach (var syntaxtEntity in this." + xProperty.Item2.name + ".GetChildren(representationFormatInfo)) { yield return syntaxtEntity; }";
*/
	throw new ApplicationException();
}

string CleanTypeName(string name, string listTypeArgument)
{
	if(name == "SeparatedSyntaxList`1<TAnnotation>")
		return "SeparatedSyntaxList<TAnnotation, " + listTypeArgument + "<TAnnotation>>";

	if(name == "SyntaxList`1<TAnnotation>")
		return "SyntaxList<TAnnotation, " + listTypeArgument + "<TAnnotation>>";
		
	return name;
}
#>
