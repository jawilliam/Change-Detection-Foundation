<#@ template language="C#" debug="True" hostSpecific="true"#>
<#@ output extension=".cs" #>
<#@ include file="..\TemplateFileManagerV2.1.ttinclude" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.Common.2.7.0\lib\netstandard1.3\Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.CSharp.2.7.0\lib\netstandard1.3\Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)\packages\CodePlex.LinqToXsd.2.0.2\lib\Xml.Schema.Linq.dll" #>
<#@ assembly name="$(SolutionDir)\Jawilliam.CDF\bin\Debug\Jawilliam.CDF.dll" #>
<#@ assembly name="$(SolutionDir)\Jawilliam.CDF.XObjects\bin\Debug\Jawilliam.CDF.XObjects.dll" #>
<#@ assembly name="$(SolutionDir)\packages\System.Collections.Immutable.1.3.1\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Jawilliam.CDF" #>
<#@ import namespace="Jawilliam.CDF.GTED" #>
<#@ import namespace="Jawilliam.CDF.XObjects.RDSL" #>
<#
// <copyright file="LearningFromCSharpSyntaxVisitor.tt" company="Jasoco" author="Jawilliam">
//  Copyright Â© . All Rights Reserved.
// </copyright>

Type csharpSyntaxVisitor = typeof(CSharpSyntaxVisitor);
MethodInfo[] allMethods = csharpSyntaxVisitor.GetMembers().OfType<MethodInfo>().ToArray();

// Filters to methods starting with 'Visit' prefix, except that being called just 'Visit'.
MethodInfo[] visitMethods = allMethods.Where(m => m.Name.StartsWith("Visit") && m.Name != "Visit").ToArray();

// This methods represents the case logic of CSharpSyntaxVisitor for each type of syntax node, then lets to collect all that syntax node types.
List<Type> syntaxNodeTypes = visitMethods.Select(m => m.GetParameters().Single(p => p.Name == "node").ParameterType).Distinct().ToList();

// Build up the class system of syntax node types by completing the total hierarchy. 
List<Type> syntaxNodeSystem = new List<Type>(syntaxNodeTypes);
List<Type> syntaxInnerNodes = new List<Type>(220);
syntaxInnerNodes.AddRange(syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Intersect(syntaxNodeSystem));
List<Type> missingSyntaxTypes = syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Except(syntaxNodeSystem).ToList();
while (missingSyntaxTypes.Any())
{
    syntaxInnerNodes.AddRange(missingSyntaxTypes);
    syntaxNodeSystem.AddRange(missingSyntaxTypes);
    missingSyntaxTypes = syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Except(syntaxNodeSystem).ToList();
}

var syntaxNodeViews = syntaxNodeSystem
.Select(t => new
{
    Parent = t.BaseType.Name,
    Child = new Tree { Root = new Node { Label = t.Name } }
})
.ToList();

List<ITree> syntaxNodeHierarachies = new List<ITree>(220);
foreach (var parentType in syntaxInnerNodes)
{
    var parent = syntaxNodeViews.First(n => object.Equals(n.Child.Root.Label, parentType.Name));
    foreach (var child in syntaxNodeViews.Where(t => object.Equals(t.Parent, parent.Child.Root.Label)))
    {
        parent.Child.Children.Add(child.Child);
        child.Child.Parent = parent.Child;
    }
}

var syntaxSystemRoot = syntaxNodeViews.Where(t => t.Parent == typeof(object).Name).Single().Child;

CodeGenerationTools code = new CodeGenerationTools(this);
CodeRegion region = new CodeRegion(this, 1);
string namespaceName = code.VsNamespaceSuggestion();

var manager = TemplateFileManager.Create(this);

// var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.NodeTypes.Load(@"E:\Projects\Software Development Investigation\Jawilliam.Msr.Roslyn\CSharp\NodeTypeSystem.xml");
var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.Load(@"E:\MyRepositories\Change-Detection-Foundation\Jawilliam.CDF.CSharp\RDSL.xml");
#>
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using Jawilliam.CDF.Approach.Flad;
using Jawilliam.CDF.Approach.Services;
using Jawilliam.CDF.Approach.Criterions;
using Jawilliam.CDF.Approach.Awareness;

<#
BeginNamespace(namespaceName, code);

#>
/// <summary>
/// Provides language-aware services regarding <see cref="SyntaxToken"/>.
/// </summary>
partial class SyntaxTokenServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, SyntaxToken, SyntaxToken>
{
    /// <summary>
    /// Determines if two elements are exactly equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
    public virtual bool EqualityMatch(SyntaxToken original, SyntaxToken modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    {
		matchingDescription = null;

        if (original == null || modified == null)
            return false;
    
        if (!string.IsNullOrWhiteSpace(original.ValueText) && 
		    !string.IsNullOrWhiteSpace(modified.ValueText) && 
			original.ValueText == modified.ValueText)
		{
            matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.NameEquality) { Original = original, Modified = modified };
    		return true;
		}
    
        return false;
    }
}

partial class LanguageServiceProvider
{
    /// <summary>
    /// Determines if two elements are exactly equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <typeparam name="TOriginal">Specific type of the original element.</typeparam>
    /// <typeparam name="TModified">Specific type of the modified element.</typeparam>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    public virtual bool EqualityMatch<TOriginal, TModified>(TOriginal original, TModified modified, MatchingContext<SyntaxNodeOrToken?> context)
    where TOriginal : SyntaxNode where TModified : SyntaxNode
    {
        return this.EqualityMatch<TOriginal, TModified>(original, modified, context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription);
    }

    /// <summary>
    /// Determines if two elements are exactly equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <typeparam name="TOriginal">Specific type of the original element.</typeparam>
    /// <typeparam name="TModified">Specific type of the modified element.</typeparam>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
    public virtual bool EqualityMatch<TOriginal, TModified>(TOriginal original, TModified modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    where TOriginal : SyntaxNode where TModified : SyntaxNode
    {
        matchingDescription = null;
        if (original != null && modified != null)
        {
            if (this.GetElementTypeServiceProvider((SyntaxKind)original.RawKind) is IEqualityCriterion<SyntaxNodeOrToken?, TOriginal, TModified> elementTypeServiceProvider)
                return elementTypeServiceProvider.EqualityMatch(original, modified, context, out matchingDescription);
        }
        return false;
    }

    /// <summary>
    /// Determines if two elements are exactly equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    public virtual bool EqualityMatch(SyntaxNode original, SyntaxNode modified, MatchingContext<SyntaxNodeOrToken?> context)
    {
        return this.EqualityMatch(original, modified, context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription);
    }

    /// <summary>
    /// Determines if two elements are exactly equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
    public virtual bool EqualityMatch(SyntaxNode original, SyntaxNode modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    {
        var parameterModifier = new System.Reflection.ParameterModifier(4);
        parameterModifier[3] = true;
        var genericMethod = this.GetType().GetMethod("EqualityMatch", 
			new[] { original.GetType(), modified.GetType(), typeof(MatchingContext<SyntaxNodeOrToken?>), typeof(MatchInfo<SyntaxNodeOrToken?>) }, 
			new System.Reflection.ParameterModifier[] { parameterModifier }).MakeGenericMethod(original.GetType(), modified.GetType());
    
        matchingDescription = null;
        return (bool)genericMethod.Invoke(this, new object[] { original, modified, context, matchingDescription });
    }
    
    /// <summary>
    /// Determines if two <see cref="SeparatedSyntaxList{TNode}"/> elements are equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="equal">logic of equality.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
    public virtual bool EqualityMatch<T>(SeparatedSyntaxList<T> original, SeparatedSyntaxList<T> modified, Func<T, T, bool> equal, MatchingContext<SyntaxNodeOrToken?> context) where T : SyntaxNode
    {
        if (original == null || modified == null)
            return false;
    
        if (original.Count != modified.Count)
            return false;
    
        for (int i = 0; i < original.Count; i++)
        {
            if (!equal(original[i], modified[i]))
                return false;
        }
        
    	return true;
    }	
    
    /// <summary>
    /// Determines if two <see cref="SeparatedSyntaxList{TNode}"/> elements are equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
    public virtual bool EqualityMatch<T>(SeparatedSyntaxList<T> original, SeparatedSyntaxList<T> modified, MatchingContext<SyntaxNodeOrToken?> context) where T : SyntaxNode
    {
        return this.EqualityMatch(original, modified, (o, m) => this.EqualityMatch(o, m, context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription), context);
    }

    /// <summary>
    /// Determines if two <see cref="SyntaxList{TNode}"/> elements are equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="equal">logic of equality.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
    public virtual bool EqualityMatch<T>(SyntaxList<T> original, SyntaxList<T> modified, Func<T, T, bool> equal, MatchingContext<SyntaxNodeOrToken?> context) where T : SyntaxNode
    {
        if (original == null || modified == null)
            return false;

        if (original.Count != modified.Count)
            return false;

        for (int i = 0; i < original.Count; i++)
        {
            if (!equal(original[i], modified[i]))
                return false;
        }

        return true;
    }

    /// <summary>
    /// Determines if two <see cref="SyntaxList{TNode}"/> elements are equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
    public virtual bool EqualityMatch<T>(SyntaxList<T> original, SyntaxList<T> modified, MatchingContext<SyntaxNodeOrToken?> context) where T : SyntaxNode
    {
        return this.EqualityMatch(original, modified, (o, m) => this.EqualityMatch(o, m, context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription), context);
    }

    /// <summary>
    /// Determines if two <see cref="SyntaxTokenList"/> elements are equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
    public virtual bool EqualityMatch(SyntaxTokenList original, SyntaxTokenList modified, MatchingContext<SyntaxNodeOrToken?> context)
    {
		if (original == null || modified == null)
            return false;
    
        if (original.Count != modified.Count)
            return false;
    
        for (int i = 0; i < original.Count; i++)
        {
            if (!this.EqualityMatch(original[i], modified[i], context))
                return false;
        }
        return true;
    }
    
    /// <summary>
    /// Determines if two <see cref="SyntaxToken"/> elements are equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
    public virtual bool EqualityMatch(SyntaxToken original, SyntaxToken modified, MatchingContext<SyntaxNodeOrToken?> context)
    {
        return this.SyntaxTokenServiceProvider.EqualityMatch(original, modified, context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription);
    }
}

<#

foreach(ITree syntaxNode in syntaxSystemRoot.PostOrder<ITree>(e => e.Children)
.Where(n => !object.Equals(n.Root.Label, "SyntaxNode") && 
            !object.Equals(n.Root.Label, "CSharpSyntaxNode")))
{
	//manager.StartNewFile(syntaxNode.Root.Label + ".cs");

	var xSyntaxNodeType = xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == syntaxNode.Root.Label.ToString());
	if(xSyntaxNodeType == null || xSyntaxNodeType.@abstract) continue;
	var xSyntaxNodeBaseType = xSyntaxNodeType != null && xSyntaxNodeType.@base != null ?
	 xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == xSyntaxNodeType.@base) 
	 : null;

	var isAbstract = xSyntaxNodeType.@abstract;
	
	var isUpdatable = false;
	if(xSyntaxNodeType != null && xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null)
		isUpdatable = xSyntaxNodeType.Properties.Property.Any(p => p.changepoint);

	if(xSyntaxNodeType != null)
    {
		var xSyntaxNodeBaseTypeProperties = xSyntaxNodeBaseType != null && xSyntaxNodeBaseType.Properties != null 
											&& xSyntaxNodeBaseType.Properties.Property != null 
				? xSyntaxNodeBaseType.Properties.Property
				: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var xSyntaxNodeProperties = xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null 
			? xSyntaxNodeType.Properties.Property
			: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var currentType = typeof(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
			.Assembly.GetType("Microsoft.CodeAnalysis.CSharp.Syntax." + code.Escape(syntaxNode.Root.Label.ToString()));
		var currentPropertiesMetadata = currentType.GetMembers().OfType<PropertyInfo>()
			.Where(p => xSyntaxNodeProperties.Any(n => n.name == p.Name))
			.Select(p => new Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>(p, xSyntaxNodeProperties.Single(n => n.name == p.Name)))
			.OrderBy(p => p.Item2.index)
			.ToArray();

	if(xSyntaxNodeType != null)
	{
		var baseDeclarationText = xSyntaxNodeBaseType == null ? "ElementTypeServiceProvider" : code.Escape(xSyntaxNodeBaseType.name.ToString()).Replace("Syntax", "") + "ServiceProvider";
#>
/// <summary>
/// Provides language-aware services regarding <see cref="<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>"/>.
/// </summary>
partial class <#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>ServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>>
{	
	/// <summary>
    /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
    /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
    /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
    partial void EqualityMatchBefore(<#= code.Escape(syntaxNode.Root.Label.ToString()) #> original, <#= code.Escape(syntaxNode.Root.Label.ToString()) #> modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
    
    /// <summary>
    /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>, MatchingContext{SyntaxNodeOrToken?})"/>.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
    /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
    partial void EqualityMatchAfter(<#= code.Escape(syntaxNode.Root.Label.ToString()) #> original, <#= code.Escape(syntaxNode.Root.Label.ToString()) #> modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);

    /// <summary>
    /// Determines if two elements are exactly equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
    /// <remarks>This is the default implementation for <see cref="EqualityMatch(<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
    protected virtual bool EqualityMatchCore(<#= code.Escape(syntaxNode.Root.Label.ToString()) #> original, <#= code.Escape(syntaxNode.Root.Label.ToString()) #> modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
	{
		matchingDescription = null;

		if(original == null || modified == null) 
			return false;

<#
		if(xSyntaxNodeType.symbolic)
		{
#>
		matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
		return true;
<#
		}
		else
		{
			for (int i = 0; i < currentPropertiesMetadata.Count(); i++)
			{
				var currentProperty = currentPropertiesMetadata[i];
				var prefix = i == 0 ? "if (" : "    ";
				var line = prefix + (currentPropertiesMetadata.Count() > 1 ? "(" : "") + 
				           (currentProperty.Item2.optional 
							? ((currentPropertiesMetadata.Any(kp => !kp.Item2.optional) ? $"(original.{currentProperty.Item2.name} == null && modified.{currentProperty.Item2.name} == null) || (" : "") + 
							  $"original.{currentProperty.Item2.name} != null && modified.{currentProperty.Item2.name} != null && ") 
							: "");
				var postfix = (currentProperty.Item2.optional && currentPropertiesMetadata.Any(kp => !kp.Item2.optional) ? ")" : "") +
				              (currentPropertiesMetadata.Count() > 1 ? ")" : "") + 
				              (currentPropertiesMetadata.Count() > 1 && i != (currentPropertiesMetadata.Count() - 1) ? (currentPropertiesMetadata.All(kp => kp.Item2.optional) ? " ||" : " &&") : "") + 
							  (i == (currentPropertiesMetadata.Count() - 1) ? ")" : "");
				line += $"this.LanguageServiceProvider.EqualityMatch(original.{currentProperty.Item2.name}, modified.{currentProperty.Item2.name}, context)";
				 
				line += postfix;
#>
        <#= line #>
<# 
			}
#>
		{
			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
			return true;
		}

	    return false;
<#
		}
#>
	}	

	/// <summary>
    /// Determines if two elements are exactly equal.
    /// </summary>
    /// <param name="original">the original version.</param>
    /// <param name="modified">the modified version.</param>
    /// <param name="context">the context wherein certain matching criterion is currently running.</param>
    /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
    /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
    /// <remarks>This is the default implementation for <see cref="EqualityMatch(<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
    bool IEqualityCriterion<SyntaxNodeOrToken?, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>>.EqualityMatch(<#= code.Escape(syntaxNode.Root.Label.ToString()) #> original, <#= code.Escape(syntaxNode.Root.Label.ToString()) #> modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
	{
		bool result = false;
		var ignoreCore = false;
		matchingDescription = null;
		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
		if(ignoreCore) 
			return result;
		
		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
		return result;
	}
}

<#
	}
 }
}
	
EndNamespace(namespaceName);

manager.Process();
#>
<#+ 
void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}
#>
