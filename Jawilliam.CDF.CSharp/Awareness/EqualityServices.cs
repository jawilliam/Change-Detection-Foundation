
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using Jawilliam.CDF.Approach.Flad;
using Jawilliam.CDF.Approach.Services;
using Jawilliam.CDF.Approach.Criterions;
using Jawilliam.CDF.Approach.Awareness;

namespace Jawilliam.CDF.CSharp.Awareness
{
    /// <summary>
    /// Provides language-aware services regarding <see cref="SyntaxToken"/>.
    /// </summary>
    partial class SyntaxTokenServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, SyntaxToken, SyntaxToken>
    {
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
        public virtual bool EqualityMatch(SyntaxToken original, SyntaxToken modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
        {
    		matchingDescription = null;
    
            if (original == null || modified == null)
                return false;
        
            if (!string.IsNullOrWhiteSpace(original.ValueText) && 
    		    !string.IsNullOrWhiteSpace(modified.ValueText) && 
    			original.ValueText == modified.ValueText)
    		{
                matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.NameEquality) { Original = original, Modified = modified };
        		return true;
    		}
        
            return false;
        }
    }
    
    partial class LanguageServiceProvider
    {
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <typeparam name="TOriginal">Specific type of the original element.</typeparam>
        /// <typeparam name="TModified">Specific type of the modified element.</typeparam>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        public virtual bool EqualityMatch<TOriginal, TModified>(TOriginal original, TModified modified, MatchingContext<SyntaxNodeOrToken?> context)
        where TOriginal : SyntaxNode where TModified : SyntaxNode
        {
            return this.EqualityMatch<TOriginal, TModified>(original, modified, context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription);
        }
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <typeparam name="TOriginal">Specific type of the original element.</typeparam>
        /// <typeparam name="TModified">Specific type of the modified element.</typeparam>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
        public virtual bool EqualityMatch<TOriginal, TModified>(TOriginal original, TModified modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
        where TOriginal : SyntaxNode where TModified : SyntaxNode
        {
            matchingDescription = null;
            if (original != null && modified != null)
            {
                if (this.GetElementTypeServiceProvider((SyntaxKind)original.RawKind) is IEqualityCriterion<SyntaxNodeOrToken?, TOriginal, TModified> elementTypeServiceProvider)
                    return elementTypeServiceProvider.EqualityMatch(original, modified, context, out matchingDescription);
            }
            return false;
        }
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        public virtual bool EqualityMatch(SyntaxNode original, SyntaxNode modified, MatchingContext<SyntaxNodeOrToken?> context)
        {
            return this.EqualityMatch(original, modified, context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription);
        }
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
        public virtual bool EqualityMatch(SyntaxNode original, SyntaxNode modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
        {
            var parameterModifier = new System.Reflection.ParameterModifier(4);
            parameterModifier[3] = true;
            var genericMethod = this.GetType().GetMethod("EqualityMatch", 
    			new[] { original.GetType(), modified.GetType(), typeof(MatchingContext<SyntaxNodeOrToken?>), typeof(MatchInfo<SyntaxNodeOrToken?>) }, 
    			new System.Reflection.ParameterModifier[] { parameterModifier }).MakeGenericMethod(original.GetType(), modified.GetType());
        
            matchingDescription = null;
            return (bool)genericMethod.Invoke(this, new object[] { original, modified, context, matchingDescription });
        }
        
        /// <summary>
        /// Determines if two <see cref="SeparatedSyntaxList{TNode}"/> elements are equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="equal">logic of equality.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
        public virtual bool EqualityMatch<T>(SeparatedSyntaxList<T> original, SeparatedSyntaxList<T> modified, Func<T, T, bool> equal, MatchingContext<SyntaxNodeOrToken?> context) where T : SyntaxNode
        {
            if (original == null || modified == null)
                return false;
        
            if (original.Count != modified.Count)
                return false;
        
            for (int i = 0; i < original.Count; i++)
            {
                if (!equal(original[i], modified[i]))
                    return false;
            }
            
        	return true;
        }	
        
        /// <summary>
        /// Determines if two <see cref="SeparatedSyntaxList{TNode}"/> elements are equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
        public virtual bool EqualityMatch<T>(SeparatedSyntaxList<T> original, SeparatedSyntaxList<T> modified, MatchingContext<SyntaxNodeOrToken?> context) where T : SyntaxNode
        {
            return this.EqualityMatch(original, modified, (o, m) => this.EqualityMatch(o, m, context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription), context);
        }
    
        /// <summary>
        /// Determines if two <see cref="SyntaxList{TNode}"/> elements are equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="equal">logic of equality.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
        public virtual bool EqualityMatch<T>(SyntaxList<T> original, SyntaxList<T> modified, Func<T, T, bool> equal, MatchingContext<SyntaxNodeOrToken?> context) where T : SyntaxNode
        {
            if (original == null || modified == null)
                return false;
    
            if (original.Count != modified.Count)
                return false;
    
            for (int i = 0; i < original.Count; i++)
            {
                if (!equal(original[i], modified[i]))
                    return false;
            }
    
            return true;
        }
    
        /// <summary>
        /// Determines if two <see cref="SyntaxList{TNode}"/> elements are equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
        public virtual bool EqualityMatch<T>(SyntaxList<T> original, SyntaxList<T> modified, MatchingContext<SyntaxNodeOrToken?> context) where T : SyntaxNode
        {
            return this.EqualityMatch(original, modified, (o, m) => this.EqualityMatch(o, m, context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription), context);
        }
    
        /// <summary>
        /// Determines if two <see cref="SyntaxTokenList"/> elements are equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
        public virtual bool EqualityMatch(SyntaxTokenList original, SyntaxTokenList modified, MatchingContext<SyntaxNodeOrToken?> context)
        {
    		if (original == null || modified == null)
                return false;
        
            if (original.Count != modified.Count)
                return false;
        
            for (int i = 0; i < original.Count; i++)
            {
                if (!this.EqualityMatch(original[i], modified[i], context))
                    return false;
            }
            return true;
        }
        
        /// <summary>
        /// Determines if two <see cref="SyntaxToken"/> elements are equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description.</param>
        public virtual bool EqualityMatch(SyntaxToken original, SyntaxToken modified, MatchingContext<SyntaxNodeOrToken?> context)
        {
            return this.SyntaxTokenServiceProvider.EqualityMatch(original, modified, context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription);
        }
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AttributeArgument"/>.
    /// </summary>
    partial class AttributeArgumentServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AttributeArgumentSyntax, AttributeArgumentSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AttributeArgumentSyntax, AttributeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AttributeArgumentSyntax, AttributeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AttributeArgumentSyntax, AttributeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AttributeArgumentSyntax, AttributeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AttributeArgumentSyntax original, AttributeArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AttributeArgumentSyntax, AttributeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AttributeArgumentSyntax, AttributeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AttributeArgumentSyntax original, AttributeArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AttributeArgumentSyntax, AttributeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AttributeArgumentSyntax original, AttributeArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (((original.NameEquals == null && modified.NameEquals == null) || (original.NameEquals != null && modified.NameEquals != null && this.LanguageServiceProvider.EqualityMatch(original.NameEquals, modified.NameEquals, context))) &&
                ((original.NameColon == null && modified.NameColon == null) || (original.NameColon != null && modified.NameColon != null && this.LanguageServiceProvider.EqualityMatch(original.NameColon, modified.NameColon, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AttributeArgumentSyntax, AttributeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AttributeArgumentSyntax, AttributeArgumentSyntax>.EqualityMatch(AttributeArgumentSyntax original, AttributeArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="NameEquals"/>.
    /// </summary>
    partial class NameEqualsServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, NameEqualsSyntax, NameEqualsSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(NameEqualsSyntax, NameEqualsSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(NameEqualsSyntax, NameEqualsSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(NameEqualsSyntax, NameEqualsSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(NameEqualsSyntax, NameEqualsSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(NameEqualsSyntax original, NameEqualsSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(NameEqualsSyntax, NameEqualsSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(NameEqualsSyntax, NameEqualsSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(NameEqualsSyntax original, NameEqualsSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(NameEqualsSyntax, NameEqualsSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(NameEqualsSyntax original, NameEqualsSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EqualsToken, modified.EqualsToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(NameEqualsSyntax, NameEqualsSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, NameEqualsSyntax, NameEqualsSyntax>.EqualityMatch(NameEqualsSyntax original, NameEqualsSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TypeParameterList"/>.
    /// </summary>
    partial class TypeParameterListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TypeParameterListSyntax, TypeParameterListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TypeParameterListSyntax, TypeParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeParameterListSyntax, TypeParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TypeParameterListSyntax, TypeParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TypeParameterListSyntax, TypeParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TypeParameterListSyntax original, TypeParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TypeParameterListSyntax, TypeParameterListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeParameterListSyntax, TypeParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TypeParameterListSyntax original, TypeParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeParameterListSyntax, TypeParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TypeParameterListSyntax original, TypeParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.LessThanToken, modified.LessThanToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Parameters, modified.Parameters, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.GreaterThanToken, modified.GreaterThanToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeParameterListSyntax, TypeParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TypeParameterListSyntax, TypeParameterListSyntax>.EqualityMatch(TypeParameterListSyntax original, TypeParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TypeParameter"/>.
    /// </summary>
    partial class TypeParameterServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TypeParameterSyntax, TypeParameterSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TypeParameterSyntax, TypeParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeParameterSyntax, TypeParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TypeParameterSyntax, TypeParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TypeParameterSyntax, TypeParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TypeParameterSyntax original, TypeParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TypeParameterSyntax, TypeParameterSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeParameterSyntax, TypeParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TypeParameterSyntax original, TypeParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeParameterSyntax, TypeParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TypeParameterSyntax original, TypeParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                ((original.VarianceKeyword == null && modified.VarianceKeyword == null) || (original.VarianceKeyword != null && modified.VarianceKeyword != null && this.LanguageServiceProvider.EqualityMatch(original.VarianceKeyword, modified.VarianceKeyword, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeParameterSyntax, TypeParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TypeParameterSyntax, TypeParameterSyntax>.EqualityMatch(TypeParameterSyntax original, TypeParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="BaseList"/>.
    /// </summary>
    partial class BaseListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, BaseListSyntax, BaseListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(BaseListSyntax, BaseListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BaseListSyntax, BaseListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(BaseListSyntax, BaseListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(BaseListSyntax, BaseListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(BaseListSyntax original, BaseListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(BaseListSyntax, BaseListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BaseListSyntax, BaseListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(BaseListSyntax original, BaseListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BaseListSyntax, BaseListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(BaseListSyntax original, BaseListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Types, modified.Types, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BaseListSyntax, BaseListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, BaseListSyntax, BaseListSyntax>.EqualityMatch(BaseListSyntax original, BaseListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TypeParameterConstraintClause"/>.
    /// </summary>
    partial class TypeParameterConstraintClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TypeParameterConstraintClauseSyntax, TypeParameterConstraintClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TypeParameterConstraintClauseSyntax, TypeParameterConstraintClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeParameterConstraintClauseSyntax, TypeParameterConstraintClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TypeParameterConstraintClauseSyntax, TypeParameterConstraintClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TypeParameterConstraintClauseSyntax, TypeParameterConstraintClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TypeParameterConstraintClauseSyntax original, TypeParameterConstraintClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TypeParameterConstraintClauseSyntax, TypeParameterConstraintClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeParameterConstraintClauseSyntax, TypeParameterConstraintClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TypeParameterConstraintClauseSyntax original, TypeParameterConstraintClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeParameterConstraintClauseSyntax, TypeParameterConstraintClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TypeParameterConstraintClauseSyntax original, TypeParameterConstraintClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.WhereKeyword, modified.WhereKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Constraints, modified.Constraints, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeParameterConstraintClauseSyntax, TypeParameterConstraintClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TypeParameterConstraintClauseSyntax, TypeParameterConstraintClauseSyntax>.EqualityMatch(TypeParameterConstraintClauseSyntax original, TypeParameterConstraintClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ExplicitInterfaceSpecifier"/>.
    /// </summary>
    partial class ExplicitInterfaceSpecifierServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ExplicitInterfaceSpecifierSyntax, ExplicitInterfaceSpecifierSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ExplicitInterfaceSpecifierSyntax, ExplicitInterfaceSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ExplicitInterfaceSpecifierSyntax, ExplicitInterfaceSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ExplicitInterfaceSpecifierSyntax, ExplicitInterfaceSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ExplicitInterfaceSpecifierSyntax, ExplicitInterfaceSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ExplicitInterfaceSpecifierSyntax original, ExplicitInterfaceSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ExplicitInterfaceSpecifierSyntax, ExplicitInterfaceSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ExplicitInterfaceSpecifierSyntax, ExplicitInterfaceSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ExplicitInterfaceSpecifierSyntax original, ExplicitInterfaceSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ExplicitInterfaceSpecifierSyntax, ExplicitInterfaceSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ExplicitInterfaceSpecifierSyntax original, ExplicitInterfaceSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.DotToken, modified.DotToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ExplicitInterfaceSpecifierSyntax, ExplicitInterfaceSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ExplicitInterfaceSpecifierSyntax, ExplicitInterfaceSpecifierSyntax>.EqualityMatch(ExplicitInterfaceSpecifierSyntax original, ExplicitInterfaceSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ConstructorInitializer"/>.
    /// </summary>
    partial class ConstructorInitializerServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ConstructorInitializerSyntax, ConstructorInitializerSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ConstructorInitializerSyntax, ConstructorInitializerSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConstructorInitializerSyntax, ConstructorInitializerSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ConstructorInitializerSyntax, ConstructorInitializerSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ConstructorInitializerSyntax, ConstructorInitializerSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ConstructorInitializerSyntax original, ConstructorInitializerSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ConstructorInitializerSyntax, ConstructorInitializerSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConstructorInitializerSyntax, ConstructorInitializerSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ConstructorInitializerSyntax original, ConstructorInitializerSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConstructorInitializerSyntax, ConstructorInitializerSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ConstructorInitializerSyntax original, ConstructorInitializerSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ThisOrBaseKeyword, modified.ThisOrBaseKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ArgumentList, modified.ArgumentList, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConstructorInitializerSyntax, ConstructorInitializerSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ConstructorInitializerSyntax, ConstructorInitializerSyntax>.EqualityMatch(ConstructorInitializerSyntax original, ConstructorInitializerSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ArrowExpressionClause"/>.
    /// </summary>
    partial class ArrowExpressionClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ArrowExpressionClauseSyntax, ArrowExpressionClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ArrowExpressionClauseSyntax, ArrowExpressionClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArrowExpressionClauseSyntax, ArrowExpressionClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ArrowExpressionClauseSyntax, ArrowExpressionClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ArrowExpressionClauseSyntax, ArrowExpressionClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ArrowExpressionClauseSyntax original, ArrowExpressionClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ArrowExpressionClauseSyntax, ArrowExpressionClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArrowExpressionClauseSyntax, ArrowExpressionClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ArrowExpressionClauseSyntax original, ArrowExpressionClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArrowExpressionClauseSyntax, ArrowExpressionClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ArrowExpressionClauseSyntax original, ArrowExpressionClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ArrowToken, modified.ArrowToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArrowExpressionClauseSyntax, ArrowExpressionClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ArrowExpressionClauseSyntax, ArrowExpressionClauseSyntax>.EqualityMatch(ArrowExpressionClauseSyntax original, ArrowExpressionClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AccessorList"/>.
    /// </summary>
    partial class AccessorListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AccessorListSyntax, AccessorListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AccessorListSyntax, AccessorListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AccessorListSyntax, AccessorListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AccessorListSyntax, AccessorListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AccessorListSyntax, AccessorListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AccessorListSyntax original, AccessorListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AccessorListSyntax, AccessorListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AccessorListSyntax, AccessorListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AccessorListSyntax original, AccessorListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AccessorListSyntax, AccessorListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AccessorListSyntax original, AccessorListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Accessors, modified.Accessors, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AccessorListSyntax, AccessorListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AccessorListSyntax, AccessorListSyntax>.EqualityMatch(AccessorListSyntax original, AccessorListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AccessorDeclaration"/>.
    /// </summary>
    partial class AccessorDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AccessorDeclarationSyntax, AccessorDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AccessorDeclarationSyntax, AccessorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AccessorDeclarationSyntax, AccessorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AccessorDeclarationSyntax, AccessorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AccessorDeclarationSyntax, AccessorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AccessorDeclarationSyntax original, AccessorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AccessorDeclarationSyntax, AccessorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AccessorDeclarationSyntax, AccessorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AccessorDeclarationSyntax original, AccessorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AccessorDeclarationSyntax, AccessorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AccessorDeclarationSyntax original, AccessorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                ((original.Body == null && modified.Body == null) || (original.Body != null && modified.Body != null && this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context))) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AccessorDeclarationSyntax, AccessorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AccessorDeclarationSyntax, AccessorDeclarationSyntax>.EqualityMatch(AccessorDeclarationSyntax original, AccessorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="Parameter"/>.
    /// </summary>
    partial class ParameterServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ParameterSyntax, ParameterSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ParameterSyntax, ParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ParameterSyntax, ParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ParameterSyntax, ParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ParameterSyntax, ParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ParameterSyntax original, ParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ParameterSyntax, ParameterSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ParameterSyntax, ParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ParameterSyntax original, ParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ParameterSyntax, ParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ParameterSyntax original, ParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                ((original.Type == null && modified.Type == null) || (original.Type != null && modified.Type != null && this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.Default == null && modified.Default == null) || (original.Default != null && modified.Default != null && this.LanguageServiceProvider.EqualityMatch(original.Default, modified.Default, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ParameterSyntax, ParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ParameterSyntax, ParameterSyntax>.EqualityMatch(ParameterSyntax original, ParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CrefParameter"/>.
    /// </summary>
    partial class CrefParameterServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CrefParameterSyntax, CrefParameterSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CrefParameterSyntax, CrefParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CrefParameterSyntax, CrefParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CrefParameterSyntax, CrefParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CrefParameterSyntax, CrefParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CrefParameterSyntax original, CrefParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CrefParameterSyntax, CrefParameterSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CrefParameterSyntax, CrefParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CrefParameterSyntax original, CrefParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CrefParameterSyntax, CrefParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CrefParameterSyntax original, CrefParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (((original.RefKindKeyword == null && modified.RefKindKeyword == null) || (original.RefKindKeyword != null && modified.RefKindKeyword != null && this.LanguageServiceProvider.EqualityMatch(original.RefKindKeyword, modified.RefKindKeyword, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CrefParameterSyntax, CrefParameterSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CrefParameterSyntax, CrefParameterSyntax>.EqualityMatch(CrefParameterSyntax original, CrefParameterSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlElementStartTag"/>.
    /// </summary>
    partial class XmlElementStartTagServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlElementStartTagSyntax, XmlElementStartTagSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlElementStartTagSyntax, XmlElementStartTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlElementStartTagSyntax, XmlElementStartTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlElementStartTagSyntax, XmlElementStartTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlElementStartTagSyntax, XmlElementStartTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlElementStartTagSyntax original, XmlElementStartTagSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlElementStartTagSyntax, XmlElementStartTagSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlElementStartTagSyntax, XmlElementStartTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlElementStartTagSyntax original, XmlElementStartTagSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlElementStartTagSyntax, XmlElementStartTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlElementStartTagSyntax original, XmlElementStartTagSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.LessThanToken, modified.LessThanToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Attributes, modified.Attributes, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.GreaterThanToken, modified.GreaterThanToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlElementStartTagSyntax, XmlElementStartTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlElementStartTagSyntax, XmlElementStartTagSyntax>.EqualityMatch(XmlElementStartTagSyntax original, XmlElementStartTagSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlElementEndTag"/>.
    /// </summary>
    partial class XmlElementEndTagServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlElementEndTagSyntax, XmlElementEndTagSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlElementEndTagSyntax, XmlElementEndTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlElementEndTagSyntax, XmlElementEndTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlElementEndTagSyntax, XmlElementEndTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlElementEndTagSyntax, XmlElementEndTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlElementEndTagSyntax original, XmlElementEndTagSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlElementEndTagSyntax, XmlElementEndTagSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlElementEndTagSyntax, XmlElementEndTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlElementEndTagSyntax original, XmlElementEndTagSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlElementEndTagSyntax, XmlElementEndTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlElementEndTagSyntax original, XmlElementEndTagSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.LessThanSlashToken, modified.LessThanSlashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.GreaterThanToken, modified.GreaterThanToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlElementEndTagSyntax, XmlElementEndTagSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlElementEndTagSyntax, XmlElementEndTagSyntax>.EqualityMatch(XmlElementEndTagSyntax original, XmlElementEndTagSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlName"/>.
    /// </summary>
    partial class XmlNameServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlNameSyntax, XmlNameSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlNameSyntax, XmlNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlNameSyntax, XmlNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlNameSyntax, XmlNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlNameSyntax, XmlNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlNameSyntax original, XmlNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlNameSyntax, XmlNameSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlNameSyntax, XmlNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlNameSyntax original, XmlNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlNameSyntax, XmlNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlNameSyntax original, XmlNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (((original.Prefix == null && modified.Prefix == null) || (original.Prefix != null && modified.Prefix != null && this.LanguageServiceProvider.EqualityMatch(original.Prefix, modified.Prefix, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.LocalName, modified.LocalName, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlNameSyntax, XmlNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlNameSyntax, XmlNameSyntax>.EqualityMatch(XmlNameSyntax original, XmlNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlPrefix"/>.
    /// </summary>
    partial class XmlPrefixServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlPrefixSyntax, XmlPrefixSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlPrefixSyntax, XmlPrefixSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlPrefixSyntax, XmlPrefixSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlPrefixSyntax, XmlPrefixSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlPrefixSyntax, XmlPrefixSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlPrefixSyntax original, XmlPrefixSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlPrefixSyntax, XmlPrefixSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlPrefixSyntax, XmlPrefixSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlPrefixSyntax original, XmlPrefixSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlPrefixSyntax, XmlPrefixSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlPrefixSyntax original, XmlPrefixSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Prefix, modified.Prefix, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlPrefixSyntax, XmlPrefixSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlPrefixSyntax, XmlPrefixSyntax>.EqualityMatch(XmlPrefixSyntax original, XmlPrefixSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TypeArgumentList"/>.
    /// </summary>
    partial class TypeArgumentListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TypeArgumentListSyntax, TypeArgumentListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TypeArgumentListSyntax, TypeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeArgumentListSyntax, TypeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TypeArgumentListSyntax, TypeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TypeArgumentListSyntax, TypeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TypeArgumentListSyntax original, TypeArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TypeArgumentListSyntax, TypeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeArgumentListSyntax, TypeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TypeArgumentListSyntax original, TypeArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeArgumentListSyntax, TypeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TypeArgumentListSyntax original, TypeArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.LessThanToken, modified.LessThanToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Arguments, modified.Arguments, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.GreaterThanToken, modified.GreaterThanToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeArgumentListSyntax, TypeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TypeArgumentListSyntax, TypeArgumentListSyntax>.EqualityMatch(TypeArgumentListSyntax original, TypeArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ArrayRankSpecifier"/>.
    /// </summary>
    partial class ArrayRankSpecifierServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ArrayRankSpecifierSyntax, ArrayRankSpecifierSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ArrayRankSpecifierSyntax, ArrayRankSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArrayRankSpecifierSyntax, ArrayRankSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ArrayRankSpecifierSyntax, ArrayRankSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ArrayRankSpecifierSyntax, ArrayRankSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ArrayRankSpecifierSyntax original, ArrayRankSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ArrayRankSpecifierSyntax, ArrayRankSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArrayRankSpecifierSyntax, ArrayRankSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ArrayRankSpecifierSyntax original, ArrayRankSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArrayRankSpecifierSyntax, ArrayRankSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ArrayRankSpecifierSyntax original, ArrayRankSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenBracketToken, modified.OpenBracketToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Sizes, modified.Sizes, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBracketToken, modified.CloseBracketToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArrayRankSpecifierSyntax, ArrayRankSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ArrayRankSpecifierSyntax, ArrayRankSpecifierSyntax>.EqualityMatch(ArrayRankSpecifierSyntax original, ArrayRankSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TupleElement"/>.
    /// </summary>
    partial class TupleElementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TupleElementSyntax, TupleElementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TupleElementSyntax, TupleElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TupleElementSyntax, TupleElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TupleElementSyntax, TupleElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TupleElementSyntax, TupleElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TupleElementSyntax original, TupleElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TupleElementSyntax, TupleElementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TupleElementSyntax, TupleElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TupleElementSyntax original, TupleElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TupleElementSyntax, TupleElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TupleElementSyntax original, TupleElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                ((original.Identifier == null && modified.Identifier == null) || (original.Identifier != null && modified.Identifier != null && this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TupleElementSyntax, TupleElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TupleElementSyntax, TupleElementSyntax>.EqualityMatch(TupleElementSyntax original, TupleElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="Argument"/>.
    /// </summary>
    partial class ArgumentServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ArgumentSyntax, ArgumentSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ArgumentSyntax, ArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArgumentSyntax, ArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ArgumentSyntax, ArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ArgumentSyntax, ArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ArgumentSyntax original, ArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ArgumentSyntax, ArgumentSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArgumentSyntax, ArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ArgumentSyntax original, ArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArgumentSyntax, ArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ArgumentSyntax original, ArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (((original.NameColon == null && modified.NameColon == null) || (original.NameColon != null && modified.NameColon != null && this.LanguageServiceProvider.EqualityMatch(original.NameColon, modified.NameColon, context))) &&
                ((original.RefKindKeyword == null && modified.RefKindKeyword == null) || (original.RefKindKeyword != null && modified.RefKindKeyword != null && this.LanguageServiceProvider.EqualityMatch(original.RefKindKeyword, modified.RefKindKeyword, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArgumentSyntax, ArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ArgumentSyntax, ArgumentSyntax>.EqualityMatch(ArgumentSyntax original, ArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="NameColon"/>.
    /// </summary>
    partial class NameColonServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, NameColonSyntax, NameColonSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(NameColonSyntax, NameColonSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(NameColonSyntax, NameColonSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(NameColonSyntax, NameColonSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(NameColonSyntax, NameColonSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(NameColonSyntax original, NameColonSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(NameColonSyntax, NameColonSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(NameColonSyntax, NameColonSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(NameColonSyntax original, NameColonSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(NameColonSyntax, NameColonSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(NameColonSyntax original, NameColonSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(NameColonSyntax, NameColonSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, NameColonSyntax, NameColonSyntax>.EqualityMatch(NameColonSyntax original, NameColonSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AnonymousObjectMemberDeclarator"/>.
    /// </summary>
    partial class AnonymousObjectMemberDeclaratorServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AnonymousObjectMemberDeclaratorSyntax, AnonymousObjectMemberDeclaratorSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AnonymousObjectMemberDeclaratorSyntax, AnonymousObjectMemberDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AnonymousObjectMemberDeclaratorSyntax, AnonymousObjectMemberDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AnonymousObjectMemberDeclaratorSyntax, AnonymousObjectMemberDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AnonymousObjectMemberDeclaratorSyntax, AnonymousObjectMemberDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AnonymousObjectMemberDeclaratorSyntax original, AnonymousObjectMemberDeclaratorSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AnonymousObjectMemberDeclaratorSyntax, AnonymousObjectMemberDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AnonymousObjectMemberDeclaratorSyntax, AnonymousObjectMemberDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AnonymousObjectMemberDeclaratorSyntax original, AnonymousObjectMemberDeclaratorSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AnonymousObjectMemberDeclaratorSyntax, AnonymousObjectMemberDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AnonymousObjectMemberDeclaratorSyntax original, AnonymousObjectMemberDeclaratorSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (((original.NameEquals == null && modified.NameEquals == null) || (original.NameEquals != null && modified.NameEquals != null && this.LanguageServiceProvider.EqualityMatch(original.NameEquals, modified.NameEquals, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AnonymousObjectMemberDeclaratorSyntax, AnonymousObjectMemberDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AnonymousObjectMemberDeclaratorSyntax, AnonymousObjectMemberDeclaratorSyntax>.EqualityMatch(AnonymousObjectMemberDeclaratorSyntax original, AnonymousObjectMemberDeclaratorSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="QueryBody"/>.
    /// </summary>
    partial class QueryBodyServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, QueryBodySyntax, QueryBodySyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(QueryBodySyntax, QueryBodySyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(QueryBodySyntax, QueryBodySyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(QueryBodySyntax, QueryBodySyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(QueryBodySyntax, QueryBodySyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(QueryBodySyntax original, QueryBodySyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(QueryBodySyntax, QueryBodySyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(QueryBodySyntax, QueryBodySyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(QueryBodySyntax original, QueryBodySyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(QueryBodySyntax, QueryBodySyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(QueryBodySyntax original, QueryBodySyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Clauses, modified.Clauses, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SelectOrGroup, modified.SelectOrGroup, context)) &&
                ((original.Continuation == null && modified.Continuation == null) || (original.Continuation != null && modified.Continuation != null && this.LanguageServiceProvider.EqualityMatch(original.Continuation, modified.Continuation, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(QueryBodySyntax, QueryBodySyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, QueryBodySyntax, QueryBodySyntax>.EqualityMatch(QueryBodySyntax original, QueryBodySyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="JoinIntoClause"/>.
    /// </summary>
    partial class JoinIntoClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, JoinIntoClauseSyntax, JoinIntoClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(JoinIntoClauseSyntax, JoinIntoClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(JoinIntoClauseSyntax, JoinIntoClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(JoinIntoClauseSyntax, JoinIntoClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(JoinIntoClauseSyntax, JoinIntoClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(JoinIntoClauseSyntax original, JoinIntoClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(JoinIntoClauseSyntax, JoinIntoClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(JoinIntoClauseSyntax, JoinIntoClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(JoinIntoClauseSyntax original, JoinIntoClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(JoinIntoClauseSyntax, JoinIntoClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(JoinIntoClauseSyntax original, JoinIntoClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.IntoKeyword, modified.IntoKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(JoinIntoClauseSyntax, JoinIntoClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, JoinIntoClauseSyntax, JoinIntoClauseSyntax>.EqualityMatch(JoinIntoClauseSyntax original, JoinIntoClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="Ordering"/>.
    /// </summary>
    partial class OrderingServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, OrderingSyntax, OrderingSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(OrderingSyntax, OrderingSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OrderingSyntax, OrderingSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(OrderingSyntax, OrderingSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(OrderingSyntax, OrderingSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(OrderingSyntax original, OrderingSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(OrderingSyntax, OrderingSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OrderingSyntax, OrderingSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(OrderingSyntax original, OrderingSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OrderingSyntax, OrderingSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(OrderingSyntax original, OrderingSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                ((original.AscendingOrDescendingKeyword == null && modified.AscendingOrDescendingKeyword == null) || (original.AscendingOrDescendingKeyword != null && modified.AscendingOrDescendingKeyword != null && this.LanguageServiceProvider.EqualityMatch(original.AscendingOrDescendingKeyword, modified.AscendingOrDescendingKeyword, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OrderingSyntax, OrderingSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, OrderingSyntax, OrderingSyntax>.EqualityMatch(OrderingSyntax original, OrderingSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="QueryContinuation"/>.
    /// </summary>
    partial class QueryContinuationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, QueryContinuationSyntax, QueryContinuationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(QueryContinuationSyntax, QueryContinuationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(QueryContinuationSyntax, QueryContinuationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(QueryContinuationSyntax, QueryContinuationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(QueryContinuationSyntax, QueryContinuationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(QueryContinuationSyntax original, QueryContinuationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(QueryContinuationSyntax, QueryContinuationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(QueryContinuationSyntax, QueryContinuationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(QueryContinuationSyntax original, QueryContinuationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(QueryContinuationSyntax, QueryContinuationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(QueryContinuationSyntax original, QueryContinuationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.IntoKeyword, modified.IntoKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(QueryContinuationSyntax, QueryContinuationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, QueryContinuationSyntax, QueryContinuationSyntax>.EqualityMatch(QueryContinuationSyntax original, QueryContinuationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="WhenClause"/>.
    /// </summary>
    partial class WhenClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, WhenClauseSyntax, WhenClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(WhenClauseSyntax, WhenClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(WhenClauseSyntax, WhenClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(WhenClauseSyntax, WhenClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(WhenClauseSyntax, WhenClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(WhenClauseSyntax original, WhenClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(WhenClauseSyntax, WhenClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(WhenClauseSyntax, WhenClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(WhenClauseSyntax original, WhenClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(WhenClauseSyntax, WhenClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(WhenClauseSyntax original, WhenClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.WhenKeyword, modified.WhenKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Condition, modified.Condition, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(WhenClauseSyntax, WhenClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, WhenClauseSyntax, WhenClauseSyntax>.EqualityMatch(WhenClauseSyntax original, WhenClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="InterpolationAlignmentClause"/>.
    /// </summary>
    partial class InterpolationAlignmentClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, InterpolationAlignmentClauseSyntax, InterpolationAlignmentClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(InterpolationAlignmentClauseSyntax, InterpolationAlignmentClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterpolationAlignmentClauseSyntax, InterpolationAlignmentClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(InterpolationAlignmentClauseSyntax, InterpolationAlignmentClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(InterpolationAlignmentClauseSyntax, InterpolationAlignmentClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(InterpolationAlignmentClauseSyntax original, InterpolationAlignmentClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(InterpolationAlignmentClauseSyntax, InterpolationAlignmentClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterpolationAlignmentClauseSyntax, InterpolationAlignmentClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(InterpolationAlignmentClauseSyntax original, InterpolationAlignmentClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterpolationAlignmentClauseSyntax, InterpolationAlignmentClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(InterpolationAlignmentClauseSyntax original, InterpolationAlignmentClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.CommaToken, modified.CommaToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Value, modified.Value, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterpolationAlignmentClauseSyntax, InterpolationAlignmentClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, InterpolationAlignmentClauseSyntax, InterpolationAlignmentClauseSyntax>.EqualityMatch(InterpolationAlignmentClauseSyntax original, InterpolationAlignmentClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="InterpolationFormatClause"/>.
    /// </summary>
    partial class InterpolationFormatClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, InterpolationFormatClauseSyntax, InterpolationFormatClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(InterpolationFormatClauseSyntax, InterpolationFormatClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterpolationFormatClauseSyntax, InterpolationFormatClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(InterpolationFormatClauseSyntax, InterpolationFormatClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(InterpolationFormatClauseSyntax, InterpolationFormatClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(InterpolationFormatClauseSyntax original, InterpolationFormatClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(InterpolationFormatClauseSyntax, InterpolationFormatClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterpolationFormatClauseSyntax, InterpolationFormatClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(InterpolationFormatClauseSyntax original, InterpolationFormatClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterpolationFormatClauseSyntax, InterpolationFormatClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(InterpolationFormatClauseSyntax original, InterpolationFormatClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.FormatStringToken, modified.FormatStringToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterpolationFormatClauseSyntax, InterpolationFormatClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, InterpolationFormatClauseSyntax, InterpolationFormatClauseSyntax>.EqualityMatch(InterpolationFormatClauseSyntax original, InterpolationFormatClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="VariableDeclaration"/>.
    /// </summary>
    partial class VariableDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, VariableDeclarationSyntax, VariableDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(VariableDeclarationSyntax, VariableDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(VariableDeclarationSyntax, VariableDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(VariableDeclarationSyntax, VariableDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(VariableDeclarationSyntax, VariableDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(VariableDeclarationSyntax original, VariableDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(VariableDeclarationSyntax, VariableDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(VariableDeclarationSyntax, VariableDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(VariableDeclarationSyntax original, VariableDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(VariableDeclarationSyntax, VariableDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(VariableDeclarationSyntax original, VariableDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Variables, modified.Variables, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(VariableDeclarationSyntax, VariableDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, VariableDeclarationSyntax, VariableDeclarationSyntax>.EqualityMatch(VariableDeclarationSyntax original, VariableDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="VariableDeclarator"/>.
    /// </summary>
    partial class VariableDeclaratorServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, VariableDeclaratorSyntax, VariableDeclaratorSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(VariableDeclaratorSyntax, VariableDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(VariableDeclaratorSyntax, VariableDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(VariableDeclaratorSyntax, VariableDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(VariableDeclaratorSyntax, VariableDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(VariableDeclaratorSyntax original, VariableDeclaratorSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(VariableDeclaratorSyntax, VariableDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(VariableDeclaratorSyntax, VariableDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(VariableDeclaratorSyntax original, VariableDeclaratorSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(VariableDeclaratorSyntax, VariableDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(VariableDeclaratorSyntax original, VariableDeclaratorSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.ArgumentList == null && modified.ArgumentList == null) || (original.ArgumentList != null && modified.ArgumentList != null && this.LanguageServiceProvider.EqualityMatch(original.ArgumentList, modified.ArgumentList, context))) &&
                ((original.Initializer == null && modified.Initializer == null) || (original.Initializer != null && modified.Initializer != null && this.LanguageServiceProvider.EqualityMatch(original.Initializer, modified.Initializer, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(VariableDeclaratorSyntax, VariableDeclaratorSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, VariableDeclaratorSyntax, VariableDeclaratorSyntax>.EqualityMatch(VariableDeclaratorSyntax original, VariableDeclaratorSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="EqualsValueClause"/>.
    /// </summary>
    partial class EqualsValueClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, EqualsValueClauseSyntax, EqualsValueClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(EqualsValueClauseSyntax, EqualsValueClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EqualsValueClauseSyntax, EqualsValueClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(EqualsValueClauseSyntax, EqualsValueClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(EqualsValueClauseSyntax, EqualsValueClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(EqualsValueClauseSyntax original, EqualsValueClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(EqualsValueClauseSyntax, EqualsValueClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EqualsValueClauseSyntax, EqualsValueClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(EqualsValueClauseSyntax original, EqualsValueClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EqualsValueClauseSyntax, EqualsValueClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(EqualsValueClauseSyntax original, EqualsValueClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.EqualsToken, modified.EqualsToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Value, modified.Value, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EqualsValueClauseSyntax, EqualsValueClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, EqualsValueClauseSyntax, EqualsValueClauseSyntax>.EqualityMatch(EqualsValueClauseSyntax original, EqualsValueClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ElseClause"/>.
    /// </summary>
    partial class ElseClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ElseClauseSyntax, ElseClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ElseClauseSyntax, ElseClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ElseClauseSyntax, ElseClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ElseClauseSyntax, ElseClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ElseClauseSyntax, ElseClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ElseClauseSyntax original, ElseClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ElseClauseSyntax, ElseClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ElseClauseSyntax, ElseClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ElseClauseSyntax original, ElseClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ElseClauseSyntax, ElseClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ElseClauseSyntax original, ElseClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ElseKeyword, modified.ElseKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ElseClauseSyntax, ElseClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ElseClauseSyntax, ElseClauseSyntax>.EqualityMatch(ElseClauseSyntax original, ElseClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="SwitchSection"/>.
    /// </summary>
    partial class SwitchSectionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, SwitchSectionSyntax, SwitchSectionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(SwitchSectionSyntax, SwitchSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SwitchSectionSyntax, SwitchSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(SwitchSectionSyntax, SwitchSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(SwitchSectionSyntax, SwitchSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(SwitchSectionSyntax original, SwitchSectionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(SwitchSectionSyntax, SwitchSectionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SwitchSectionSyntax, SwitchSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(SwitchSectionSyntax original, SwitchSectionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SwitchSectionSyntax, SwitchSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(SwitchSectionSyntax original, SwitchSectionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Labels, modified.Labels, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statements, modified.Statements, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SwitchSectionSyntax, SwitchSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, SwitchSectionSyntax, SwitchSectionSyntax>.EqualityMatch(SwitchSectionSyntax original, SwitchSectionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CatchClause"/>.
    /// </summary>
    partial class CatchClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CatchClauseSyntax, CatchClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CatchClauseSyntax, CatchClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CatchClauseSyntax, CatchClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CatchClauseSyntax, CatchClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CatchClauseSyntax, CatchClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CatchClauseSyntax original, CatchClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CatchClauseSyntax, CatchClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CatchClauseSyntax, CatchClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CatchClauseSyntax original, CatchClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CatchClauseSyntax, CatchClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CatchClauseSyntax original, CatchClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.CatchKeyword, modified.CatchKeyword, context)) &&
                ((original.Declaration == null && modified.Declaration == null) || (original.Declaration != null && modified.Declaration != null && this.LanguageServiceProvider.EqualityMatch(original.Declaration, modified.Declaration, context))) &&
                ((original.Filter == null && modified.Filter == null) || (original.Filter != null && modified.Filter != null && this.LanguageServiceProvider.EqualityMatch(original.Filter, modified.Filter, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Block, modified.Block, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CatchClauseSyntax, CatchClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CatchClauseSyntax, CatchClauseSyntax>.EqualityMatch(CatchClauseSyntax original, CatchClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CatchDeclaration"/>.
    /// </summary>
    partial class CatchDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CatchDeclarationSyntax, CatchDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CatchDeclarationSyntax, CatchDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CatchDeclarationSyntax, CatchDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CatchDeclarationSyntax, CatchDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CatchDeclarationSyntax, CatchDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CatchDeclarationSyntax original, CatchDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CatchDeclarationSyntax, CatchDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CatchDeclarationSyntax, CatchDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CatchDeclarationSyntax original, CatchDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CatchDeclarationSyntax, CatchDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CatchDeclarationSyntax original, CatchDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                ((original.Identifier == null && modified.Identifier == null) || (original.Identifier != null && modified.Identifier != null && this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CatchDeclarationSyntax, CatchDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CatchDeclarationSyntax, CatchDeclarationSyntax>.EqualityMatch(CatchDeclarationSyntax original, CatchDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CatchFilterClause"/>.
    /// </summary>
    partial class CatchFilterClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CatchFilterClauseSyntax, CatchFilterClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CatchFilterClauseSyntax, CatchFilterClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CatchFilterClauseSyntax, CatchFilterClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CatchFilterClauseSyntax, CatchFilterClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CatchFilterClauseSyntax, CatchFilterClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CatchFilterClauseSyntax original, CatchFilterClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CatchFilterClauseSyntax, CatchFilterClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CatchFilterClauseSyntax, CatchFilterClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CatchFilterClauseSyntax original, CatchFilterClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CatchFilterClauseSyntax, CatchFilterClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CatchFilterClauseSyntax original, CatchFilterClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.WhenKeyword, modified.WhenKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.FilterExpression, modified.FilterExpression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CatchFilterClauseSyntax, CatchFilterClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CatchFilterClauseSyntax, CatchFilterClauseSyntax>.EqualityMatch(CatchFilterClauseSyntax original, CatchFilterClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="FinallyClause"/>.
    /// </summary>
    partial class FinallyClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, FinallyClauseSyntax, FinallyClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(FinallyClauseSyntax, FinallyClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(FinallyClauseSyntax, FinallyClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(FinallyClauseSyntax, FinallyClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(FinallyClauseSyntax, FinallyClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(FinallyClauseSyntax original, FinallyClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(FinallyClauseSyntax, FinallyClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(FinallyClauseSyntax, FinallyClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(FinallyClauseSyntax original, FinallyClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(FinallyClauseSyntax, FinallyClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(FinallyClauseSyntax original, FinallyClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.FinallyKeyword, modified.FinallyKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Block, modified.Block, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(FinallyClauseSyntax, FinallyClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, FinallyClauseSyntax, FinallyClauseSyntax>.EqualityMatch(FinallyClauseSyntax original, FinallyClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CompilationUnit"/>.
    /// </summary>
    partial class CompilationUnitServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CompilationUnitSyntax, CompilationUnitSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CompilationUnitSyntax, CompilationUnitSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CompilationUnitSyntax, CompilationUnitSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CompilationUnitSyntax, CompilationUnitSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CompilationUnitSyntax, CompilationUnitSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CompilationUnitSyntax original, CompilationUnitSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CompilationUnitSyntax, CompilationUnitSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CompilationUnitSyntax, CompilationUnitSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CompilationUnitSyntax original, CompilationUnitSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CompilationUnitSyntax, CompilationUnitSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CompilationUnitSyntax original, CompilationUnitSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Externs, modified.Externs, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Usings, modified.Usings, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Members, modified.Members, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfFileToken, modified.EndOfFileToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CompilationUnitSyntax, CompilationUnitSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CompilationUnitSyntax, CompilationUnitSyntax>.EqualityMatch(CompilationUnitSyntax original, CompilationUnitSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ExternAliasDirective"/>.
    /// </summary>
    partial class ExternAliasDirectiveServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ExternAliasDirectiveSyntax, ExternAliasDirectiveSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ExternAliasDirectiveSyntax, ExternAliasDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ExternAliasDirectiveSyntax, ExternAliasDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ExternAliasDirectiveSyntax, ExternAliasDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ExternAliasDirectiveSyntax, ExternAliasDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ExternAliasDirectiveSyntax original, ExternAliasDirectiveSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ExternAliasDirectiveSyntax, ExternAliasDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ExternAliasDirectiveSyntax, ExternAliasDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ExternAliasDirectiveSyntax original, ExternAliasDirectiveSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ExternAliasDirectiveSyntax, ExternAliasDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ExternAliasDirectiveSyntax original, ExternAliasDirectiveSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ExternKeyword, modified.ExternKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.AliasKeyword, modified.AliasKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ExternAliasDirectiveSyntax, ExternAliasDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ExternAliasDirectiveSyntax, ExternAliasDirectiveSyntax>.EqualityMatch(ExternAliasDirectiveSyntax original, ExternAliasDirectiveSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="UsingDirective"/>.
    /// </summary>
    partial class UsingDirectiveServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, UsingDirectiveSyntax, UsingDirectiveSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(UsingDirectiveSyntax, UsingDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(UsingDirectiveSyntax, UsingDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(UsingDirectiveSyntax, UsingDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(UsingDirectiveSyntax, UsingDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(UsingDirectiveSyntax original, UsingDirectiveSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(UsingDirectiveSyntax, UsingDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(UsingDirectiveSyntax, UsingDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(UsingDirectiveSyntax original, UsingDirectiveSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(UsingDirectiveSyntax, UsingDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(UsingDirectiveSyntax original, UsingDirectiveSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.UsingKeyword, modified.UsingKeyword, context)) &&
                ((original.StaticKeyword == null && modified.StaticKeyword == null) || (original.StaticKeyword != null && modified.StaticKeyword != null && this.LanguageServiceProvider.EqualityMatch(original.StaticKeyword, modified.StaticKeyword, context))) &&
                ((original.Alias == null && modified.Alias == null) || (original.Alias != null && modified.Alias != null && this.LanguageServiceProvider.EqualityMatch(original.Alias, modified.Alias, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(UsingDirectiveSyntax, UsingDirectiveSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, UsingDirectiveSyntax, UsingDirectiveSyntax>.EqualityMatch(UsingDirectiveSyntax original, UsingDirectiveSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AttributeList"/>.
    /// </summary>
    partial class AttributeListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AttributeListSyntax, AttributeListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AttributeListSyntax, AttributeListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AttributeListSyntax, AttributeListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AttributeListSyntax, AttributeListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AttributeListSyntax, AttributeListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AttributeListSyntax original, AttributeListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AttributeListSyntax, AttributeListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AttributeListSyntax, AttributeListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AttributeListSyntax original, AttributeListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AttributeListSyntax, AttributeListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AttributeListSyntax original, AttributeListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenBracketToken, modified.OpenBracketToken, context)) &&
                ((original.Target == null && modified.Target == null) || (original.Target != null && modified.Target != null && this.LanguageServiceProvider.EqualityMatch(original.Target, modified.Target, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Attributes, modified.Attributes, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBracketToken, modified.CloseBracketToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AttributeListSyntax, AttributeListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AttributeListSyntax, AttributeListSyntax>.EqualityMatch(AttributeListSyntax original, AttributeListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AttributeTargetSpecifier"/>.
    /// </summary>
    partial class AttributeTargetSpecifierServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AttributeTargetSpecifierSyntax, AttributeTargetSpecifierSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AttributeTargetSpecifierSyntax, AttributeTargetSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AttributeTargetSpecifierSyntax, AttributeTargetSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AttributeTargetSpecifierSyntax, AttributeTargetSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AttributeTargetSpecifierSyntax, AttributeTargetSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AttributeTargetSpecifierSyntax original, AttributeTargetSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AttributeTargetSpecifierSyntax, AttributeTargetSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AttributeTargetSpecifierSyntax, AttributeTargetSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AttributeTargetSpecifierSyntax original, AttributeTargetSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AttributeTargetSpecifierSyntax, AttributeTargetSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AttributeTargetSpecifierSyntax original, AttributeTargetSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AttributeTargetSpecifierSyntax, AttributeTargetSpecifierSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AttributeTargetSpecifierSyntax, AttributeTargetSpecifierSyntax>.EqualityMatch(AttributeTargetSpecifierSyntax original, AttributeTargetSpecifierSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="Attribute"/>.
    /// </summary>
    partial class AttributeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AttributeSyntax, AttributeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AttributeSyntax, AttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AttributeSyntax, AttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AttributeSyntax, AttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AttributeSyntax, AttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AttributeSyntax original, AttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AttributeSyntax, AttributeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AttributeSyntax, AttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AttributeSyntax original, AttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AttributeSyntax, AttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AttributeSyntax original, AttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                ((original.ArgumentList == null && modified.ArgumentList == null) || (original.ArgumentList != null && modified.ArgumentList != null && this.LanguageServiceProvider.EqualityMatch(original.ArgumentList, modified.ArgumentList, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AttributeSyntax, AttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AttributeSyntax, AttributeSyntax>.EqualityMatch(AttributeSyntax original, AttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AttributeArgumentList"/>.
    /// </summary>
    partial class AttributeArgumentListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AttributeArgumentListSyntax, AttributeArgumentListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AttributeArgumentListSyntax, AttributeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AttributeArgumentListSyntax, AttributeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AttributeArgumentListSyntax, AttributeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AttributeArgumentListSyntax, AttributeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AttributeArgumentListSyntax original, AttributeArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AttributeArgumentListSyntax, AttributeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AttributeArgumentListSyntax, AttributeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AttributeArgumentListSyntax original, AttributeArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AttributeArgumentListSyntax, AttributeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AttributeArgumentListSyntax original, AttributeArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Arguments, modified.Arguments, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AttributeArgumentListSyntax, AttributeArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AttributeArgumentListSyntax, AttributeArgumentListSyntax>.EqualityMatch(AttributeArgumentListSyntax original, AttributeArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="DelegateDeclaration"/>.
    /// </summary>
    partial class DelegateDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, DelegateDeclarationSyntax, DelegateDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(DelegateDeclarationSyntax, DelegateDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DelegateDeclarationSyntax, DelegateDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(DelegateDeclarationSyntax, DelegateDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(DelegateDeclarationSyntax, DelegateDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(DelegateDeclarationSyntax original, DelegateDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(DelegateDeclarationSyntax, DelegateDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DelegateDeclarationSyntax, DelegateDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(DelegateDeclarationSyntax original, DelegateDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DelegateDeclarationSyntax, DelegateDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(DelegateDeclarationSyntax original, DelegateDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.DelegateKeyword, modified.DelegateKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ReturnType, modified.ReturnType, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.TypeParameterList == null && modified.TypeParameterList == null) || (original.TypeParameterList != null && modified.TypeParameterList != null && this.LanguageServiceProvider.EqualityMatch(original.TypeParameterList, modified.TypeParameterList, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ParameterList, modified.ParameterList, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ConstraintClauses, modified.ConstraintClauses, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DelegateDeclarationSyntax, DelegateDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, DelegateDeclarationSyntax, DelegateDeclarationSyntax>.EqualityMatch(DelegateDeclarationSyntax original, DelegateDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="EnumMemberDeclaration"/>.
    /// </summary>
    partial class EnumMemberDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, EnumMemberDeclarationSyntax, EnumMemberDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(EnumMemberDeclarationSyntax, EnumMemberDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EnumMemberDeclarationSyntax, EnumMemberDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(EnumMemberDeclarationSyntax, EnumMemberDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(EnumMemberDeclarationSyntax, EnumMemberDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(EnumMemberDeclarationSyntax original, EnumMemberDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(EnumMemberDeclarationSyntax, EnumMemberDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EnumMemberDeclarationSyntax, EnumMemberDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(EnumMemberDeclarationSyntax original, EnumMemberDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EnumMemberDeclarationSyntax, EnumMemberDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(EnumMemberDeclarationSyntax original, EnumMemberDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.EqualsValue == null && modified.EqualsValue == null) || (original.EqualsValue != null && modified.EqualsValue != null && this.LanguageServiceProvider.EqualityMatch(original.EqualsValue, modified.EqualsValue, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EnumMemberDeclarationSyntax, EnumMemberDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, EnumMemberDeclarationSyntax, EnumMemberDeclarationSyntax>.EqualityMatch(EnumMemberDeclarationSyntax original, EnumMemberDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="IncompleteMember"/>.
    /// </summary>
    partial class IncompleteMemberServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, IncompleteMemberSyntax, IncompleteMemberSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(IncompleteMemberSyntax, IncompleteMemberSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IncompleteMemberSyntax, IncompleteMemberSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(IncompleteMemberSyntax, IncompleteMemberSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(IncompleteMemberSyntax, IncompleteMemberSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(IncompleteMemberSyntax original, IncompleteMemberSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(IncompleteMemberSyntax, IncompleteMemberSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IncompleteMemberSyntax, IncompleteMemberSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(IncompleteMemberSyntax original, IncompleteMemberSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IncompleteMemberSyntax, IncompleteMemberSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(IncompleteMemberSyntax original, IncompleteMemberSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                ((original.Type == null && modified.Type == null) || (original.Type != null && modified.Type != null && this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IncompleteMemberSyntax, IncompleteMemberSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, IncompleteMemberSyntax, IncompleteMemberSyntax>.EqualityMatch(IncompleteMemberSyntax original, IncompleteMemberSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="GlobalStatement"/>.
    /// </summary>
    partial class GlobalStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, GlobalStatementSyntax, GlobalStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(GlobalStatementSyntax, GlobalStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(GlobalStatementSyntax, GlobalStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(GlobalStatementSyntax, GlobalStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(GlobalStatementSyntax, GlobalStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(GlobalStatementSyntax original, GlobalStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(GlobalStatementSyntax, GlobalStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(GlobalStatementSyntax, GlobalStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(GlobalStatementSyntax original, GlobalStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(GlobalStatementSyntax, GlobalStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(GlobalStatementSyntax original, GlobalStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(GlobalStatementSyntax, GlobalStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, GlobalStatementSyntax, GlobalStatementSyntax>.EqualityMatch(GlobalStatementSyntax original, GlobalStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="NamespaceDeclaration"/>.
    /// </summary>
    partial class NamespaceDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, NamespaceDeclarationSyntax, NamespaceDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(NamespaceDeclarationSyntax, NamespaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(NamespaceDeclarationSyntax, NamespaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(NamespaceDeclarationSyntax, NamespaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(NamespaceDeclarationSyntax, NamespaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(NamespaceDeclarationSyntax original, NamespaceDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(NamespaceDeclarationSyntax, NamespaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(NamespaceDeclarationSyntax, NamespaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(NamespaceDeclarationSyntax original, NamespaceDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(NamespaceDeclarationSyntax, NamespaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(NamespaceDeclarationSyntax original, NamespaceDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.NamespaceKeyword, modified.NamespaceKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Externs, modified.Externs, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Usings, modified.Usings, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Members, modified.Members, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(NamespaceDeclarationSyntax, NamespaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, NamespaceDeclarationSyntax, NamespaceDeclarationSyntax>.EqualityMatch(NamespaceDeclarationSyntax original, NamespaceDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="EnumDeclaration"/>.
    /// </summary>
    partial class EnumDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, EnumDeclarationSyntax, EnumDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(EnumDeclarationSyntax, EnumDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EnumDeclarationSyntax, EnumDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(EnumDeclarationSyntax, EnumDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(EnumDeclarationSyntax, EnumDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(EnumDeclarationSyntax original, EnumDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(EnumDeclarationSyntax, EnumDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EnumDeclarationSyntax, EnumDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(EnumDeclarationSyntax original, EnumDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EnumDeclarationSyntax, EnumDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(EnumDeclarationSyntax original, EnumDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EnumKeyword, modified.EnumKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.BaseList == null && modified.BaseList == null) || (original.BaseList != null && modified.BaseList != null && this.LanguageServiceProvider.EqualityMatch(original.BaseList, modified.BaseList, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Members, modified.Members, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EnumDeclarationSyntax, EnumDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, EnumDeclarationSyntax, EnumDeclarationSyntax>.EqualityMatch(EnumDeclarationSyntax original, EnumDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ClassDeclaration"/>.
    /// </summary>
    partial class ClassDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ClassDeclarationSyntax, ClassDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ClassDeclarationSyntax, ClassDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ClassDeclarationSyntax, ClassDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ClassDeclarationSyntax, ClassDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ClassDeclarationSyntax, ClassDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ClassDeclarationSyntax original, ClassDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ClassDeclarationSyntax, ClassDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ClassDeclarationSyntax, ClassDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ClassDeclarationSyntax original, ClassDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ClassDeclarationSyntax, ClassDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ClassDeclarationSyntax original, ClassDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.TypeParameterList == null && modified.TypeParameterList == null) || (original.TypeParameterList != null && modified.TypeParameterList != null && this.LanguageServiceProvider.EqualityMatch(original.TypeParameterList, modified.TypeParameterList, context))) &&
                ((original.BaseList == null && modified.BaseList == null) || (original.BaseList != null && modified.BaseList != null && this.LanguageServiceProvider.EqualityMatch(original.BaseList, modified.BaseList, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ConstraintClauses, modified.ConstraintClauses, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Members, modified.Members, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ClassDeclarationSyntax, ClassDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ClassDeclarationSyntax, ClassDeclarationSyntax>.EqualityMatch(ClassDeclarationSyntax original, ClassDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="StructDeclaration"/>.
    /// </summary>
    partial class StructDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, StructDeclarationSyntax, StructDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(StructDeclarationSyntax, StructDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(StructDeclarationSyntax, StructDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(StructDeclarationSyntax, StructDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(StructDeclarationSyntax, StructDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(StructDeclarationSyntax original, StructDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(StructDeclarationSyntax, StructDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(StructDeclarationSyntax, StructDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(StructDeclarationSyntax original, StructDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(StructDeclarationSyntax, StructDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(StructDeclarationSyntax original, StructDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.TypeParameterList == null && modified.TypeParameterList == null) || (original.TypeParameterList != null && modified.TypeParameterList != null && this.LanguageServiceProvider.EqualityMatch(original.TypeParameterList, modified.TypeParameterList, context))) &&
                ((original.BaseList == null && modified.BaseList == null) || (original.BaseList != null && modified.BaseList != null && this.LanguageServiceProvider.EqualityMatch(original.BaseList, modified.BaseList, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ConstraintClauses, modified.ConstraintClauses, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Members, modified.Members, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(StructDeclarationSyntax, StructDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, StructDeclarationSyntax, StructDeclarationSyntax>.EqualityMatch(StructDeclarationSyntax original, StructDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="InterfaceDeclaration"/>.
    /// </summary>
    partial class InterfaceDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, InterfaceDeclarationSyntax, InterfaceDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(InterfaceDeclarationSyntax, InterfaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterfaceDeclarationSyntax, InterfaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(InterfaceDeclarationSyntax, InterfaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(InterfaceDeclarationSyntax, InterfaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(InterfaceDeclarationSyntax original, InterfaceDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(InterfaceDeclarationSyntax, InterfaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterfaceDeclarationSyntax, InterfaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(InterfaceDeclarationSyntax original, InterfaceDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterfaceDeclarationSyntax, InterfaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(InterfaceDeclarationSyntax original, InterfaceDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.TypeParameterList == null && modified.TypeParameterList == null) || (original.TypeParameterList != null && modified.TypeParameterList != null && this.LanguageServiceProvider.EqualityMatch(original.TypeParameterList, modified.TypeParameterList, context))) &&
                ((original.BaseList == null && modified.BaseList == null) || (original.BaseList != null && modified.BaseList != null && this.LanguageServiceProvider.EqualityMatch(original.BaseList, modified.BaseList, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ConstraintClauses, modified.ConstraintClauses, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Members, modified.Members, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterfaceDeclarationSyntax, InterfaceDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, InterfaceDeclarationSyntax, InterfaceDeclarationSyntax>.EqualityMatch(InterfaceDeclarationSyntax original, InterfaceDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="FieldDeclaration"/>.
    /// </summary>
    partial class FieldDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, FieldDeclarationSyntax, FieldDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(FieldDeclarationSyntax, FieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(FieldDeclarationSyntax, FieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(FieldDeclarationSyntax, FieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(FieldDeclarationSyntax, FieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(FieldDeclarationSyntax original, FieldDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(FieldDeclarationSyntax, FieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(FieldDeclarationSyntax, FieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(FieldDeclarationSyntax original, FieldDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(FieldDeclarationSyntax, FieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(FieldDeclarationSyntax original, FieldDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Declaration, modified.Declaration, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(FieldDeclarationSyntax, FieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, FieldDeclarationSyntax, FieldDeclarationSyntax>.EqualityMatch(FieldDeclarationSyntax original, FieldDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="EventFieldDeclaration"/>.
    /// </summary>
    partial class EventFieldDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, EventFieldDeclarationSyntax, EventFieldDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(EventFieldDeclarationSyntax, EventFieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EventFieldDeclarationSyntax, EventFieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(EventFieldDeclarationSyntax, EventFieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(EventFieldDeclarationSyntax, EventFieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(EventFieldDeclarationSyntax original, EventFieldDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(EventFieldDeclarationSyntax, EventFieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EventFieldDeclarationSyntax, EventFieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(EventFieldDeclarationSyntax original, EventFieldDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EventFieldDeclarationSyntax, EventFieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(EventFieldDeclarationSyntax original, EventFieldDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EventKeyword, modified.EventKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Declaration, modified.Declaration, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EventFieldDeclarationSyntax, EventFieldDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, EventFieldDeclarationSyntax, EventFieldDeclarationSyntax>.EqualityMatch(EventFieldDeclarationSyntax original, EventFieldDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="MethodDeclaration"/>.
    /// </summary>
    partial class MethodDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, MethodDeclarationSyntax, MethodDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(MethodDeclarationSyntax, MethodDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(MethodDeclarationSyntax, MethodDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(MethodDeclarationSyntax, MethodDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(MethodDeclarationSyntax, MethodDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(MethodDeclarationSyntax original, MethodDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(MethodDeclarationSyntax, MethodDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(MethodDeclarationSyntax, MethodDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(MethodDeclarationSyntax original, MethodDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(MethodDeclarationSyntax, MethodDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(MethodDeclarationSyntax original, MethodDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ReturnType, modified.ReturnType, context)) &&
                ((original.ExplicitInterfaceSpecifier == null && modified.ExplicitInterfaceSpecifier == null) || (original.ExplicitInterfaceSpecifier != null && modified.ExplicitInterfaceSpecifier != null && this.LanguageServiceProvider.EqualityMatch(original.ExplicitInterfaceSpecifier, modified.ExplicitInterfaceSpecifier, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.TypeParameterList == null && modified.TypeParameterList == null) || (original.TypeParameterList != null && modified.TypeParameterList != null && this.LanguageServiceProvider.EqualityMatch(original.TypeParameterList, modified.TypeParameterList, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ParameterList, modified.ParameterList, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ConstraintClauses, modified.ConstraintClauses, context)) &&
                ((original.Body == null && modified.Body == null) || (original.Body != null && modified.Body != null && this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context))) &&
                ((original.ExpressionBody == null && modified.ExpressionBody == null) || (original.ExpressionBody != null && modified.ExpressionBody != null && this.LanguageServiceProvider.EqualityMatch(original.ExpressionBody, modified.ExpressionBody, context))) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(MethodDeclarationSyntax, MethodDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, MethodDeclarationSyntax, MethodDeclarationSyntax>.EqualityMatch(MethodDeclarationSyntax original, MethodDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="OperatorDeclaration"/>.
    /// </summary>
    partial class OperatorDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, OperatorDeclarationSyntax, OperatorDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(OperatorDeclarationSyntax, OperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OperatorDeclarationSyntax, OperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(OperatorDeclarationSyntax, OperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(OperatorDeclarationSyntax, OperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(OperatorDeclarationSyntax original, OperatorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(OperatorDeclarationSyntax, OperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OperatorDeclarationSyntax, OperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(OperatorDeclarationSyntax original, OperatorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OperatorDeclarationSyntax, OperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(OperatorDeclarationSyntax original, OperatorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ReturnType, modified.ReturnType, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OperatorKeyword, modified.OperatorKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OperatorToken, modified.OperatorToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ParameterList, modified.ParameterList, context)) &&
                ((original.Body == null && modified.Body == null) || (original.Body != null && modified.Body != null && this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context))) &&
                ((original.ExpressionBody == null && modified.ExpressionBody == null) || (original.ExpressionBody != null && modified.ExpressionBody != null && this.LanguageServiceProvider.EqualityMatch(original.ExpressionBody, modified.ExpressionBody, context))) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OperatorDeclarationSyntax, OperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, OperatorDeclarationSyntax, OperatorDeclarationSyntax>.EqualityMatch(OperatorDeclarationSyntax original, OperatorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ConversionOperatorDeclaration"/>.
    /// </summary>
    partial class ConversionOperatorDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ConversionOperatorDeclarationSyntax, ConversionOperatorDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ConversionOperatorDeclarationSyntax, ConversionOperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConversionOperatorDeclarationSyntax, ConversionOperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ConversionOperatorDeclarationSyntax, ConversionOperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ConversionOperatorDeclarationSyntax, ConversionOperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ConversionOperatorDeclarationSyntax original, ConversionOperatorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ConversionOperatorDeclarationSyntax, ConversionOperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConversionOperatorDeclarationSyntax, ConversionOperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ConversionOperatorDeclarationSyntax original, ConversionOperatorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConversionOperatorDeclarationSyntax, ConversionOperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ConversionOperatorDeclarationSyntax original, ConversionOperatorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ImplicitOrExplicitKeyword, modified.ImplicitOrExplicitKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OperatorKeyword, modified.OperatorKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ParameterList, modified.ParameterList, context)) &&
                ((original.Body == null && modified.Body == null) || (original.Body != null && modified.Body != null && this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context))) &&
                ((original.ExpressionBody == null && modified.ExpressionBody == null) || (original.ExpressionBody != null && modified.ExpressionBody != null && this.LanguageServiceProvider.EqualityMatch(original.ExpressionBody, modified.ExpressionBody, context))) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConversionOperatorDeclarationSyntax, ConversionOperatorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ConversionOperatorDeclarationSyntax, ConversionOperatorDeclarationSyntax>.EqualityMatch(ConversionOperatorDeclarationSyntax original, ConversionOperatorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ConstructorDeclaration"/>.
    /// </summary>
    partial class ConstructorDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ConstructorDeclarationSyntax, ConstructorDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ConstructorDeclarationSyntax, ConstructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConstructorDeclarationSyntax, ConstructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ConstructorDeclarationSyntax, ConstructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ConstructorDeclarationSyntax, ConstructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ConstructorDeclarationSyntax original, ConstructorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ConstructorDeclarationSyntax, ConstructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConstructorDeclarationSyntax, ConstructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ConstructorDeclarationSyntax original, ConstructorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConstructorDeclarationSyntax, ConstructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ConstructorDeclarationSyntax original, ConstructorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ParameterList, modified.ParameterList, context)) &&
                ((original.Initializer == null && modified.Initializer == null) || (original.Initializer != null && modified.Initializer != null && this.LanguageServiceProvider.EqualityMatch(original.Initializer, modified.Initializer, context))) &&
                ((original.Body == null && modified.Body == null) || (original.Body != null && modified.Body != null && this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context))) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConstructorDeclarationSyntax, ConstructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ConstructorDeclarationSyntax, ConstructorDeclarationSyntax>.EqualityMatch(ConstructorDeclarationSyntax original, ConstructorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="DestructorDeclaration"/>.
    /// </summary>
    partial class DestructorDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, DestructorDeclarationSyntax, DestructorDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(DestructorDeclarationSyntax, DestructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DestructorDeclarationSyntax, DestructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(DestructorDeclarationSyntax, DestructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(DestructorDeclarationSyntax, DestructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(DestructorDeclarationSyntax original, DestructorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(DestructorDeclarationSyntax, DestructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DestructorDeclarationSyntax, DestructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(DestructorDeclarationSyntax original, DestructorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DestructorDeclarationSyntax, DestructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(DestructorDeclarationSyntax original, DestructorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.TildeToken, modified.TildeToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ParameterList, modified.ParameterList, context)) &&
                ((original.Body == null && modified.Body == null) || (original.Body != null && modified.Body != null && this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context))) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DestructorDeclarationSyntax, DestructorDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, DestructorDeclarationSyntax, DestructorDeclarationSyntax>.EqualityMatch(DestructorDeclarationSyntax original, DestructorDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="PropertyDeclaration"/>.
    /// </summary>
    partial class PropertyDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, PropertyDeclarationSyntax, PropertyDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(PropertyDeclarationSyntax, PropertyDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PropertyDeclarationSyntax, PropertyDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(PropertyDeclarationSyntax, PropertyDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(PropertyDeclarationSyntax, PropertyDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(PropertyDeclarationSyntax original, PropertyDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(PropertyDeclarationSyntax, PropertyDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PropertyDeclarationSyntax, PropertyDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(PropertyDeclarationSyntax original, PropertyDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PropertyDeclarationSyntax, PropertyDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(PropertyDeclarationSyntax original, PropertyDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                ((original.ExplicitInterfaceSpecifier == null && modified.ExplicitInterfaceSpecifier == null) || (original.ExplicitInterfaceSpecifier != null && modified.ExplicitInterfaceSpecifier != null && this.LanguageServiceProvider.EqualityMatch(original.ExplicitInterfaceSpecifier, modified.ExplicitInterfaceSpecifier, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.AccessorList == null && modified.AccessorList == null) || (original.AccessorList != null && modified.AccessorList != null && this.LanguageServiceProvider.EqualityMatch(original.AccessorList, modified.AccessorList, context))) &&
                ((original.ExpressionBody == null && modified.ExpressionBody == null) || (original.ExpressionBody != null && modified.ExpressionBody != null && this.LanguageServiceProvider.EqualityMatch(original.ExpressionBody, modified.ExpressionBody, context))) &&
                ((original.Initializer == null && modified.Initializer == null) || (original.Initializer != null && modified.Initializer != null && this.LanguageServiceProvider.EqualityMatch(original.Initializer, modified.Initializer, context))) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PropertyDeclarationSyntax, PropertyDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, PropertyDeclarationSyntax, PropertyDeclarationSyntax>.EqualityMatch(PropertyDeclarationSyntax original, PropertyDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="EventDeclaration"/>.
    /// </summary>
    partial class EventDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, EventDeclarationSyntax, EventDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(EventDeclarationSyntax, EventDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EventDeclarationSyntax, EventDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(EventDeclarationSyntax, EventDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(EventDeclarationSyntax, EventDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(EventDeclarationSyntax original, EventDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(EventDeclarationSyntax, EventDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EventDeclarationSyntax, EventDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(EventDeclarationSyntax original, EventDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EventDeclarationSyntax, EventDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(EventDeclarationSyntax original, EventDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EventKeyword, modified.EventKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                ((original.ExplicitInterfaceSpecifier == null && modified.ExplicitInterfaceSpecifier == null) || (original.ExplicitInterfaceSpecifier != null && modified.ExplicitInterfaceSpecifier != null && this.LanguageServiceProvider.EqualityMatch(original.ExplicitInterfaceSpecifier, modified.ExplicitInterfaceSpecifier, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.AccessorList, modified.AccessorList, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EventDeclarationSyntax, EventDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, EventDeclarationSyntax, EventDeclarationSyntax>.EqualityMatch(EventDeclarationSyntax original, EventDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="IndexerDeclaration"/>.
    /// </summary>
    partial class IndexerDeclarationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, IndexerDeclarationSyntax, IndexerDeclarationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(IndexerDeclarationSyntax, IndexerDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IndexerDeclarationSyntax, IndexerDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(IndexerDeclarationSyntax, IndexerDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(IndexerDeclarationSyntax, IndexerDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(IndexerDeclarationSyntax original, IndexerDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(IndexerDeclarationSyntax, IndexerDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IndexerDeclarationSyntax, IndexerDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(IndexerDeclarationSyntax original, IndexerDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IndexerDeclarationSyntax, IndexerDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(IndexerDeclarationSyntax original, IndexerDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AttributeLists, modified.AttributeLists, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                ((original.ExplicitInterfaceSpecifier == null && modified.ExplicitInterfaceSpecifier == null) || (original.ExplicitInterfaceSpecifier != null && modified.ExplicitInterfaceSpecifier != null && this.LanguageServiceProvider.EqualityMatch(original.ExplicitInterfaceSpecifier, modified.ExplicitInterfaceSpecifier, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ThisKeyword, modified.ThisKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ParameterList, modified.ParameterList, context)) &&
                ((original.AccessorList == null && modified.AccessorList == null) || (original.AccessorList != null && modified.AccessorList != null && this.LanguageServiceProvider.EqualityMatch(original.AccessorList, modified.AccessorList, context))) &&
                ((original.ExpressionBody == null && modified.ExpressionBody == null) || (original.ExpressionBody != null && modified.ExpressionBody != null && this.LanguageServiceProvider.EqualityMatch(original.ExpressionBody, modified.ExpressionBody, context))) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IndexerDeclarationSyntax, IndexerDeclarationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, IndexerDeclarationSyntax, IndexerDeclarationSyntax>.EqualityMatch(IndexerDeclarationSyntax original, IndexerDeclarationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="SimpleBaseType"/>.
    /// </summary>
    partial class SimpleBaseTypeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, SimpleBaseTypeSyntax, SimpleBaseTypeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(SimpleBaseTypeSyntax, SimpleBaseTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SimpleBaseTypeSyntax, SimpleBaseTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(SimpleBaseTypeSyntax, SimpleBaseTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(SimpleBaseTypeSyntax, SimpleBaseTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(SimpleBaseTypeSyntax original, SimpleBaseTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(SimpleBaseTypeSyntax, SimpleBaseTypeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SimpleBaseTypeSyntax, SimpleBaseTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(SimpleBaseTypeSyntax original, SimpleBaseTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SimpleBaseTypeSyntax, SimpleBaseTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(SimpleBaseTypeSyntax original, SimpleBaseTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SimpleBaseTypeSyntax, SimpleBaseTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, SimpleBaseTypeSyntax, SimpleBaseTypeSyntax>.EqualityMatch(SimpleBaseTypeSyntax original, SimpleBaseTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ConstructorConstraint"/>.
    /// </summary>
    partial class ConstructorConstraintServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ConstructorConstraintSyntax, ConstructorConstraintSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ConstructorConstraintSyntax, ConstructorConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConstructorConstraintSyntax, ConstructorConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ConstructorConstraintSyntax, ConstructorConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ConstructorConstraintSyntax, ConstructorConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ConstructorConstraintSyntax original, ConstructorConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ConstructorConstraintSyntax, ConstructorConstraintSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConstructorConstraintSyntax, ConstructorConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ConstructorConstraintSyntax original, ConstructorConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConstructorConstraintSyntax, ConstructorConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ConstructorConstraintSyntax original, ConstructorConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.NewKeyword, modified.NewKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConstructorConstraintSyntax, ConstructorConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ConstructorConstraintSyntax, ConstructorConstraintSyntax>.EqualityMatch(ConstructorConstraintSyntax original, ConstructorConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ClassOrStructConstraint"/>.
    /// </summary>
    partial class ClassOrStructConstraintServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ClassOrStructConstraintSyntax, ClassOrStructConstraintSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ClassOrStructConstraintSyntax, ClassOrStructConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ClassOrStructConstraintSyntax, ClassOrStructConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ClassOrStructConstraintSyntax, ClassOrStructConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ClassOrStructConstraintSyntax, ClassOrStructConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ClassOrStructConstraintSyntax original, ClassOrStructConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ClassOrStructConstraintSyntax, ClassOrStructConstraintSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ClassOrStructConstraintSyntax, ClassOrStructConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ClassOrStructConstraintSyntax original, ClassOrStructConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ClassOrStructConstraintSyntax, ClassOrStructConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ClassOrStructConstraintSyntax original, ClassOrStructConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.ClassOrStructKeyword, modified.ClassOrStructKeyword, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ClassOrStructConstraintSyntax, ClassOrStructConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ClassOrStructConstraintSyntax, ClassOrStructConstraintSyntax>.EqualityMatch(ClassOrStructConstraintSyntax original, ClassOrStructConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TypeConstraint"/>.
    /// </summary>
    partial class TypeConstraintServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TypeConstraintSyntax, TypeConstraintSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TypeConstraintSyntax, TypeConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeConstraintSyntax, TypeConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TypeConstraintSyntax, TypeConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TypeConstraintSyntax, TypeConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TypeConstraintSyntax original, TypeConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TypeConstraintSyntax, TypeConstraintSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeConstraintSyntax, TypeConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TypeConstraintSyntax original, TypeConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeConstraintSyntax, TypeConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TypeConstraintSyntax original, TypeConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeConstraintSyntax, TypeConstraintSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TypeConstraintSyntax, TypeConstraintSyntax>.EqualityMatch(TypeConstraintSyntax original, TypeConstraintSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ParameterList"/>.
    /// </summary>
    partial class ParameterListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ParameterListSyntax, ParameterListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ParameterListSyntax, ParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ParameterListSyntax, ParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ParameterListSyntax, ParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ParameterListSyntax, ParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ParameterListSyntax original, ParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ParameterListSyntax, ParameterListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ParameterListSyntax, ParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ParameterListSyntax original, ParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ParameterListSyntax, ParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ParameterListSyntax original, ParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Parameters, modified.Parameters, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ParameterListSyntax, ParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ParameterListSyntax, ParameterListSyntax>.EqualityMatch(ParameterListSyntax original, ParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="BracketedParameterList"/>.
    /// </summary>
    partial class BracketedParameterListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, BracketedParameterListSyntax, BracketedParameterListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(BracketedParameterListSyntax, BracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BracketedParameterListSyntax, BracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(BracketedParameterListSyntax, BracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(BracketedParameterListSyntax, BracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(BracketedParameterListSyntax original, BracketedParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(BracketedParameterListSyntax, BracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BracketedParameterListSyntax, BracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(BracketedParameterListSyntax original, BracketedParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BracketedParameterListSyntax, BracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(BracketedParameterListSyntax original, BracketedParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenBracketToken, modified.OpenBracketToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Parameters, modified.Parameters, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBracketToken, modified.CloseBracketToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BracketedParameterListSyntax, BracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, BracketedParameterListSyntax, BracketedParameterListSyntax>.EqualityMatch(BracketedParameterListSyntax original, BracketedParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="SkippedTokensTrivia"/>.
    /// </summary>
    partial class SkippedTokensTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, SkippedTokensTriviaSyntax, SkippedTokensTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(SkippedTokensTriviaSyntax, SkippedTokensTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SkippedTokensTriviaSyntax, SkippedTokensTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(SkippedTokensTriviaSyntax, SkippedTokensTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(SkippedTokensTriviaSyntax, SkippedTokensTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(SkippedTokensTriviaSyntax original, SkippedTokensTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(SkippedTokensTriviaSyntax, SkippedTokensTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SkippedTokensTriviaSyntax, SkippedTokensTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(SkippedTokensTriviaSyntax original, SkippedTokensTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SkippedTokensTriviaSyntax, SkippedTokensTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(SkippedTokensTriviaSyntax original, SkippedTokensTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Tokens, modified.Tokens, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SkippedTokensTriviaSyntax, SkippedTokensTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, SkippedTokensTriviaSyntax, SkippedTokensTriviaSyntax>.EqualityMatch(SkippedTokensTriviaSyntax original, SkippedTokensTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="DocumentationCommentTrivia"/>.
    /// </summary>
    partial class DocumentationCommentTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, DocumentationCommentTriviaSyntax, DocumentationCommentTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(DocumentationCommentTriviaSyntax, DocumentationCommentTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DocumentationCommentTriviaSyntax, DocumentationCommentTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(DocumentationCommentTriviaSyntax, DocumentationCommentTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(DocumentationCommentTriviaSyntax, DocumentationCommentTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(DocumentationCommentTriviaSyntax original, DocumentationCommentTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(DocumentationCommentTriviaSyntax, DocumentationCommentTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DocumentationCommentTriviaSyntax, DocumentationCommentTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(DocumentationCommentTriviaSyntax original, DocumentationCommentTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DocumentationCommentTriviaSyntax, DocumentationCommentTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(DocumentationCommentTriviaSyntax original, DocumentationCommentTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Content, modified.Content, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfComment, modified.EndOfComment, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DocumentationCommentTriviaSyntax, DocumentationCommentTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, DocumentationCommentTriviaSyntax, DocumentationCommentTriviaSyntax>.EqualityMatch(DocumentationCommentTriviaSyntax original, DocumentationCommentTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="EndIfDirectiveTrivia"/>.
    /// </summary>
    partial class EndIfDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, EndIfDirectiveTriviaSyntax, EndIfDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(EndIfDirectiveTriviaSyntax, EndIfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EndIfDirectiveTriviaSyntax, EndIfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(EndIfDirectiveTriviaSyntax, EndIfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(EndIfDirectiveTriviaSyntax, EndIfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(EndIfDirectiveTriviaSyntax original, EndIfDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(EndIfDirectiveTriviaSyntax, EndIfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EndIfDirectiveTriviaSyntax, EndIfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(EndIfDirectiveTriviaSyntax original, EndIfDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EndIfDirectiveTriviaSyntax, EndIfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(EndIfDirectiveTriviaSyntax original, EndIfDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndIfKeyword, modified.EndIfKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EndIfDirectiveTriviaSyntax, EndIfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, EndIfDirectiveTriviaSyntax, EndIfDirectiveTriviaSyntax>.EqualityMatch(EndIfDirectiveTriviaSyntax original, EndIfDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="RegionDirectiveTrivia"/>.
    /// </summary>
    partial class RegionDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, RegionDirectiveTriviaSyntax, RegionDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(RegionDirectiveTriviaSyntax, RegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(RegionDirectiveTriviaSyntax, RegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(RegionDirectiveTriviaSyntax, RegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(RegionDirectiveTriviaSyntax, RegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(RegionDirectiveTriviaSyntax original, RegionDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(RegionDirectiveTriviaSyntax, RegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(RegionDirectiveTriviaSyntax, RegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(RegionDirectiveTriviaSyntax original, RegionDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(RegionDirectiveTriviaSyntax, RegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(RegionDirectiveTriviaSyntax original, RegionDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.RegionKeyword, modified.RegionKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(RegionDirectiveTriviaSyntax, RegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, RegionDirectiveTriviaSyntax, RegionDirectiveTriviaSyntax>.EqualityMatch(RegionDirectiveTriviaSyntax original, RegionDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="EndRegionDirectiveTrivia"/>.
    /// </summary>
    partial class EndRegionDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, EndRegionDirectiveTriviaSyntax, EndRegionDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(EndRegionDirectiveTriviaSyntax, EndRegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EndRegionDirectiveTriviaSyntax, EndRegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(EndRegionDirectiveTriviaSyntax, EndRegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(EndRegionDirectiveTriviaSyntax, EndRegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(EndRegionDirectiveTriviaSyntax original, EndRegionDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(EndRegionDirectiveTriviaSyntax, EndRegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EndRegionDirectiveTriviaSyntax, EndRegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(EndRegionDirectiveTriviaSyntax original, EndRegionDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EndRegionDirectiveTriviaSyntax, EndRegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(EndRegionDirectiveTriviaSyntax original, EndRegionDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndRegionKeyword, modified.EndRegionKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EndRegionDirectiveTriviaSyntax, EndRegionDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, EndRegionDirectiveTriviaSyntax, EndRegionDirectiveTriviaSyntax>.EqualityMatch(EndRegionDirectiveTriviaSyntax original, EndRegionDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ErrorDirectiveTrivia"/>.
    /// </summary>
    partial class ErrorDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ErrorDirectiveTriviaSyntax, ErrorDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ErrorDirectiveTriviaSyntax, ErrorDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ErrorDirectiveTriviaSyntax, ErrorDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ErrorDirectiveTriviaSyntax, ErrorDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ErrorDirectiveTriviaSyntax, ErrorDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ErrorDirectiveTriviaSyntax original, ErrorDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ErrorDirectiveTriviaSyntax, ErrorDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ErrorDirectiveTriviaSyntax, ErrorDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ErrorDirectiveTriviaSyntax original, ErrorDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ErrorDirectiveTriviaSyntax, ErrorDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ErrorDirectiveTriviaSyntax original, ErrorDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ErrorKeyword, modified.ErrorKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ErrorDirectiveTriviaSyntax, ErrorDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ErrorDirectiveTriviaSyntax, ErrorDirectiveTriviaSyntax>.EqualityMatch(ErrorDirectiveTriviaSyntax original, ErrorDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="WarningDirectiveTrivia"/>.
    /// </summary>
    partial class WarningDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, WarningDirectiveTriviaSyntax, WarningDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(WarningDirectiveTriviaSyntax, WarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(WarningDirectiveTriviaSyntax, WarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(WarningDirectiveTriviaSyntax, WarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(WarningDirectiveTriviaSyntax, WarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(WarningDirectiveTriviaSyntax original, WarningDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(WarningDirectiveTriviaSyntax, WarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(WarningDirectiveTriviaSyntax, WarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(WarningDirectiveTriviaSyntax original, WarningDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(WarningDirectiveTriviaSyntax, WarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(WarningDirectiveTriviaSyntax original, WarningDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.WarningKeyword, modified.WarningKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(WarningDirectiveTriviaSyntax, WarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, WarningDirectiveTriviaSyntax, WarningDirectiveTriviaSyntax>.EqualityMatch(WarningDirectiveTriviaSyntax original, WarningDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="BadDirectiveTrivia"/>.
    /// </summary>
    partial class BadDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, BadDirectiveTriviaSyntax, BadDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(BadDirectiveTriviaSyntax, BadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BadDirectiveTriviaSyntax, BadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(BadDirectiveTriviaSyntax, BadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(BadDirectiveTriviaSyntax, BadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(BadDirectiveTriviaSyntax original, BadDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(BadDirectiveTriviaSyntax, BadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BadDirectiveTriviaSyntax, BadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(BadDirectiveTriviaSyntax original, BadDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BadDirectiveTriviaSyntax, BadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(BadDirectiveTriviaSyntax original, BadDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BadDirectiveTriviaSyntax, BadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, BadDirectiveTriviaSyntax, BadDirectiveTriviaSyntax>.EqualityMatch(BadDirectiveTriviaSyntax original, BadDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="DefineDirectiveTrivia"/>.
    /// </summary>
    partial class DefineDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, DefineDirectiveTriviaSyntax, DefineDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(DefineDirectiveTriviaSyntax, DefineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DefineDirectiveTriviaSyntax, DefineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(DefineDirectiveTriviaSyntax, DefineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(DefineDirectiveTriviaSyntax, DefineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(DefineDirectiveTriviaSyntax original, DefineDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(DefineDirectiveTriviaSyntax, DefineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DefineDirectiveTriviaSyntax, DefineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(DefineDirectiveTriviaSyntax original, DefineDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DefineDirectiveTriviaSyntax, DefineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(DefineDirectiveTriviaSyntax original, DefineDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.DefineKeyword, modified.DefineKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DefineDirectiveTriviaSyntax, DefineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, DefineDirectiveTriviaSyntax, DefineDirectiveTriviaSyntax>.EqualityMatch(DefineDirectiveTriviaSyntax original, DefineDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="UndefDirectiveTrivia"/>.
    /// </summary>
    partial class UndefDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, UndefDirectiveTriviaSyntax, UndefDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(UndefDirectiveTriviaSyntax, UndefDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(UndefDirectiveTriviaSyntax, UndefDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(UndefDirectiveTriviaSyntax, UndefDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(UndefDirectiveTriviaSyntax, UndefDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(UndefDirectiveTriviaSyntax original, UndefDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(UndefDirectiveTriviaSyntax, UndefDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(UndefDirectiveTriviaSyntax, UndefDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(UndefDirectiveTriviaSyntax original, UndefDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(UndefDirectiveTriviaSyntax, UndefDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(UndefDirectiveTriviaSyntax original, UndefDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.UndefKeyword, modified.UndefKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(UndefDirectiveTriviaSyntax, UndefDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, UndefDirectiveTriviaSyntax, UndefDirectiveTriviaSyntax>.EqualityMatch(UndefDirectiveTriviaSyntax original, UndefDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="LineDirectiveTrivia"/>.
    /// </summary>
    partial class LineDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, LineDirectiveTriviaSyntax, LineDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(LineDirectiveTriviaSyntax, LineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LineDirectiveTriviaSyntax, LineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(LineDirectiveTriviaSyntax, LineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(LineDirectiveTriviaSyntax, LineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(LineDirectiveTriviaSyntax original, LineDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(LineDirectiveTriviaSyntax, LineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LineDirectiveTriviaSyntax, LineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(LineDirectiveTriviaSyntax original, LineDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LineDirectiveTriviaSyntax, LineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(LineDirectiveTriviaSyntax original, LineDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.LineKeyword, modified.LineKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Line, modified.Line, context)) &&
                ((original.File == null && modified.File == null) || (original.File != null && modified.File != null && this.LanguageServiceProvider.EqualityMatch(original.File, modified.File, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LineDirectiveTriviaSyntax, LineDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, LineDirectiveTriviaSyntax, LineDirectiveTriviaSyntax>.EqualityMatch(LineDirectiveTriviaSyntax original, LineDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="PragmaWarningDirectiveTrivia"/>.
    /// </summary>
    partial class PragmaWarningDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, PragmaWarningDirectiveTriviaSyntax, PragmaWarningDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(PragmaWarningDirectiveTriviaSyntax, PragmaWarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PragmaWarningDirectiveTriviaSyntax, PragmaWarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(PragmaWarningDirectiveTriviaSyntax, PragmaWarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(PragmaWarningDirectiveTriviaSyntax, PragmaWarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(PragmaWarningDirectiveTriviaSyntax original, PragmaWarningDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(PragmaWarningDirectiveTriviaSyntax, PragmaWarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PragmaWarningDirectiveTriviaSyntax, PragmaWarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(PragmaWarningDirectiveTriviaSyntax original, PragmaWarningDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PragmaWarningDirectiveTriviaSyntax, PragmaWarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(PragmaWarningDirectiveTriviaSyntax original, PragmaWarningDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.PragmaKeyword, modified.PragmaKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.WarningKeyword, modified.WarningKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.DisableOrRestoreKeyword, modified.DisableOrRestoreKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ErrorCodes, modified.ErrorCodes, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PragmaWarningDirectiveTriviaSyntax, PragmaWarningDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, PragmaWarningDirectiveTriviaSyntax, PragmaWarningDirectiveTriviaSyntax>.EqualityMatch(PragmaWarningDirectiveTriviaSyntax original, PragmaWarningDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="PragmaChecksumDirectiveTrivia"/>.
    /// </summary>
    partial class PragmaChecksumDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, PragmaChecksumDirectiveTriviaSyntax, PragmaChecksumDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(PragmaChecksumDirectiveTriviaSyntax, PragmaChecksumDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PragmaChecksumDirectiveTriviaSyntax, PragmaChecksumDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(PragmaChecksumDirectiveTriviaSyntax, PragmaChecksumDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(PragmaChecksumDirectiveTriviaSyntax, PragmaChecksumDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(PragmaChecksumDirectiveTriviaSyntax original, PragmaChecksumDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(PragmaChecksumDirectiveTriviaSyntax, PragmaChecksumDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PragmaChecksumDirectiveTriviaSyntax, PragmaChecksumDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(PragmaChecksumDirectiveTriviaSyntax original, PragmaChecksumDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PragmaChecksumDirectiveTriviaSyntax, PragmaChecksumDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(PragmaChecksumDirectiveTriviaSyntax original, PragmaChecksumDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.PragmaKeyword, modified.PragmaKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ChecksumKeyword, modified.ChecksumKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.File, modified.File, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Guid, modified.Guid, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Bytes, modified.Bytes, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PragmaChecksumDirectiveTriviaSyntax, PragmaChecksumDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, PragmaChecksumDirectiveTriviaSyntax, PragmaChecksumDirectiveTriviaSyntax>.EqualityMatch(PragmaChecksumDirectiveTriviaSyntax original, PragmaChecksumDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ReferenceDirectiveTrivia"/>.
    /// </summary>
    partial class ReferenceDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ReferenceDirectiveTriviaSyntax, ReferenceDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ReferenceDirectiveTriviaSyntax, ReferenceDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ReferenceDirectiveTriviaSyntax, ReferenceDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ReferenceDirectiveTriviaSyntax, ReferenceDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ReferenceDirectiveTriviaSyntax, ReferenceDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ReferenceDirectiveTriviaSyntax original, ReferenceDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ReferenceDirectiveTriviaSyntax, ReferenceDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ReferenceDirectiveTriviaSyntax, ReferenceDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ReferenceDirectiveTriviaSyntax original, ReferenceDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ReferenceDirectiveTriviaSyntax, ReferenceDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ReferenceDirectiveTriviaSyntax original, ReferenceDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ReferenceKeyword, modified.ReferenceKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.File, modified.File, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ReferenceDirectiveTriviaSyntax, ReferenceDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ReferenceDirectiveTriviaSyntax, ReferenceDirectiveTriviaSyntax>.EqualityMatch(ReferenceDirectiveTriviaSyntax original, ReferenceDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="LoadDirectiveTrivia"/>.
    /// </summary>
    partial class LoadDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, LoadDirectiveTriviaSyntax, LoadDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(LoadDirectiveTriviaSyntax, LoadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LoadDirectiveTriviaSyntax, LoadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(LoadDirectiveTriviaSyntax, LoadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(LoadDirectiveTriviaSyntax, LoadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(LoadDirectiveTriviaSyntax original, LoadDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(LoadDirectiveTriviaSyntax, LoadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LoadDirectiveTriviaSyntax, LoadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(LoadDirectiveTriviaSyntax original, LoadDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LoadDirectiveTriviaSyntax, LoadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(LoadDirectiveTriviaSyntax original, LoadDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.LoadKeyword, modified.LoadKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.File, modified.File, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LoadDirectiveTriviaSyntax, LoadDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, LoadDirectiveTriviaSyntax, LoadDirectiveTriviaSyntax>.EqualityMatch(LoadDirectiveTriviaSyntax original, LoadDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ShebangDirectiveTrivia"/>.
    /// </summary>
    partial class ShebangDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ShebangDirectiveTriviaSyntax, ShebangDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ShebangDirectiveTriviaSyntax, ShebangDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ShebangDirectiveTriviaSyntax, ShebangDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ShebangDirectiveTriviaSyntax, ShebangDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ShebangDirectiveTriviaSyntax, ShebangDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ShebangDirectiveTriviaSyntax original, ShebangDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ShebangDirectiveTriviaSyntax, ShebangDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ShebangDirectiveTriviaSyntax, ShebangDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ShebangDirectiveTriviaSyntax original, ShebangDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ShebangDirectiveTriviaSyntax, ShebangDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ShebangDirectiveTriviaSyntax original, ShebangDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ExclamationToken, modified.ExclamationToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ShebangDirectiveTriviaSyntax, ShebangDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ShebangDirectiveTriviaSyntax, ShebangDirectiveTriviaSyntax>.EqualityMatch(ShebangDirectiveTriviaSyntax original, ShebangDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ElseDirectiveTrivia"/>.
    /// </summary>
    partial class ElseDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ElseDirectiveTriviaSyntax, ElseDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ElseDirectiveTriviaSyntax, ElseDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ElseDirectiveTriviaSyntax, ElseDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ElseDirectiveTriviaSyntax, ElseDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ElseDirectiveTriviaSyntax, ElseDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ElseDirectiveTriviaSyntax original, ElseDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ElseDirectiveTriviaSyntax, ElseDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ElseDirectiveTriviaSyntax, ElseDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ElseDirectiveTriviaSyntax original, ElseDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ElseDirectiveTriviaSyntax, ElseDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ElseDirectiveTriviaSyntax original, ElseDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ElseKeyword, modified.ElseKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ElseDirectiveTriviaSyntax, ElseDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ElseDirectiveTriviaSyntax, ElseDirectiveTriviaSyntax>.EqualityMatch(ElseDirectiveTriviaSyntax original, ElseDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="IfDirectiveTrivia"/>.
    /// </summary>
    partial class IfDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, IfDirectiveTriviaSyntax, IfDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(IfDirectiveTriviaSyntax, IfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IfDirectiveTriviaSyntax, IfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(IfDirectiveTriviaSyntax, IfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(IfDirectiveTriviaSyntax, IfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(IfDirectiveTriviaSyntax original, IfDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(IfDirectiveTriviaSyntax, IfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IfDirectiveTriviaSyntax, IfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(IfDirectiveTriviaSyntax original, IfDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IfDirectiveTriviaSyntax, IfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(IfDirectiveTriviaSyntax original, IfDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.IfKeyword, modified.IfKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Condition, modified.Condition, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IfDirectiveTriviaSyntax, IfDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, IfDirectiveTriviaSyntax, IfDirectiveTriviaSyntax>.EqualityMatch(IfDirectiveTriviaSyntax original, IfDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ElifDirectiveTrivia"/>.
    /// </summary>
    partial class ElifDirectiveTriviaServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ElifDirectiveTriviaSyntax, ElifDirectiveTriviaSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ElifDirectiveTriviaSyntax, ElifDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ElifDirectiveTriviaSyntax, ElifDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ElifDirectiveTriviaSyntax, ElifDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ElifDirectiveTriviaSyntax, ElifDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ElifDirectiveTriviaSyntax original, ElifDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ElifDirectiveTriviaSyntax, ElifDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ElifDirectiveTriviaSyntax, ElifDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ElifDirectiveTriviaSyntax original, ElifDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ElifDirectiveTriviaSyntax, ElifDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ElifDirectiveTriviaSyntax original, ElifDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.HashToken, modified.HashToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ElifKeyword, modified.ElifKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Condition, modified.Condition, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndOfDirectiveToken, modified.EndOfDirectiveToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ElifDirectiveTriviaSyntax, ElifDirectiveTriviaSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ElifDirectiveTriviaSyntax, ElifDirectiveTriviaSyntax>.EqualityMatch(ElifDirectiveTriviaSyntax original, ElifDirectiveTriviaSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TypeCref"/>.
    /// </summary>
    partial class TypeCrefServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TypeCrefSyntax, TypeCrefSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TypeCrefSyntax, TypeCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeCrefSyntax, TypeCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TypeCrefSyntax, TypeCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TypeCrefSyntax, TypeCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TypeCrefSyntax original, TypeCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TypeCrefSyntax, TypeCrefSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeCrefSyntax, TypeCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TypeCrefSyntax original, TypeCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeCrefSyntax, TypeCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TypeCrefSyntax original, TypeCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeCrefSyntax, TypeCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TypeCrefSyntax, TypeCrefSyntax>.EqualityMatch(TypeCrefSyntax original, TypeCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="QualifiedCref"/>.
    /// </summary>
    partial class QualifiedCrefServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, QualifiedCrefSyntax, QualifiedCrefSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(QualifiedCrefSyntax, QualifiedCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(QualifiedCrefSyntax, QualifiedCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(QualifiedCrefSyntax, QualifiedCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(QualifiedCrefSyntax, QualifiedCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(QualifiedCrefSyntax original, QualifiedCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(QualifiedCrefSyntax, QualifiedCrefSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(QualifiedCrefSyntax, QualifiedCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(QualifiedCrefSyntax original, QualifiedCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(QualifiedCrefSyntax, QualifiedCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(QualifiedCrefSyntax original, QualifiedCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Container, modified.Container, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.DotToken, modified.DotToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Member, modified.Member, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(QualifiedCrefSyntax, QualifiedCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, QualifiedCrefSyntax, QualifiedCrefSyntax>.EqualityMatch(QualifiedCrefSyntax original, QualifiedCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="NameMemberCref"/>.
    /// </summary>
    partial class NameMemberCrefServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, NameMemberCrefSyntax, NameMemberCrefSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(NameMemberCrefSyntax, NameMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(NameMemberCrefSyntax, NameMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(NameMemberCrefSyntax, NameMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(NameMemberCrefSyntax, NameMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(NameMemberCrefSyntax original, NameMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(NameMemberCrefSyntax, NameMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(NameMemberCrefSyntax, NameMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(NameMemberCrefSyntax original, NameMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(NameMemberCrefSyntax, NameMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(NameMemberCrefSyntax original, NameMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                ((original.Parameters == null && modified.Parameters == null) || (original.Parameters != null && modified.Parameters != null && this.LanguageServiceProvider.EqualityMatch(original.Parameters, modified.Parameters, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(NameMemberCrefSyntax, NameMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, NameMemberCrefSyntax, NameMemberCrefSyntax>.EqualityMatch(NameMemberCrefSyntax original, NameMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="IndexerMemberCref"/>.
    /// </summary>
    partial class IndexerMemberCrefServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, IndexerMemberCrefSyntax, IndexerMemberCrefSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(IndexerMemberCrefSyntax, IndexerMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IndexerMemberCrefSyntax, IndexerMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(IndexerMemberCrefSyntax, IndexerMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(IndexerMemberCrefSyntax, IndexerMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(IndexerMemberCrefSyntax original, IndexerMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(IndexerMemberCrefSyntax, IndexerMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IndexerMemberCrefSyntax, IndexerMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(IndexerMemberCrefSyntax original, IndexerMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IndexerMemberCrefSyntax, IndexerMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(IndexerMemberCrefSyntax original, IndexerMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ThisKeyword, modified.ThisKeyword, context)) &&
                ((original.Parameters == null && modified.Parameters == null) || (original.Parameters != null && modified.Parameters != null && this.LanguageServiceProvider.EqualityMatch(original.Parameters, modified.Parameters, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IndexerMemberCrefSyntax, IndexerMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, IndexerMemberCrefSyntax, IndexerMemberCrefSyntax>.EqualityMatch(IndexerMemberCrefSyntax original, IndexerMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="OperatorMemberCref"/>.
    /// </summary>
    partial class OperatorMemberCrefServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, OperatorMemberCrefSyntax, OperatorMemberCrefSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(OperatorMemberCrefSyntax, OperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OperatorMemberCrefSyntax, OperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(OperatorMemberCrefSyntax, OperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(OperatorMemberCrefSyntax, OperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(OperatorMemberCrefSyntax original, OperatorMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(OperatorMemberCrefSyntax, OperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OperatorMemberCrefSyntax, OperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(OperatorMemberCrefSyntax original, OperatorMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OperatorMemberCrefSyntax, OperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(OperatorMemberCrefSyntax original, OperatorMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OperatorKeyword, modified.OperatorKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OperatorToken, modified.OperatorToken, context)) &&
                ((original.Parameters == null && modified.Parameters == null) || (original.Parameters != null && modified.Parameters != null && this.LanguageServiceProvider.EqualityMatch(original.Parameters, modified.Parameters, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OperatorMemberCrefSyntax, OperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, OperatorMemberCrefSyntax, OperatorMemberCrefSyntax>.EqualityMatch(OperatorMemberCrefSyntax original, OperatorMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ConversionOperatorMemberCref"/>.
    /// </summary>
    partial class ConversionOperatorMemberCrefServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ConversionOperatorMemberCrefSyntax, ConversionOperatorMemberCrefSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ConversionOperatorMemberCrefSyntax, ConversionOperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConversionOperatorMemberCrefSyntax, ConversionOperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ConversionOperatorMemberCrefSyntax, ConversionOperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ConversionOperatorMemberCrefSyntax, ConversionOperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ConversionOperatorMemberCrefSyntax original, ConversionOperatorMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ConversionOperatorMemberCrefSyntax, ConversionOperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConversionOperatorMemberCrefSyntax, ConversionOperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ConversionOperatorMemberCrefSyntax original, ConversionOperatorMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConversionOperatorMemberCrefSyntax, ConversionOperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ConversionOperatorMemberCrefSyntax original, ConversionOperatorMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ImplicitOrExplicitKeyword, modified.ImplicitOrExplicitKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OperatorKeyword, modified.OperatorKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                ((original.Parameters == null && modified.Parameters == null) || (original.Parameters != null && modified.Parameters != null && this.LanguageServiceProvider.EqualityMatch(original.Parameters, modified.Parameters, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConversionOperatorMemberCrefSyntax, ConversionOperatorMemberCrefSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ConversionOperatorMemberCrefSyntax, ConversionOperatorMemberCrefSyntax>.EqualityMatch(ConversionOperatorMemberCrefSyntax original, ConversionOperatorMemberCrefSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CrefParameterList"/>.
    /// </summary>
    partial class CrefParameterListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CrefParameterListSyntax, CrefParameterListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CrefParameterListSyntax, CrefParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CrefParameterListSyntax, CrefParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CrefParameterListSyntax, CrefParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CrefParameterListSyntax, CrefParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CrefParameterListSyntax original, CrefParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CrefParameterListSyntax, CrefParameterListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CrefParameterListSyntax, CrefParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CrefParameterListSyntax original, CrefParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CrefParameterListSyntax, CrefParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CrefParameterListSyntax original, CrefParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Parameters, modified.Parameters, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CrefParameterListSyntax, CrefParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CrefParameterListSyntax, CrefParameterListSyntax>.EqualityMatch(CrefParameterListSyntax original, CrefParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CrefBracketedParameterList"/>.
    /// </summary>
    partial class CrefBracketedParameterListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CrefBracketedParameterListSyntax, CrefBracketedParameterListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CrefBracketedParameterListSyntax, CrefBracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CrefBracketedParameterListSyntax, CrefBracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CrefBracketedParameterListSyntax, CrefBracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CrefBracketedParameterListSyntax, CrefBracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CrefBracketedParameterListSyntax original, CrefBracketedParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CrefBracketedParameterListSyntax, CrefBracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CrefBracketedParameterListSyntax, CrefBracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CrefBracketedParameterListSyntax original, CrefBracketedParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CrefBracketedParameterListSyntax, CrefBracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CrefBracketedParameterListSyntax original, CrefBracketedParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenBracketToken, modified.OpenBracketToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Parameters, modified.Parameters, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBracketToken, modified.CloseBracketToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CrefBracketedParameterListSyntax, CrefBracketedParameterListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CrefBracketedParameterListSyntax, CrefBracketedParameterListSyntax>.EqualityMatch(CrefBracketedParameterListSyntax original, CrefBracketedParameterListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlElement"/>.
    /// </summary>
    partial class XmlElementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlElementSyntax, XmlElementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlElementSyntax, XmlElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlElementSyntax, XmlElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlElementSyntax, XmlElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlElementSyntax, XmlElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlElementSyntax original, XmlElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlElementSyntax, XmlElementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlElementSyntax, XmlElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlElementSyntax original, XmlElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlElementSyntax, XmlElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlElementSyntax original, XmlElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.StartTag, modified.StartTag, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Content, modified.Content, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndTag, modified.EndTag, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlElementSyntax, XmlElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlElementSyntax, XmlElementSyntax>.EqualityMatch(XmlElementSyntax original, XmlElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlEmptyElement"/>.
    /// </summary>
    partial class XmlEmptyElementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlEmptyElementSyntax, XmlEmptyElementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlEmptyElementSyntax, XmlEmptyElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlEmptyElementSyntax, XmlEmptyElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlEmptyElementSyntax, XmlEmptyElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlEmptyElementSyntax, XmlEmptyElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlEmptyElementSyntax original, XmlEmptyElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlEmptyElementSyntax, XmlEmptyElementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlEmptyElementSyntax, XmlEmptyElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlEmptyElementSyntax original, XmlEmptyElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlEmptyElementSyntax, XmlEmptyElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlEmptyElementSyntax original, XmlEmptyElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.LessThanToken, modified.LessThanToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Attributes, modified.Attributes, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SlashGreaterThanToken, modified.SlashGreaterThanToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlEmptyElementSyntax, XmlEmptyElementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlEmptyElementSyntax, XmlEmptyElementSyntax>.EqualityMatch(XmlEmptyElementSyntax original, XmlEmptyElementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlText"/>.
    /// </summary>
    partial class XmlTextServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlTextSyntax, XmlTextSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlTextSyntax, XmlTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlTextSyntax, XmlTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlTextSyntax, XmlTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlTextSyntax, XmlTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlTextSyntax original, XmlTextSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlTextSyntax, XmlTextSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlTextSyntax, XmlTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlTextSyntax original, XmlTextSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlTextSyntax, XmlTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlTextSyntax original, XmlTextSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.TextTokens, modified.TextTokens, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlTextSyntax, XmlTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlTextSyntax, XmlTextSyntax>.EqualityMatch(XmlTextSyntax original, XmlTextSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlCDataSection"/>.
    /// </summary>
    partial class XmlCDataSectionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlCDataSectionSyntax, XmlCDataSectionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlCDataSectionSyntax, XmlCDataSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlCDataSectionSyntax, XmlCDataSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlCDataSectionSyntax, XmlCDataSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlCDataSectionSyntax, XmlCDataSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlCDataSectionSyntax original, XmlCDataSectionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlCDataSectionSyntax, XmlCDataSectionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlCDataSectionSyntax, XmlCDataSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlCDataSectionSyntax original, XmlCDataSectionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlCDataSectionSyntax, XmlCDataSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlCDataSectionSyntax original, XmlCDataSectionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.StartCDataToken, modified.StartCDataToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.TextTokens, modified.TextTokens, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndCDataToken, modified.EndCDataToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlCDataSectionSyntax, XmlCDataSectionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlCDataSectionSyntax, XmlCDataSectionSyntax>.EqualityMatch(XmlCDataSectionSyntax original, XmlCDataSectionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlProcessingInstruction"/>.
    /// </summary>
    partial class XmlProcessingInstructionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlProcessingInstructionSyntax, XmlProcessingInstructionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlProcessingInstructionSyntax, XmlProcessingInstructionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlProcessingInstructionSyntax, XmlProcessingInstructionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlProcessingInstructionSyntax, XmlProcessingInstructionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlProcessingInstructionSyntax, XmlProcessingInstructionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlProcessingInstructionSyntax original, XmlProcessingInstructionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlProcessingInstructionSyntax, XmlProcessingInstructionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlProcessingInstructionSyntax, XmlProcessingInstructionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlProcessingInstructionSyntax original, XmlProcessingInstructionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlProcessingInstructionSyntax, XmlProcessingInstructionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlProcessingInstructionSyntax original, XmlProcessingInstructionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.StartProcessingInstructionToken, modified.StartProcessingInstructionToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.TextTokens, modified.TextTokens, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndProcessingInstructionToken, modified.EndProcessingInstructionToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlProcessingInstructionSyntax, XmlProcessingInstructionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlProcessingInstructionSyntax, XmlProcessingInstructionSyntax>.EqualityMatch(XmlProcessingInstructionSyntax original, XmlProcessingInstructionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlComment"/>.
    /// </summary>
    partial class XmlCommentServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlCommentSyntax, XmlCommentSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlCommentSyntax, XmlCommentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlCommentSyntax, XmlCommentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlCommentSyntax, XmlCommentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlCommentSyntax, XmlCommentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlCommentSyntax original, XmlCommentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlCommentSyntax, XmlCommentSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlCommentSyntax, XmlCommentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlCommentSyntax original, XmlCommentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlCommentSyntax, XmlCommentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlCommentSyntax original, XmlCommentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.LessThanExclamationMinusMinusToken, modified.LessThanExclamationMinusMinusToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.TextTokens, modified.TextTokens, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.MinusMinusGreaterThanToken, modified.MinusMinusGreaterThanToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlCommentSyntax, XmlCommentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlCommentSyntax, XmlCommentSyntax>.EqualityMatch(XmlCommentSyntax original, XmlCommentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlTextAttribute"/>.
    /// </summary>
    partial class XmlTextAttributeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlTextAttributeSyntax, XmlTextAttributeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlTextAttributeSyntax, XmlTextAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlTextAttributeSyntax, XmlTextAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlTextAttributeSyntax, XmlTextAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlTextAttributeSyntax, XmlTextAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlTextAttributeSyntax original, XmlTextAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlTextAttributeSyntax, XmlTextAttributeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlTextAttributeSyntax, XmlTextAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlTextAttributeSyntax original, XmlTextAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlTextAttributeSyntax, XmlTextAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlTextAttributeSyntax original, XmlTextAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EqualsToken, modified.EqualsToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.StartQuoteToken, modified.StartQuoteToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.TextTokens, modified.TextTokens, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndQuoteToken, modified.EndQuoteToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlTextAttributeSyntax, XmlTextAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlTextAttributeSyntax, XmlTextAttributeSyntax>.EqualityMatch(XmlTextAttributeSyntax original, XmlTextAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlCrefAttribute"/>.
    /// </summary>
    partial class XmlCrefAttributeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlCrefAttributeSyntax, XmlCrefAttributeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlCrefAttributeSyntax, XmlCrefAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlCrefAttributeSyntax, XmlCrefAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlCrefAttributeSyntax, XmlCrefAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlCrefAttributeSyntax, XmlCrefAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlCrefAttributeSyntax original, XmlCrefAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlCrefAttributeSyntax, XmlCrefAttributeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlCrefAttributeSyntax, XmlCrefAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlCrefAttributeSyntax original, XmlCrefAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlCrefAttributeSyntax, XmlCrefAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlCrefAttributeSyntax original, XmlCrefAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EqualsToken, modified.EqualsToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.StartQuoteToken, modified.StartQuoteToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Cref, modified.Cref, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndQuoteToken, modified.EndQuoteToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlCrefAttributeSyntax, XmlCrefAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlCrefAttributeSyntax, XmlCrefAttributeSyntax>.EqualityMatch(XmlCrefAttributeSyntax original, XmlCrefAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="XmlNameAttribute"/>.
    /// </summary>
    partial class XmlNameAttributeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, XmlNameAttributeSyntax, XmlNameAttributeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(XmlNameAttributeSyntax, XmlNameAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlNameAttributeSyntax, XmlNameAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(XmlNameAttributeSyntax, XmlNameAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(XmlNameAttributeSyntax, XmlNameAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(XmlNameAttributeSyntax original, XmlNameAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(XmlNameAttributeSyntax, XmlNameAttributeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(XmlNameAttributeSyntax, XmlNameAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(XmlNameAttributeSyntax original, XmlNameAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlNameAttributeSyntax, XmlNameAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(XmlNameAttributeSyntax original, XmlNameAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EqualsToken, modified.EqualsToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.StartQuoteToken, modified.StartQuoteToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EndQuoteToken, modified.EndQuoteToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(XmlNameAttributeSyntax, XmlNameAttributeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, XmlNameAttributeSyntax, XmlNameAttributeSyntax>.EqualityMatch(XmlNameAttributeSyntax original, XmlNameAttributeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ParenthesizedExpression"/>.
    /// </summary>
    partial class ParenthesizedExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ParenthesizedExpressionSyntax, ParenthesizedExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ParenthesizedExpressionSyntax, ParenthesizedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ParenthesizedExpressionSyntax, ParenthesizedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ParenthesizedExpressionSyntax, ParenthesizedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ParenthesizedExpressionSyntax, ParenthesizedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ParenthesizedExpressionSyntax original, ParenthesizedExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ParenthesizedExpressionSyntax, ParenthesizedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ParenthesizedExpressionSyntax, ParenthesizedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ParenthesizedExpressionSyntax original, ParenthesizedExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ParenthesizedExpressionSyntax, ParenthesizedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ParenthesizedExpressionSyntax original, ParenthesizedExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ParenthesizedExpressionSyntax, ParenthesizedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ParenthesizedExpressionSyntax, ParenthesizedExpressionSyntax>.EqualityMatch(ParenthesizedExpressionSyntax original, ParenthesizedExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TupleExpression"/>.
    /// </summary>
    partial class TupleExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TupleExpressionSyntax, TupleExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TupleExpressionSyntax, TupleExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TupleExpressionSyntax, TupleExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TupleExpressionSyntax, TupleExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TupleExpressionSyntax, TupleExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TupleExpressionSyntax original, TupleExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TupleExpressionSyntax, TupleExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TupleExpressionSyntax, TupleExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TupleExpressionSyntax original, TupleExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TupleExpressionSyntax, TupleExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TupleExpressionSyntax original, TupleExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Arguments, modified.Arguments, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TupleExpressionSyntax, TupleExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TupleExpressionSyntax, TupleExpressionSyntax>.EqualityMatch(TupleExpressionSyntax original, TupleExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="PrefixUnaryExpression"/>.
    /// </summary>
    partial class PrefixUnaryExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, PrefixUnaryExpressionSyntax, PrefixUnaryExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(PrefixUnaryExpressionSyntax, PrefixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PrefixUnaryExpressionSyntax, PrefixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(PrefixUnaryExpressionSyntax, PrefixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(PrefixUnaryExpressionSyntax, PrefixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(PrefixUnaryExpressionSyntax original, PrefixUnaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(PrefixUnaryExpressionSyntax, PrefixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PrefixUnaryExpressionSyntax, PrefixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(PrefixUnaryExpressionSyntax original, PrefixUnaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PrefixUnaryExpressionSyntax, PrefixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(PrefixUnaryExpressionSyntax original, PrefixUnaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OperatorToken, modified.OperatorToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Operand, modified.Operand, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PrefixUnaryExpressionSyntax, PrefixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, PrefixUnaryExpressionSyntax, PrefixUnaryExpressionSyntax>.EqualityMatch(PrefixUnaryExpressionSyntax original, PrefixUnaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AwaitExpression"/>.
    /// </summary>
    partial class AwaitExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AwaitExpressionSyntax, AwaitExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AwaitExpressionSyntax, AwaitExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AwaitExpressionSyntax, AwaitExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AwaitExpressionSyntax, AwaitExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AwaitExpressionSyntax, AwaitExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AwaitExpressionSyntax original, AwaitExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AwaitExpressionSyntax, AwaitExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AwaitExpressionSyntax, AwaitExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AwaitExpressionSyntax original, AwaitExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AwaitExpressionSyntax, AwaitExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AwaitExpressionSyntax original, AwaitExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.AwaitKeyword, modified.AwaitKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AwaitExpressionSyntax, AwaitExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AwaitExpressionSyntax, AwaitExpressionSyntax>.EqualityMatch(AwaitExpressionSyntax original, AwaitExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="PostfixUnaryExpression"/>.
    /// </summary>
    partial class PostfixUnaryExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, PostfixUnaryExpressionSyntax, PostfixUnaryExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(PostfixUnaryExpressionSyntax, PostfixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PostfixUnaryExpressionSyntax, PostfixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(PostfixUnaryExpressionSyntax, PostfixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(PostfixUnaryExpressionSyntax, PostfixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(PostfixUnaryExpressionSyntax original, PostfixUnaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(PostfixUnaryExpressionSyntax, PostfixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PostfixUnaryExpressionSyntax, PostfixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(PostfixUnaryExpressionSyntax original, PostfixUnaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PostfixUnaryExpressionSyntax, PostfixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(PostfixUnaryExpressionSyntax original, PostfixUnaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Operand, modified.Operand, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OperatorToken, modified.OperatorToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PostfixUnaryExpressionSyntax, PostfixUnaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, PostfixUnaryExpressionSyntax, PostfixUnaryExpressionSyntax>.EqualityMatch(PostfixUnaryExpressionSyntax original, PostfixUnaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="MemberAccessExpression"/>.
    /// </summary>
    partial class MemberAccessExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, MemberAccessExpressionSyntax, MemberAccessExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(MemberAccessExpressionSyntax, MemberAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(MemberAccessExpressionSyntax, MemberAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(MemberAccessExpressionSyntax, MemberAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(MemberAccessExpressionSyntax, MemberAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(MemberAccessExpressionSyntax original, MemberAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(MemberAccessExpressionSyntax, MemberAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(MemberAccessExpressionSyntax, MemberAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(MemberAccessExpressionSyntax original, MemberAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(MemberAccessExpressionSyntax, MemberAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(MemberAccessExpressionSyntax original, MemberAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OperatorToken, modified.OperatorToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(MemberAccessExpressionSyntax, MemberAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, MemberAccessExpressionSyntax, MemberAccessExpressionSyntax>.EqualityMatch(MemberAccessExpressionSyntax original, MemberAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ConditionalAccessExpression"/>.
    /// </summary>
    partial class ConditionalAccessExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ConditionalAccessExpressionSyntax, ConditionalAccessExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ConditionalAccessExpressionSyntax, ConditionalAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConditionalAccessExpressionSyntax, ConditionalAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ConditionalAccessExpressionSyntax, ConditionalAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ConditionalAccessExpressionSyntax, ConditionalAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ConditionalAccessExpressionSyntax original, ConditionalAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ConditionalAccessExpressionSyntax, ConditionalAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConditionalAccessExpressionSyntax, ConditionalAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ConditionalAccessExpressionSyntax original, ConditionalAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConditionalAccessExpressionSyntax, ConditionalAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ConditionalAccessExpressionSyntax original, ConditionalAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OperatorToken, modified.OperatorToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.WhenNotNull, modified.WhenNotNull, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConditionalAccessExpressionSyntax, ConditionalAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ConditionalAccessExpressionSyntax, ConditionalAccessExpressionSyntax>.EqualityMatch(ConditionalAccessExpressionSyntax original, ConditionalAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="MemberBindingExpression"/>.
    /// </summary>
    partial class MemberBindingExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, MemberBindingExpressionSyntax, MemberBindingExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(MemberBindingExpressionSyntax, MemberBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(MemberBindingExpressionSyntax, MemberBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(MemberBindingExpressionSyntax, MemberBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(MemberBindingExpressionSyntax, MemberBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(MemberBindingExpressionSyntax original, MemberBindingExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(MemberBindingExpressionSyntax, MemberBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(MemberBindingExpressionSyntax, MemberBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(MemberBindingExpressionSyntax original, MemberBindingExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(MemberBindingExpressionSyntax, MemberBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(MemberBindingExpressionSyntax original, MemberBindingExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OperatorToken, modified.OperatorToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(MemberBindingExpressionSyntax, MemberBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, MemberBindingExpressionSyntax, MemberBindingExpressionSyntax>.EqualityMatch(MemberBindingExpressionSyntax original, MemberBindingExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ElementBindingExpression"/>.
    /// </summary>
    partial class ElementBindingExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ElementBindingExpressionSyntax, ElementBindingExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ElementBindingExpressionSyntax, ElementBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ElementBindingExpressionSyntax, ElementBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ElementBindingExpressionSyntax, ElementBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ElementBindingExpressionSyntax, ElementBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ElementBindingExpressionSyntax original, ElementBindingExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ElementBindingExpressionSyntax, ElementBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ElementBindingExpressionSyntax, ElementBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ElementBindingExpressionSyntax original, ElementBindingExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ElementBindingExpressionSyntax, ElementBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ElementBindingExpressionSyntax original, ElementBindingExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.ArgumentList, modified.ArgumentList, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ElementBindingExpressionSyntax, ElementBindingExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ElementBindingExpressionSyntax, ElementBindingExpressionSyntax>.EqualityMatch(ElementBindingExpressionSyntax original, ElementBindingExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ImplicitElementAccess"/>.
    /// </summary>
    partial class ImplicitElementAccessServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ImplicitElementAccessSyntax, ImplicitElementAccessSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ImplicitElementAccessSyntax, ImplicitElementAccessSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ImplicitElementAccessSyntax, ImplicitElementAccessSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ImplicitElementAccessSyntax, ImplicitElementAccessSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ImplicitElementAccessSyntax, ImplicitElementAccessSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ImplicitElementAccessSyntax original, ImplicitElementAccessSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ImplicitElementAccessSyntax, ImplicitElementAccessSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ImplicitElementAccessSyntax, ImplicitElementAccessSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ImplicitElementAccessSyntax original, ImplicitElementAccessSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ImplicitElementAccessSyntax, ImplicitElementAccessSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ImplicitElementAccessSyntax original, ImplicitElementAccessSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.ArgumentList, modified.ArgumentList, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ImplicitElementAccessSyntax, ImplicitElementAccessSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ImplicitElementAccessSyntax, ImplicitElementAccessSyntax>.EqualityMatch(ImplicitElementAccessSyntax original, ImplicitElementAccessSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="BinaryExpression"/>.
    /// </summary>
    partial class BinaryExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, BinaryExpressionSyntax, BinaryExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(BinaryExpressionSyntax, BinaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BinaryExpressionSyntax, BinaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(BinaryExpressionSyntax, BinaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(BinaryExpressionSyntax, BinaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(BinaryExpressionSyntax original, BinaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(BinaryExpressionSyntax, BinaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BinaryExpressionSyntax, BinaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(BinaryExpressionSyntax original, BinaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BinaryExpressionSyntax, BinaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(BinaryExpressionSyntax original, BinaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Left, modified.Left, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OperatorToken, modified.OperatorToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Right, modified.Right, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BinaryExpressionSyntax, BinaryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, BinaryExpressionSyntax, BinaryExpressionSyntax>.EqualityMatch(BinaryExpressionSyntax original, BinaryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AssignmentExpression"/>.
    /// </summary>
    partial class AssignmentExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AssignmentExpressionSyntax, AssignmentExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AssignmentExpressionSyntax, AssignmentExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AssignmentExpressionSyntax, AssignmentExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AssignmentExpressionSyntax, AssignmentExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AssignmentExpressionSyntax, AssignmentExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AssignmentExpressionSyntax original, AssignmentExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AssignmentExpressionSyntax, AssignmentExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AssignmentExpressionSyntax, AssignmentExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AssignmentExpressionSyntax original, AssignmentExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AssignmentExpressionSyntax, AssignmentExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AssignmentExpressionSyntax original, AssignmentExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Left, modified.Left, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OperatorToken, modified.OperatorToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Right, modified.Right, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AssignmentExpressionSyntax, AssignmentExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AssignmentExpressionSyntax, AssignmentExpressionSyntax>.EqualityMatch(AssignmentExpressionSyntax original, AssignmentExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ConditionalExpression"/>.
    /// </summary>
    partial class ConditionalExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ConditionalExpressionSyntax, ConditionalExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ConditionalExpressionSyntax, ConditionalExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConditionalExpressionSyntax, ConditionalExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ConditionalExpressionSyntax, ConditionalExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ConditionalExpressionSyntax, ConditionalExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ConditionalExpressionSyntax original, ConditionalExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ConditionalExpressionSyntax, ConditionalExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConditionalExpressionSyntax, ConditionalExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ConditionalExpressionSyntax original, ConditionalExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConditionalExpressionSyntax, ConditionalExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ConditionalExpressionSyntax original, ConditionalExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Condition, modified.Condition, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.QuestionToken, modified.QuestionToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.WhenTrue, modified.WhenTrue, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.WhenFalse, modified.WhenFalse, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConditionalExpressionSyntax, ConditionalExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ConditionalExpressionSyntax, ConditionalExpressionSyntax>.EqualityMatch(ConditionalExpressionSyntax original, ConditionalExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="LiteralExpression"/>.
    /// </summary>
    partial class LiteralExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, LiteralExpressionSyntax, LiteralExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(LiteralExpressionSyntax, LiteralExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LiteralExpressionSyntax, LiteralExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(LiteralExpressionSyntax, LiteralExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(LiteralExpressionSyntax, LiteralExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(LiteralExpressionSyntax original, LiteralExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(LiteralExpressionSyntax, LiteralExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LiteralExpressionSyntax, LiteralExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(LiteralExpressionSyntax original, LiteralExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LiteralExpressionSyntax, LiteralExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(LiteralExpressionSyntax original, LiteralExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Token, modified.Token, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LiteralExpressionSyntax, LiteralExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, LiteralExpressionSyntax, LiteralExpressionSyntax>.EqualityMatch(LiteralExpressionSyntax original, LiteralExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="MakeRefExpression"/>.
    /// </summary>
    partial class MakeRefExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, MakeRefExpressionSyntax, MakeRefExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(MakeRefExpressionSyntax, MakeRefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(MakeRefExpressionSyntax, MakeRefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(MakeRefExpressionSyntax, MakeRefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(MakeRefExpressionSyntax, MakeRefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(MakeRefExpressionSyntax original, MakeRefExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(MakeRefExpressionSyntax, MakeRefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(MakeRefExpressionSyntax, MakeRefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(MakeRefExpressionSyntax original, MakeRefExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(MakeRefExpressionSyntax, MakeRefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(MakeRefExpressionSyntax original, MakeRefExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(MakeRefExpressionSyntax, MakeRefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, MakeRefExpressionSyntax, MakeRefExpressionSyntax>.EqualityMatch(MakeRefExpressionSyntax original, MakeRefExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="RefTypeExpression"/>.
    /// </summary>
    partial class RefTypeExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, RefTypeExpressionSyntax, RefTypeExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(RefTypeExpressionSyntax, RefTypeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(RefTypeExpressionSyntax, RefTypeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(RefTypeExpressionSyntax, RefTypeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(RefTypeExpressionSyntax, RefTypeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(RefTypeExpressionSyntax original, RefTypeExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(RefTypeExpressionSyntax, RefTypeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(RefTypeExpressionSyntax, RefTypeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(RefTypeExpressionSyntax original, RefTypeExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(RefTypeExpressionSyntax, RefTypeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(RefTypeExpressionSyntax original, RefTypeExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(RefTypeExpressionSyntax, RefTypeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, RefTypeExpressionSyntax, RefTypeExpressionSyntax>.EqualityMatch(RefTypeExpressionSyntax original, RefTypeExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="RefValueExpression"/>.
    /// </summary>
    partial class RefValueExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, RefValueExpressionSyntax, RefValueExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(RefValueExpressionSyntax, RefValueExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(RefValueExpressionSyntax, RefValueExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(RefValueExpressionSyntax, RefValueExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(RefValueExpressionSyntax, RefValueExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(RefValueExpressionSyntax original, RefValueExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(RefValueExpressionSyntax, RefValueExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(RefValueExpressionSyntax, RefValueExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(RefValueExpressionSyntax original, RefValueExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(RefValueExpressionSyntax, RefValueExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(RefValueExpressionSyntax original, RefValueExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Comma, modified.Comma, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(RefValueExpressionSyntax, RefValueExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, RefValueExpressionSyntax, RefValueExpressionSyntax>.EqualityMatch(RefValueExpressionSyntax original, RefValueExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CheckedExpression"/>.
    /// </summary>
    partial class CheckedExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CheckedExpressionSyntax, CheckedExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CheckedExpressionSyntax, CheckedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CheckedExpressionSyntax, CheckedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CheckedExpressionSyntax, CheckedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CheckedExpressionSyntax, CheckedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CheckedExpressionSyntax original, CheckedExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CheckedExpressionSyntax, CheckedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CheckedExpressionSyntax, CheckedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CheckedExpressionSyntax original, CheckedExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CheckedExpressionSyntax, CheckedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CheckedExpressionSyntax original, CheckedExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CheckedExpressionSyntax, CheckedExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CheckedExpressionSyntax, CheckedExpressionSyntax>.EqualityMatch(CheckedExpressionSyntax original, CheckedExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="DefaultExpression"/>.
    /// </summary>
    partial class DefaultExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, DefaultExpressionSyntax, DefaultExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(DefaultExpressionSyntax, DefaultExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DefaultExpressionSyntax, DefaultExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(DefaultExpressionSyntax, DefaultExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(DefaultExpressionSyntax, DefaultExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(DefaultExpressionSyntax original, DefaultExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(DefaultExpressionSyntax, DefaultExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DefaultExpressionSyntax, DefaultExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(DefaultExpressionSyntax original, DefaultExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DefaultExpressionSyntax, DefaultExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(DefaultExpressionSyntax original, DefaultExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DefaultExpressionSyntax, DefaultExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, DefaultExpressionSyntax, DefaultExpressionSyntax>.EqualityMatch(DefaultExpressionSyntax original, DefaultExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TypeOfExpression"/>.
    /// </summary>
    partial class TypeOfExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TypeOfExpressionSyntax, TypeOfExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TypeOfExpressionSyntax, TypeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeOfExpressionSyntax, TypeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TypeOfExpressionSyntax, TypeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TypeOfExpressionSyntax, TypeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TypeOfExpressionSyntax original, TypeOfExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TypeOfExpressionSyntax, TypeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TypeOfExpressionSyntax, TypeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TypeOfExpressionSyntax original, TypeOfExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeOfExpressionSyntax, TypeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TypeOfExpressionSyntax original, TypeOfExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TypeOfExpressionSyntax, TypeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TypeOfExpressionSyntax, TypeOfExpressionSyntax>.EqualityMatch(TypeOfExpressionSyntax original, TypeOfExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="SizeOfExpression"/>.
    /// </summary>
    partial class SizeOfExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, SizeOfExpressionSyntax, SizeOfExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(SizeOfExpressionSyntax, SizeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SizeOfExpressionSyntax, SizeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(SizeOfExpressionSyntax, SizeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(SizeOfExpressionSyntax, SizeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(SizeOfExpressionSyntax original, SizeOfExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(SizeOfExpressionSyntax, SizeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SizeOfExpressionSyntax, SizeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(SizeOfExpressionSyntax original, SizeOfExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SizeOfExpressionSyntax, SizeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(SizeOfExpressionSyntax original, SizeOfExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SizeOfExpressionSyntax, SizeOfExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, SizeOfExpressionSyntax, SizeOfExpressionSyntax>.EqualityMatch(SizeOfExpressionSyntax original, SizeOfExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="InvocationExpression"/>.
    /// </summary>
    partial class InvocationExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, InvocationExpressionSyntax, InvocationExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(InvocationExpressionSyntax, InvocationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InvocationExpressionSyntax, InvocationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(InvocationExpressionSyntax, InvocationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(InvocationExpressionSyntax, InvocationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(InvocationExpressionSyntax original, InvocationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(InvocationExpressionSyntax, InvocationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InvocationExpressionSyntax, InvocationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(InvocationExpressionSyntax original, InvocationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InvocationExpressionSyntax, InvocationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(InvocationExpressionSyntax original, InvocationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ArgumentList, modified.ArgumentList, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InvocationExpressionSyntax, InvocationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, InvocationExpressionSyntax, InvocationExpressionSyntax>.EqualityMatch(InvocationExpressionSyntax original, InvocationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ElementAccessExpression"/>.
    /// </summary>
    partial class ElementAccessExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ElementAccessExpressionSyntax, ElementAccessExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ElementAccessExpressionSyntax, ElementAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ElementAccessExpressionSyntax, ElementAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ElementAccessExpressionSyntax, ElementAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ElementAccessExpressionSyntax, ElementAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ElementAccessExpressionSyntax original, ElementAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ElementAccessExpressionSyntax, ElementAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ElementAccessExpressionSyntax, ElementAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ElementAccessExpressionSyntax original, ElementAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ElementAccessExpressionSyntax, ElementAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ElementAccessExpressionSyntax original, ElementAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ArgumentList, modified.ArgumentList, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ElementAccessExpressionSyntax, ElementAccessExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ElementAccessExpressionSyntax, ElementAccessExpressionSyntax>.EqualityMatch(ElementAccessExpressionSyntax original, ElementAccessExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="DeclarationExpression"/>.
    /// </summary>
    partial class DeclarationExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, DeclarationExpressionSyntax, DeclarationExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(DeclarationExpressionSyntax, DeclarationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DeclarationExpressionSyntax, DeclarationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(DeclarationExpressionSyntax, DeclarationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(DeclarationExpressionSyntax, DeclarationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(DeclarationExpressionSyntax original, DeclarationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(DeclarationExpressionSyntax, DeclarationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DeclarationExpressionSyntax, DeclarationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(DeclarationExpressionSyntax original, DeclarationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DeclarationExpressionSyntax, DeclarationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(DeclarationExpressionSyntax original, DeclarationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Designation, modified.Designation, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DeclarationExpressionSyntax, DeclarationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, DeclarationExpressionSyntax, DeclarationExpressionSyntax>.EqualityMatch(DeclarationExpressionSyntax original, DeclarationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CastExpression"/>.
    /// </summary>
    partial class CastExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CastExpressionSyntax, CastExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CastExpressionSyntax, CastExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CastExpressionSyntax, CastExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CastExpressionSyntax, CastExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CastExpressionSyntax, CastExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CastExpressionSyntax original, CastExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CastExpressionSyntax, CastExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CastExpressionSyntax, CastExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CastExpressionSyntax original, CastExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CastExpressionSyntax, CastExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CastExpressionSyntax original, CastExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CastExpressionSyntax, CastExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CastExpressionSyntax, CastExpressionSyntax>.EqualityMatch(CastExpressionSyntax original, CastExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="RefExpression"/>.
    /// </summary>
    partial class RefExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, RefExpressionSyntax, RefExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(RefExpressionSyntax, RefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(RefExpressionSyntax, RefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(RefExpressionSyntax, RefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(RefExpressionSyntax, RefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(RefExpressionSyntax original, RefExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(RefExpressionSyntax, RefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(RefExpressionSyntax, RefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(RefExpressionSyntax original, RefExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(RefExpressionSyntax, RefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(RefExpressionSyntax original, RefExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.RefKeyword, modified.RefKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(RefExpressionSyntax, RefExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, RefExpressionSyntax, RefExpressionSyntax>.EqualityMatch(RefExpressionSyntax original, RefExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="InitializerExpression"/>.
    /// </summary>
    partial class InitializerExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, InitializerExpressionSyntax, InitializerExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(InitializerExpressionSyntax, InitializerExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InitializerExpressionSyntax, InitializerExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(InitializerExpressionSyntax, InitializerExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(InitializerExpressionSyntax, InitializerExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(InitializerExpressionSyntax original, InitializerExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(InitializerExpressionSyntax, InitializerExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InitializerExpressionSyntax, InitializerExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(InitializerExpressionSyntax original, InitializerExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InitializerExpressionSyntax, InitializerExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(InitializerExpressionSyntax original, InitializerExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expressions, modified.Expressions, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InitializerExpressionSyntax, InitializerExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, InitializerExpressionSyntax, InitializerExpressionSyntax>.EqualityMatch(InitializerExpressionSyntax original, InitializerExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ObjectCreationExpression"/>.
    /// </summary>
    partial class ObjectCreationExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ObjectCreationExpressionSyntax, ObjectCreationExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ObjectCreationExpressionSyntax, ObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ObjectCreationExpressionSyntax, ObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ObjectCreationExpressionSyntax, ObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ObjectCreationExpressionSyntax, ObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ObjectCreationExpressionSyntax original, ObjectCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ObjectCreationExpressionSyntax, ObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ObjectCreationExpressionSyntax, ObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ObjectCreationExpressionSyntax original, ObjectCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ObjectCreationExpressionSyntax, ObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ObjectCreationExpressionSyntax original, ObjectCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.NewKeyword, modified.NewKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                ((original.ArgumentList == null && modified.ArgumentList == null) || (original.ArgumentList != null && modified.ArgumentList != null && this.LanguageServiceProvider.EqualityMatch(original.ArgumentList, modified.ArgumentList, context))) &&
                ((original.Initializer == null && modified.Initializer == null) || (original.Initializer != null && modified.Initializer != null && this.LanguageServiceProvider.EqualityMatch(original.Initializer, modified.Initializer, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ObjectCreationExpressionSyntax, ObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ObjectCreationExpressionSyntax, ObjectCreationExpressionSyntax>.EqualityMatch(ObjectCreationExpressionSyntax original, ObjectCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AnonymousObjectCreationExpression"/>.
    /// </summary>
    partial class AnonymousObjectCreationExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AnonymousObjectCreationExpressionSyntax, AnonymousObjectCreationExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AnonymousObjectCreationExpressionSyntax, AnonymousObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AnonymousObjectCreationExpressionSyntax, AnonymousObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AnonymousObjectCreationExpressionSyntax, AnonymousObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AnonymousObjectCreationExpressionSyntax, AnonymousObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AnonymousObjectCreationExpressionSyntax original, AnonymousObjectCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AnonymousObjectCreationExpressionSyntax, AnonymousObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AnonymousObjectCreationExpressionSyntax, AnonymousObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AnonymousObjectCreationExpressionSyntax original, AnonymousObjectCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AnonymousObjectCreationExpressionSyntax, AnonymousObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AnonymousObjectCreationExpressionSyntax original, AnonymousObjectCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.NewKeyword, modified.NewKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Initializers, modified.Initializers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AnonymousObjectCreationExpressionSyntax, AnonymousObjectCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AnonymousObjectCreationExpressionSyntax, AnonymousObjectCreationExpressionSyntax>.EqualityMatch(AnonymousObjectCreationExpressionSyntax original, AnonymousObjectCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ArrayCreationExpression"/>.
    /// </summary>
    partial class ArrayCreationExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ArrayCreationExpressionSyntax, ArrayCreationExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ArrayCreationExpressionSyntax, ArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArrayCreationExpressionSyntax, ArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ArrayCreationExpressionSyntax, ArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ArrayCreationExpressionSyntax, ArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ArrayCreationExpressionSyntax original, ArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ArrayCreationExpressionSyntax, ArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArrayCreationExpressionSyntax, ArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ArrayCreationExpressionSyntax original, ArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArrayCreationExpressionSyntax, ArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ArrayCreationExpressionSyntax original, ArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.NewKeyword, modified.NewKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                ((original.Initializer == null && modified.Initializer == null) || (original.Initializer != null && modified.Initializer != null && this.LanguageServiceProvider.EqualityMatch(original.Initializer, modified.Initializer, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArrayCreationExpressionSyntax, ArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ArrayCreationExpressionSyntax, ArrayCreationExpressionSyntax>.EqualityMatch(ArrayCreationExpressionSyntax original, ArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ImplicitArrayCreationExpression"/>.
    /// </summary>
    partial class ImplicitArrayCreationExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ImplicitArrayCreationExpressionSyntax, ImplicitArrayCreationExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ImplicitArrayCreationExpressionSyntax, ImplicitArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ImplicitArrayCreationExpressionSyntax, ImplicitArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ImplicitArrayCreationExpressionSyntax, ImplicitArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ImplicitArrayCreationExpressionSyntax, ImplicitArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ImplicitArrayCreationExpressionSyntax original, ImplicitArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ImplicitArrayCreationExpressionSyntax, ImplicitArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ImplicitArrayCreationExpressionSyntax, ImplicitArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ImplicitArrayCreationExpressionSyntax original, ImplicitArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ImplicitArrayCreationExpressionSyntax, ImplicitArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ImplicitArrayCreationExpressionSyntax original, ImplicitArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.NewKeyword, modified.NewKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenBracketToken, modified.OpenBracketToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Commas, modified.Commas, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBracketToken, modified.CloseBracketToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Initializer, modified.Initializer, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ImplicitArrayCreationExpressionSyntax, ImplicitArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ImplicitArrayCreationExpressionSyntax, ImplicitArrayCreationExpressionSyntax>.EqualityMatch(ImplicitArrayCreationExpressionSyntax original, ImplicitArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="StackAllocArrayCreationExpression"/>.
    /// </summary>
    partial class StackAllocArrayCreationExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, StackAllocArrayCreationExpressionSyntax, StackAllocArrayCreationExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(StackAllocArrayCreationExpressionSyntax, StackAllocArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(StackAllocArrayCreationExpressionSyntax, StackAllocArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(StackAllocArrayCreationExpressionSyntax, StackAllocArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(StackAllocArrayCreationExpressionSyntax, StackAllocArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(StackAllocArrayCreationExpressionSyntax original, StackAllocArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(StackAllocArrayCreationExpressionSyntax, StackAllocArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(StackAllocArrayCreationExpressionSyntax, StackAllocArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(StackAllocArrayCreationExpressionSyntax original, StackAllocArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(StackAllocArrayCreationExpressionSyntax, StackAllocArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(StackAllocArrayCreationExpressionSyntax original, StackAllocArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.StackAllocKeyword, modified.StackAllocKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(StackAllocArrayCreationExpressionSyntax, StackAllocArrayCreationExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, StackAllocArrayCreationExpressionSyntax, StackAllocArrayCreationExpressionSyntax>.EqualityMatch(StackAllocArrayCreationExpressionSyntax original, StackAllocArrayCreationExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="QueryExpression"/>.
    /// </summary>
    partial class QueryExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, QueryExpressionSyntax, QueryExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(QueryExpressionSyntax, QueryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(QueryExpressionSyntax, QueryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(QueryExpressionSyntax, QueryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(QueryExpressionSyntax, QueryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(QueryExpressionSyntax original, QueryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(QueryExpressionSyntax, QueryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(QueryExpressionSyntax, QueryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(QueryExpressionSyntax original, QueryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(QueryExpressionSyntax, QueryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(QueryExpressionSyntax original, QueryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.FromClause, modified.FromClause, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(QueryExpressionSyntax, QueryExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, QueryExpressionSyntax, QueryExpressionSyntax>.EqualityMatch(QueryExpressionSyntax original, QueryExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="OmittedArraySizeExpression"/>.
    /// </summary>
    partial class OmittedArraySizeExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, OmittedArraySizeExpressionSyntax, OmittedArraySizeExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(OmittedArraySizeExpressionSyntax, OmittedArraySizeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OmittedArraySizeExpressionSyntax, OmittedArraySizeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(OmittedArraySizeExpressionSyntax, OmittedArraySizeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(OmittedArraySizeExpressionSyntax, OmittedArraySizeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(OmittedArraySizeExpressionSyntax original, OmittedArraySizeExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(OmittedArraySizeExpressionSyntax, OmittedArraySizeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OmittedArraySizeExpressionSyntax, OmittedArraySizeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(OmittedArraySizeExpressionSyntax original, OmittedArraySizeExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OmittedArraySizeExpressionSyntax, OmittedArraySizeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(OmittedArraySizeExpressionSyntax original, OmittedArraySizeExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.OmittedArraySizeExpressionToken, modified.OmittedArraySizeExpressionToken, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OmittedArraySizeExpressionSyntax, OmittedArraySizeExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, OmittedArraySizeExpressionSyntax, OmittedArraySizeExpressionSyntax>.EqualityMatch(OmittedArraySizeExpressionSyntax original, OmittedArraySizeExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="InterpolatedStringExpression"/>.
    /// </summary>
    partial class InterpolatedStringExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, InterpolatedStringExpressionSyntax, InterpolatedStringExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(InterpolatedStringExpressionSyntax, InterpolatedStringExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterpolatedStringExpressionSyntax, InterpolatedStringExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(InterpolatedStringExpressionSyntax, InterpolatedStringExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(InterpolatedStringExpressionSyntax, InterpolatedStringExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(InterpolatedStringExpressionSyntax original, InterpolatedStringExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(InterpolatedStringExpressionSyntax, InterpolatedStringExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterpolatedStringExpressionSyntax, InterpolatedStringExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(InterpolatedStringExpressionSyntax original, InterpolatedStringExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterpolatedStringExpressionSyntax, InterpolatedStringExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(InterpolatedStringExpressionSyntax original, InterpolatedStringExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.StringStartToken, modified.StringStartToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Contents, modified.Contents, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.StringEndToken, modified.StringEndToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterpolatedStringExpressionSyntax, InterpolatedStringExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, InterpolatedStringExpressionSyntax, InterpolatedStringExpressionSyntax>.EqualityMatch(InterpolatedStringExpressionSyntax original, InterpolatedStringExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="IsPatternExpression"/>.
    /// </summary>
    partial class IsPatternExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, IsPatternExpressionSyntax, IsPatternExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(IsPatternExpressionSyntax, IsPatternExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IsPatternExpressionSyntax, IsPatternExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(IsPatternExpressionSyntax, IsPatternExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(IsPatternExpressionSyntax, IsPatternExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(IsPatternExpressionSyntax original, IsPatternExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(IsPatternExpressionSyntax, IsPatternExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IsPatternExpressionSyntax, IsPatternExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(IsPatternExpressionSyntax original, IsPatternExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IsPatternExpressionSyntax, IsPatternExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(IsPatternExpressionSyntax original, IsPatternExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.IsKeyword, modified.IsKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Pattern, modified.Pattern, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IsPatternExpressionSyntax, IsPatternExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, IsPatternExpressionSyntax, IsPatternExpressionSyntax>.EqualityMatch(IsPatternExpressionSyntax original, IsPatternExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ThrowExpression"/>.
    /// </summary>
    partial class ThrowExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ThrowExpressionSyntax, ThrowExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ThrowExpressionSyntax, ThrowExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ThrowExpressionSyntax, ThrowExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ThrowExpressionSyntax, ThrowExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ThrowExpressionSyntax, ThrowExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ThrowExpressionSyntax original, ThrowExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ThrowExpressionSyntax, ThrowExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ThrowExpressionSyntax, ThrowExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ThrowExpressionSyntax original, ThrowExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ThrowExpressionSyntax, ThrowExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ThrowExpressionSyntax original, ThrowExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ThrowKeyword, modified.ThrowKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ThrowExpressionSyntax, ThrowExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ThrowExpressionSyntax, ThrowExpressionSyntax>.EqualityMatch(ThrowExpressionSyntax original, ThrowExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="PredefinedType"/>.
    /// </summary>
    partial class PredefinedTypeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, PredefinedTypeSyntax, PredefinedTypeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(PredefinedTypeSyntax, PredefinedTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PredefinedTypeSyntax, PredefinedTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(PredefinedTypeSyntax, PredefinedTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(PredefinedTypeSyntax, PredefinedTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(PredefinedTypeSyntax original, PredefinedTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(PredefinedTypeSyntax, PredefinedTypeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PredefinedTypeSyntax, PredefinedTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(PredefinedTypeSyntax original, PredefinedTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PredefinedTypeSyntax, PredefinedTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(PredefinedTypeSyntax original, PredefinedTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PredefinedTypeSyntax, PredefinedTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, PredefinedTypeSyntax, PredefinedTypeSyntax>.EqualityMatch(PredefinedTypeSyntax original, PredefinedTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ArrayType"/>.
    /// </summary>
    partial class ArrayTypeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ArrayTypeSyntax, ArrayTypeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ArrayTypeSyntax, ArrayTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArrayTypeSyntax, ArrayTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ArrayTypeSyntax, ArrayTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ArrayTypeSyntax, ArrayTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ArrayTypeSyntax original, ArrayTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ArrayTypeSyntax, ArrayTypeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArrayTypeSyntax, ArrayTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ArrayTypeSyntax original, ArrayTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArrayTypeSyntax, ArrayTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ArrayTypeSyntax original, ArrayTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ElementType, modified.ElementType, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.RankSpecifiers, modified.RankSpecifiers, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArrayTypeSyntax, ArrayTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ArrayTypeSyntax, ArrayTypeSyntax>.EqualityMatch(ArrayTypeSyntax original, ArrayTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="PointerType"/>.
    /// </summary>
    partial class PointerTypeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, PointerTypeSyntax, PointerTypeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(PointerTypeSyntax, PointerTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PointerTypeSyntax, PointerTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(PointerTypeSyntax, PointerTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(PointerTypeSyntax, PointerTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(PointerTypeSyntax original, PointerTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(PointerTypeSyntax, PointerTypeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(PointerTypeSyntax, PointerTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(PointerTypeSyntax original, PointerTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PointerTypeSyntax, PointerTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(PointerTypeSyntax original, PointerTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ElementType, modified.ElementType, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.AsteriskToken, modified.AsteriskToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(PointerTypeSyntax, PointerTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, PointerTypeSyntax, PointerTypeSyntax>.EqualityMatch(PointerTypeSyntax original, PointerTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="NullableType"/>.
    /// </summary>
    partial class NullableTypeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, NullableTypeSyntax, NullableTypeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(NullableTypeSyntax, NullableTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(NullableTypeSyntax, NullableTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(NullableTypeSyntax, NullableTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(NullableTypeSyntax, NullableTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(NullableTypeSyntax original, NullableTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(NullableTypeSyntax, NullableTypeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(NullableTypeSyntax, NullableTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(NullableTypeSyntax original, NullableTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(NullableTypeSyntax, NullableTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(NullableTypeSyntax original, NullableTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ElementType, modified.ElementType, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.QuestionToken, modified.QuestionToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(NullableTypeSyntax, NullableTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, NullableTypeSyntax, NullableTypeSyntax>.EqualityMatch(NullableTypeSyntax original, NullableTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TupleType"/>.
    /// </summary>
    partial class TupleTypeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TupleTypeSyntax, TupleTypeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TupleTypeSyntax, TupleTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TupleTypeSyntax, TupleTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TupleTypeSyntax, TupleTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TupleTypeSyntax, TupleTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TupleTypeSyntax original, TupleTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TupleTypeSyntax, TupleTypeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TupleTypeSyntax, TupleTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TupleTypeSyntax original, TupleTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TupleTypeSyntax, TupleTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TupleTypeSyntax original, TupleTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Elements, modified.Elements, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TupleTypeSyntax, TupleTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TupleTypeSyntax, TupleTypeSyntax>.EqualityMatch(TupleTypeSyntax original, TupleTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="OmittedTypeArgument"/>.
    /// </summary>
    partial class OmittedTypeArgumentServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, OmittedTypeArgumentSyntax, OmittedTypeArgumentSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(OmittedTypeArgumentSyntax, OmittedTypeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OmittedTypeArgumentSyntax, OmittedTypeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(OmittedTypeArgumentSyntax, OmittedTypeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(OmittedTypeArgumentSyntax, OmittedTypeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(OmittedTypeArgumentSyntax original, OmittedTypeArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(OmittedTypeArgumentSyntax, OmittedTypeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OmittedTypeArgumentSyntax, OmittedTypeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(OmittedTypeArgumentSyntax original, OmittedTypeArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OmittedTypeArgumentSyntax, OmittedTypeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(OmittedTypeArgumentSyntax original, OmittedTypeArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.OmittedTypeArgumentToken, modified.OmittedTypeArgumentToken, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OmittedTypeArgumentSyntax, OmittedTypeArgumentSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, OmittedTypeArgumentSyntax, OmittedTypeArgumentSyntax>.EqualityMatch(OmittedTypeArgumentSyntax original, OmittedTypeArgumentSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="RefType"/>.
    /// </summary>
    partial class RefTypeServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, RefTypeSyntax, RefTypeSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(RefTypeSyntax, RefTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(RefTypeSyntax, RefTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(RefTypeSyntax, RefTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(RefTypeSyntax, RefTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(RefTypeSyntax original, RefTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(RefTypeSyntax, RefTypeSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(RefTypeSyntax, RefTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(RefTypeSyntax original, RefTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(RefTypeSyntax, RefTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(RefTypeSyntax original, RefTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.RefKeyword, modified.RefKeyword, context)) &&
                ((original.ReadOnlyKeyword == null && modified.ReadOnlyKeyword == null) || (original.ReadOnlyKeyword != null && modified.ReadOnlyKeyword != null && this.LanguageServiceProvider.EqualityMatch(original.ReadOnlyKeyword, modified.ReadOnlyKeyword, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(RefTypeSyntax, RefTypeSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, RefTypeSyntax, RefTypeSyntax>.EqualityMatch(RefTypeSyntax original, RefTypeSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="QualifiedName"/>.
    /// </summary>
    partial class QualifiedNameServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, QualifiedNameSyntax, QualifiedNameSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(QualifiedNameSyntax, QualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(QualifiedNameSyntax, QualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(QualifiedNameSyntax, QualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(QualifiedNameSyntax, QualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(QualifiedNameSyntax original, QualifiedNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(QualifiedNameSyntax, QualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(QualifiedNameSyntax, QualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(QualifiedNameSyntax original, QualifiedNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(QualifiedNameSyntax, QualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(QualifiedNameSyntax original, QualifiedNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Left, modified.Left, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.DotToken, modified.DotToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Right, modified.Right, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(QualifiedNameSyntax, QualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, QualifiedNameSyntax, QualifiedNameSyntax>.EqualityMatch(QualifiedNameSyntax original, QualifiedNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AliasQualifiedName"/>.
    /// </summary>
    partial class AliasQualifiedNameServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AliasQualifiedNameSyntax, AliasQualifiedNameSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AliasQualifiedNameSyntax, AliasQualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AliasQualifiedNameSyntax, AliasQualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AliasQualifiedNameSyntax, AliasQualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AliasQualifiedNameSyntax, AliasQualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AliasQualifiedNameSyntax original, AliasQualifiedNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AliasQualifiedNameSyntax, AliasQualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AliasQualifiedNameSyntax, AliasQualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AliasQualifiedNameSyntax original, AliasQualifiedNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AliasQualifiedNameSyntax, AliasQualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AliasQualifiedNameSyntax original, AliasQualifiedNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Alias, modified.Alias, context)) &&
                ((original.ColonColonToken == null && modified.ColonColonToken == null) || (original.ColonColonToken != null && modified.ColonColonToken != null && this.LanguageServiceProvider.EqualityMatch(original.ColonColonToken, modified.ColonColonToken, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Name, modified.Name, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AliasQualifiedNameSyntax, AliasQualifiedNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AliasQualifiedNameSyntax, AliasQualifiedNameSyntax>.EqualityMatch(AliasQualifiedNameSyntax original, AliasQualifiedNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="IdentifierName"/>.
    /// </summary>
    partial class IdentifierNameServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, IdentifierNameSyntax, IdentifierNameSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(IdentifierNameSyntax, IdentifierNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IdentifierNameSyntax, IdentifierNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(IdentifierNameSyntax, IdentifierNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(IdentifierNameSyntax, IdentifierNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(IdentifierNameSyntax original, IdentifierNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(IdentifierNameSyntax, IdentifierNameSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IdentifierNameSyntax, IdentifierNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(IdentifierNameSyntax original, IdentifierNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IdentifierNameSyntax, IdentifierNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(IdentifierNameSyntax original, IdentifierNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IdentifierNameSyntax, IdentifierNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, IdentifierNameSyntax, IdentifierNameSyntax>.EqualityMatch(IdentifierNameSyntax original, IdentifierNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="GenericName"/>.
    /// </summary>
    partial class GenericNameServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, GenericNameSyntax, GenericNameSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(GenericNameSyntax, GenericNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(GenericNameSyntax, GenericNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(GenericNameSyntax, GenericNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(GenericNameSyntax, GenericNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(GenericNameSyntax original, GenericNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(GenericNameSyntax, GenericNameSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(GenericNameSyntax, GenericNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(GenericNameSyntax original, GenericNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(GenericNameSyntax, GenericNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(GenericNameSyntax original, GenericNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.TypeArgumentList, modified.TypeArgumentList, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(GenericNameSyntax, GenericNameSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, GenericNameSyntax, GenericNameSyntax>.EqualityMatch(GenericNameSyntax original, GenericNameSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ThisExpression"/>.
    /// </summary>
    partial class ThisExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ThisExpressionSyntax, ThisExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ThisExpressionSyntax, ThisExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ThisExpressionSyntax, ThisExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ThisExpressionSyntax, ThisExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ThisExpressionSyntax, ThisExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ThisExpressionSyntax original, ThisExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ThisExpressionSyntax, ThisExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ThisExpressionSyntax, ThisExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ThisExpressionSyntax original, ThisExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ThisExpressionSyntax, ThisExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ThisExpressionSyntax original, ThisExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Token, modified.Token, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ThisExpressionSyntax, ThisExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ThisExpressionSyntax, ThisExpressionSyntax>.EqualityMatch(ThisExpressionSyntax original, ThisExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="BaseExpression"/>.
    /// </summary>
    partial class BaseExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, BaseExpressionSyntax, BaseExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(BaseExpressionSyntax, BaseExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BaseExpressionSyntax, BaseExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(BaseExpressionSyntax, BaseExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(BaseExpressionSyntax, BaseExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(BaseExpressionSyntax original, BaseExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(BaseExpressionSyntax, BaseExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BaseExpressionSyntax, BaseExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(BaseExpressionSyntax original, BaseExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BaseExpressionSyntax, BaseExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(BaseExpressionSyntax original, BaseExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Token, modified.Token, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BaseExpressionSyntax, BaseExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, BaseExpressionSyntax, BaseExpressionSyntax>.EqualityMatch(BaseExpressionSyntax original, BaseExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="AnonymousMethodExpression"/>.
    /// </summary>
    partial class AnonymousMethodExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, AnonymousMethodExpressionSyntax, AnonymousMethodExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(AnonymousMethodExpressionSyntax, AnonymousMethodExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AnonymousMethodExpressionSyntax, AnonymousMethodExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(AnonymousMethodExpressionSyntax, AnonymousMethodExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(AnonymousMethodExpressionSyntax, AnonymousMethodExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(AnonymousMethodExpressionSyntax original, AnonymousMethodExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(AnonymousMethodExpressionSyntax, AnonymousMethodExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(AnonymousMethodExpressionSyntax, AnonymousMethodExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(AnonymousMethodExpressionSyntax original, AnonymousMethodExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AnonymousMethodExpressionSyntax, AnonymousMethodExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(AnonymousMethodExpressionSyntax original, AnonymousMethodExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (((original.AsyncKeyword == null && modified.AsyncKeyword == null) || (original.AsyncKeyword != null && modified.AsyncKeyword != null && this.LanguageServiceProvider.EqualityMatch(original.AsyncKeyword, modified.AsyncKeyword, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.DelegateKeyword, modified.DelegateKeyword, context)) &&
                ((original.ParameterList == null && modified.ParameterList == null) || (original.ParameterList != null && modified.ParameterList != null && this.LanguageServiceProvider.EqualityMatch(original.ParameterList, modified.ParameterList, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(AnonymousMethodExpressionSyntax, AnonymousMethodExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, AnonymousMethodExpressionSyntax, AnonymousMethodExpressionSyntax>.EqualityMatch(AnonymousMethodExpressionSyntax original, AnonymousMethodExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="SimpleLambdaExpression"/>.
    /// </summary>
    partial class SimpleLambdaExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, SimpleLambdaExpressionSyntax, SimpleLambdaExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(SimpleLambdaExpressionSyntax, SimpleLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SimpleLambdaExpressionSyntax, SimpleLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(SimpleLambdaExpressionSyntax, SimpleLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(SimpleLambdaExpressionSyntax, SimpleLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(SimpleLambdaExpressionSyntax original, SimpleLambdaExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(SimpleLambdaExpressionSyntax, SimpleLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SimpleLambdaExpressionSyntax, SimpleLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(SimpleLambdaExpressionSyntax original, SimpleLambdaExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SimpleLambdaExpressionSyntax, SimpleLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(SimpleLambdaExpressionSyntax original, SimpleLambdaExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (((original.AsyncKeyword == null && modified.AsyncKeyword == null) || (original.AsyncKeyword != null && modified.AsyncKeyword != null && this.LanguageServiceProvider.EqualityMatch(original.AsyncKeyword, modified.AsyncKeyword, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Parameter, modified.Parameter, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ArrowToken, modified.ArrowToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SimpleLambdaExpressionSyntax, SimpleLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, SimpleLambdaExpressionSyntax, SimpleLambdaExpressionSyntax>.EqualityMatch(SimpleLambdaExpressionSyntax original, SimpleLambdaExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ParenthesizedLambdaExpression"/>.
    /// </summary>
    partial class ParenthesizedLambdaExpressionServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ParenthesizedLambdaExpressionSyntax, ParenthesizedLambdaExpressionSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ParenthesizedLambdaExpressionSyntax, ParenthesizedLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ParenthesizedLambdaExpressionSyntax, ParenthesizedLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ParenthesizedLambdaExpressionSyntax, ParenthesizedLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ParenthesizedLambdaExpressionSyntax, ParenthesizedLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ParenthesizedLambdaExpressionSyntax original, ParenthesizedLambdaExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ParenthesizedLambdaExpressionSyntax, ParenthesizedLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ParenthesizedLambdaExpressionSyntax, ParenthesizedLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ParenthesizedLambdaExpressionSyntax original, ParenthesizedLambdaExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ParenthesizedLambdaExpressionSyntax, ParenthesizedLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ParenthesizedLambdaExpressionSyntax original, ParenthesizedLambdaExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (((original.AsyncKeyword == null && modified.AsyncKeyword == null) || (original.AsyncKeyword != null && modified.AsyncKeyword != null && this.LanguageServiceProvider.EqualityMatch(original.AsyncKeyword, modified.AsyncKeyword, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ParameterList, modified.ParameterList, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ArrowToken, modified.ArrowToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ParenthesizedLambdaExpressionSyntax, ParenthesizedLambdaExpressionSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ParenthesizedLambdaExpressionSyntax, ParenthesizedLambdaExpressionSyntax>.EqualityMatch(ParenthesizedLambdaExpressionSyntax original, ParenthesizedLambdaExpressionSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ArgumentList"/>.
    /// </summary>
    partial class ArgumentListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ArgumentListSyntax, ArgumentListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ArgumentListSyntax, ArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArgumentListSyntax, ArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ArgumentListSyntax, ArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ArgumentListSyntax, ArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ArgumentListSyntax original, ArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ArgumentListSyntax, ArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ArgumentListSyntax, ArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ArgumentListSyntax original, ArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArgumentListSyntax, ArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ArgumentListSyntax original, ArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Arguments, modified.Arguments, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ArgumentListSyntax, ArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ArgumentListSyntax, ArgumentListSyntax>.EqualityMatch(ArgumentListSyntax original, ArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="BracketedArgumentList"/>.
    /// </summary>
    partial class BracketedArgumentListServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, BracketedArgumentListSyntax, BracketedArgumentListSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(BracketedArgumentListSyntax, BracketedArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BracketedArgumentListSyntax, BracketedArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(BracketedArgumentListSyntax, BracketedArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(BracketedArgumentListSyntax, BracketedArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(BracketedArgumentListSyntax original, BracketedArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(BracketedArgumentListSyntax, BracketedArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BracketedArgumentListSyntax, BracketedArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(BracketedArgumentListSyntax original, BracketedArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BracketedArgumentListSyntax, BracketedArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(BracketedArgumentListSyntax original, BracketedArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenBracketToken, modified.OpenBracketToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Arguments, modified.Arguments, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBracketToken, modified.CloseBracketToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BracketedArgumentListSyntax, BracketedArgumentListSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, BracketedArgumentListSyntax, BracketedArgumentListSyntax>.EqualityMatch(BracketedArgumentListSyntax original, BracketedArgumentListSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="FromClause"/>.
    /// </summary>
    partial class FromClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, FromClauseSyntax, FromClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(FromClauseSyntax, FromClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(FromClauseSyntax, FromClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(FromClauseSyntax, FromClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(FromClauseSyntax, FromClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(FromClauseSyntax original, FromClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(FromClauseSyntax, FromClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(FromClauseSyntax, FromClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(FromClauseSyntax original, FromClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(FromClauseSyntax, FromClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(FromClauseSyntax original, FromClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.FromKeyword, modified.FromKeyword, context)) &&
                ((original.Type == null && modified.Type == null) || (original.Type != null && modified.Type != null && this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.InKeyword, modified.InKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(FromClauseSyntax, FromClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, FromClauseSyntax, FromClauseSyntax>.EqualityMatch(FromClauseSyntax original, FromClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="LetClause"/>.
    /// </summary>
    partial class LetClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, LetClauseSyntax, LetClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(LetClauseSyntax, LetClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LetClauseSyntax, LetClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(LetClauseSyntax, LetClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(LetClauseSyntax, LetClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(LetClauseSyntax original, LetClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(LetClauseSyntax, LetClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LetClauseSyntax, LetClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(LetClauseSyntax original, LetClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LetClauseSyntax, LetClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(LetClauseSyntax original, LetClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.LetKeyword, modified.LetKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EqualsToken, modified.EqualsToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LetClauseSyntax, LetClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, LetClauseSyntax, LetClauseSyntax>.EqualityMatch(LetClauseSyntax original, LetClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="JoinClause"/>.
    /// </summary>
    partial class JoinClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, JoinClauseSyntax, JoinClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(JoinClauseSyntax, JoinClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(JoinClauseSyntax, JoinClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(JoinClauseSyntax, JoinClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(JoinClauseSyntax, JoinClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(JoinClauseSyntax original, JoinClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(JoinClauseSyntax, JoinClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(JoinClauseSyntax, JoinClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(JoinClauseSyntax original, JoinClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(JoinClauseSyntax, JoinClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(JoinClauseSyntax original, JoinClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.JoinKeyword, modified.JoinKeyword, context)) &&
                ((original.Type == null && modified.Type == null) || (original.Type != null && modified.Type != null && this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.InKeyword, modified.InKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.InExpression, modified.InExpression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OnKeyword, modified.OnKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.LeftExpression, modified.LeftExpression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.EqualsKeyword, modified.EqualsKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.RightExpression, modified.RightExpression, context)) &&
                ((original.Into == null && modified.Into == null) || (original.Into != null && modified.Into != null && this.LanguageServiceProvider.EqualityMatch(original.Into, modified.Into, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(JoinClauseSyntax, JoinClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, JoinClauseSyntax, JoinClauseSyntax>.EqualityMatch(JoinClauseSyntax original, JoinClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="WhereClause"/>.
    /// </summary>
    partial class WhereClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, WhereClauseSyntax, WhereClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(WhereClauseSyntax, WhereClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(WhereClauseSyntax, WhereClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(WhereClauseSyntax, WhereClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(WhereClauseSyntax, WhereClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(WhereClauseSyntax original, WhereClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(WhereClauseSyntax, WhereClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(WhereClauseSyntax, WhereClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(WhereClauseSyntax original, WhereClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(WhereClauseSyntax, WhereClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(WhereClauseSyntax original, WhereClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.WhereKeyword, modified.WhereKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Condition, modified.Condition, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(WhereClauseSyntax, WhereClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, WhereClauseSyntax, WhereClauseSyntax>.EqualityMatch(WhereClauseSyntax original, WhereClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="OrderByClause"/>.
    /// </summary>
    partial class OrderByClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, OrderByClauseSyntax, OrderByClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(OrderByClauseSyntax, OrderByClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OrderByClauseSyntax, OrderByClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(OrderByClauseSyntax, OrderByClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(OrderByClauseSyntax, OrderByClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(OrderByClauseSyntax original, OrderByClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(OrderByClauseSyntax, OrderByClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(OrderByClauseSyntax, OrderByClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(OrderByClauseSyntax original, OrderByClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OrderByClauseSyntax, OrderByClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(OrderByClauseSyntax original, OrderByClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OrderByKeyword, modified.OrderByKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Orderings, modified.Orderings, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(OrderByClauseSyntax, OrderByClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, OrderByClauseSyntax, OrderByClauseSyntax>.EqualityMatch(OrderByClauseSyntax original, OrderByClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="SelectClause"/>.
    /// </summary>
    partial class SelectClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, SelectClauseSyntax, SelectClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(SelectClauseSyntax, SelectClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SelectClauseSyntax, SelectClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(SelectClauseSyntax, SelectClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(SelectClauseSyntax, SelectClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(SelectClauseSyntax original, SelectClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(SelectClauseSyntax, SelectClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SelectClauseSyntax, SelectClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(SelectClauseSyntax original, SelectClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SelectClauseSyntax, SelectClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(SelectClauseSyntax original, SelectClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.SelectKeyword, modified.SelectKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SelectClauseSyntax, SelectClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, SelectClauseSyntax, SelectClauseSyntax>.EqualityMatch(SelectClauseSyntax original, SelectClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="GroupClause"/>.
    /// </summary>
    partial class GroupClauseServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, GroupClauseSyntax, GroupClauseSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(GroupClauseSyntax, GroupClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(GroupClauseSyntax, GroupClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(GroupClauseSyntax, GroupClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(GroupClauseSyntax, GroupClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(GroupClauseSyntax original, GroupClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(GroupClauseSyntax, GroupClauseSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(GroupClauseSyntax, GroupClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(GroupClauseSyntax original, GroupClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(GroupClauseSyntax, GroupClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(GroupClauseSyntax original, GroupClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.GroupKeyword, modified.GroupKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.GroupExpression, modified.GroupExpression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ByKeyword, modified.ByKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ByExpression, modified.ByExpression, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(GroupClauseSyntax, GroupClauseSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, GroupClauseSyntax, GroupClauseSyntax>.EqualityMatch(GroupClauseSyntax original, GroupClauseSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="DeclarationPattern"/>.
    /// </summary>
    partial class DeclarationPatternServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, DeclarationPatternSyntax, DeclarationPatternSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(DeclarationPatternSyntax, DeclarationPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DeclarationPatternSyntax, DeclarationPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(DeclarationPatternSyntax, DeclarationPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(DeclarationPatternSyntax, DeclarationPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(DeclarationPatternSyntax original, DeclarationPatternSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(DeclarationPatternSyntax, DeclarationPatternSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DeclarationPatternSyntax, DeclarationPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(DeclarationPatternSyntax original, DeclarationPatternSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DeclarationPatternSyntax, DeclarationPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(DeclarationPatternSyntax original, DeclarationPatternSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Designation, modified.Designation, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DeclarationPatternSyntax, DeclarationPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, DeclarationPatternSyntax, DeclarationPatternSyntax>.EqualityMatch(DeclarationPatternSyntax original, DeclarationPatternSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ConstantPattern"/>.
    /// </summary>
    partial class ConstantPatternServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ConstantPatternSyntax, ConstantPatternSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ConstantPatternSyntax, ConstantPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConstantPatternSyntax, ConstantPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ConstantPatternSyntax, ConstantPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ConstantPatternSyntax, ConstantPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ConstantPatternSyntax original, ConstantPatternSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ConstantPatternSyntax, ConstantPatternSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ConstantPatternSyntax, ConstantPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ConstantPatternSyntax original, ConstantPatternSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConstantPatternSyntax, ConstantPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ConstantPatternSyntax original, ConstantPatternSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ConstantPatternSyntax, ConstantPatternSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ConstantPatternSyntax, ConstantPatternSyntax>.EqualityMatch(ConstantPatternSyntax original, ConstantPatternSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="InterpolatedStringText"/>.
    /// </summary>
    partial class InterpolatedStringTextServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, InterpolatedStringTextSyntax, InterpolatedStringTextSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(InterpolatedStringTextSyntax, InterpolatedStringTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterpolatedStringTextSyntax, InterpolatedStringTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(InterpolatedStringTextSyntax, InterpolatedStringTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(InterpolatedStringTextSyntax, InterpolatedStringTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(InterpolatedStringTextSyntax original, InterpolatedStringTextSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(InterpolatedStringTextSyntax, InterpolatedStringTextSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterpolatedStringTextSyntax, InterpolatedStringTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(InterpolatedStringTextSyntax original, InterpolatedStringTextSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterpolatedStringTextSyntax, InterpolatedStringTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(InterpolatedStringTextSyntax original, InterpolatedStringTextSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.TextToken, modified.TextToken, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterpolatedStringTextSyntax, InterpolatedStringTextSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, InterpolatedStringTextSyntax, InterpolatedStringTextSyntax>.EqualityMatch(InterpolatedStringTextSyntax original, InterpolatedStringTextSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="Interpolation"/>.
    /// </summary>
    partial class InterpolationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, InterpolationSyntax, InterpolationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(InterpolationSyntax, InterpolationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterpolationSyntax, InterpolationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(InterpolationSyntax, InterpolationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(InterpolationSyntax, InterpolationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(InterpolationSyntax original, InterpolationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(InterpolationSyntax, InterpolationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(InterpolationSyntax, InterpolationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(InterpolationSyntax original, InterpolationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterpolationSyntax, InterpolationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(InterpolationSyntax original, InterpolationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                ((original.AlignmentClause == null && modified.AlignmentClause == null) || (original.AlignmentClause != null && modified.AlignmentClause != null && this.LanguageServiceProvider.EqualityMatch(original.AlignmentClause, modified.AlignmentClause, context))) &&
                ((original.FormatClause == null && modified.FormatClause == null) || (original.FormatClause != null && modified.FormatClause != null && this.LanguageServiceProvider.EqualityMatch(original.FormatClause, modified.FormatClause, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(InterpolationSyntax, InterpolationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, InterpolationSyntax, InterpolationSyntax>.EqualityMatch(InterpolationSyntax original, InterpolationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="Block"/>.
    /// </summary>
    partial class BlockServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, BlockSyntax, BlockSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(BlockSyntax, BlockSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BlockSyntax, BlockSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(BlockSyntax, BlockSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(BlockSyntax, BlockSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(BlockSyntax original, BlockSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(BlockSyntax, BlockSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BlockSyntax, BlockSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(BlockSyntax original, BlockSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BlockSyntax, BlockSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(BlockSyntax original, BlockSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statements, modified.Statements, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BlockSyntax, BlockSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, BlockSyntax, BlockSyntax>.EqualityMatch(BlockSyntax original, BlockSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="LocalFunctionStatement"/>.
    /// </summary>
    partial class LocalFunctionStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, LocalFunctionStatementSyntax, LocalFunctionStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(LocalFunctionStatementSyntax, LocalFunctionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LocalFunctionStatementSyntax, LocalFunctionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(LocalFunctionStatementSyntax, LocalFunctionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(LocalFunctionStatementSyntax, LocalFunctionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(LocalFunctionStatementSyntax original, LocalFunctionStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(LocalFunctionStatementSyntax, LocalFunctionStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LocalFunctionStatementSyntax, LocalFunctionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(LocalFunctionStatementSyntax original, LocalFunctionStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LocalFunctionStatementSyntax, LocalFunctionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(LocalFunctionStatementSyntax original, LocalFunctionStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ReturnType, modified.ReturnType, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                ((original.TypeParameterList == null && modified.TypeParameterList == null) || (original.TypeParameterList != null && modified.TypeParameterList != null && this.LanguageServiceProvider.EqualityMatch(original.TypeParameterList, modified.TypeParameterList, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ParameterList, modified.ParameterList, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ConstraintClauses, modified.ConstraintClauses, context)) &&
                ((original.Body == null && modified.Body == null) || (original.Body != null && modified.Body != null && this.LanguageServiceProvider.EqualityMatch(original.Body, modified.Body, context))) &&
                ((original.ExpressionBody == null && modified.ExpressionBody == null) || (original.ExpressionBody != null && modified.ExpressionBody != null && this.LanguageServiceProvider.EqualityMatch(original.ExpressionBody, modified.ExpressionBody, context))) &&
                ((original.SemicolonToken == null && modified.SemicolonToken == null) || (original.SemicolonToken != null && modified.SemicolonToken != null && this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LocalFunctionStatementSyntax, LocalFunctionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, LocalFunctionStatementSyntax, LocalFunctionStatementSyntax>.EqualityMatch(LocalFunctionStatementSyntax original, LocalFunctionStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="LocalDeclarationStatement"/>.
    /// </summary>
    partial class LocalDeclarationStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, LocalDeclarationStatementSyntax, LocalDeclarationStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(LocalDeclarationStatementSyntax, LocalDeclarationStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LocalDeclarationStatementSyntax, LocalDeclarationStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(LocalDeclarationStatementSyntax, LocalDeclarationStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(LocalDeclarationStatementSyntax, LocalDeclarationStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(LocalDeclarationStatementSyntax original, LocalDeclarationStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(LocalDeclarationStatementSyntax, LocalDeclarationStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LocalDeclarationStatementSyntax, LocalDeclarationStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(LocalDeclarationStatementSyntax original, LocalDeclarationStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LocalDeclarationStatementSyntax, LocalDeclarationStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(LocalDeclarationStatementSyntax original, LocalDeclarationStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Modifiers, modified.Modifiers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Declaration, modified.Declaration, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LocalDeclarationStatementSyntax, LocalDeclarationStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, LocalDeclarationStatementSyntax, LocalDeclarationStatementSyntax>.EqualityMatch(LocalDeclarationStatementSyntax original, LocalDeclarationStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ExpressionStatement"/>.
    /// </summary>
    partial class ExpressionStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ExpressionStatementSyntax, ExpressionStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ExpressionStatementSyntax, ExpressionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ExpressionStatementSyntax, ExpressionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ExpressionStatementSyntax, ExpressionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ExpressionStatementSyntax, ExpressionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ExpressionStatementSyntax original, ExpressionStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ExpressionStatementSyntax, ExpressionStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ExpressionStatementSyntax, ExpressionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ExpressionStatementSyntax original, ExpressionStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ExpressionStatementSyntax, ExpressionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ExpressionStatementSyntax original, ExpressionStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ExpressionStatementSyntax, ExpressionStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ExpressionStatementSyntax, ExpressionStatementSyntax>.EqualityMatch(ExpressionStatementSyntax original, ExpressionStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="EmptyStatement"/>.
    /// </summary>
    partial class EmptyStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, EmptyStatementSyntax, EmptyStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(EmptyStatementSyntax, EmptyStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EmptyStatementSyntax, EmptyStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(EmptyStatementSyntax, EmptyStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(EmptyStatementSyntax, EmptyStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(EmptyStatementSyntax original, EmptyStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(EmptyStatementSyntax, EmptyStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(EmptyStatementSyntax, EmptyStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(EmptyStatementSyntax original, EmptyStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EmptyStatementSyntax, EmptyStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(EmptyStatementSyntax original, EmptyStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(EmptyStatementSyntax, EmptyStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, EmptyStatementSyntax, EmptyStatementSyntax>.EqualityMatch(EmptyStatementSyntax original, EmptyStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="LabeledStatement"/>.
    /// </summary>
    partial class LabeledStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, LabeledStatementSyntax, LabeledStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(LabeledStatementSyntax, LabeledStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LabeledStatementSyntax, LabeledStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(LabeledStatementSyntax, LabeledStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(LabeledStatementSyntax, LabeledStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(LabeledStatementSyntax original, LabeledStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(LabeledStatementSyntax, LabeledStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LabeledStatementSyntax, LabeledStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(LabeledStatementSyntax original, LabeledStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LabeledStatementSyntax, LabeledStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(LabeledStatementSyntax original, LabeledStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LabeledStatementSyntax, LabeledStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, LabeledStatementSyntax, LabeledStatementSyntax>.EqualityMatch(LabeledStatementSyntax original, LabeledStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="GotoStatement"/>.
    /// </summary>
    partial class GotoStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, GotoStatementSyntax, GotoStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(GotoStatementSyntax, GotoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(GotoStatementSyntax, GotoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(GotoStatementSyntax, GotoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(GotoStatementSyntax, GotoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(GotoStatementSyntax original, GotoStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(GotoStatementSyntax, GotoStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(GotoStatementSyntax, GotoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(GotoStatementSyntax original, GotoStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(GotoStatementSyntax, GotoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(GotoStatementSyntax original, GotoStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.GotoKeyword, modified.GotoKeyword, context)) &&
                ((original.CaseOrDefaultKeyword == null && modified.CaseOrDefaultKeyword == null) || (original.CaseOrDefaultKeyword != null && modified.CaseOrDefaultKeyword != null && this.LanguageServiceProvider.EqualityMatch(original.CaseOrDefaultKeyword, modified.CaseOrDefaultKeyword, context))) &&
                ((original.Expression == null && modified.Expression == null) || (original.Expression != null && modified.Expression != null && this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(GotoStatementSyntax, GotoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, GotoStatementSyntax, GotoStatementSyntax>.EqualityMatch(GotoStatementSyntax original, GotoStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="BreakStatement"/>.
    /// </summary>
    partial class BreakStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, BreakStatementSyntax, BreakStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(BreakStatementSyntax, BreakStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BreakStatementSyntax, BreakStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(BreakStatementSyntax, BreakStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(BreakStatementSyntax, BreakStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(BreakStatementSyntax original, BreakStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(BreakStatementSyntax, BreakStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(BreakStatementSyntax, BreakStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(BreakStatementSyntax original, BreakStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BreakStatementSyntax, BreakStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(BreakStatementSyntax original, BreakStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.BreakKeyword, modified.BreakKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(BreakStatementSyntax, BreakStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, BreakStatementSyntax, BreakStatementSyntax>.EqualityMatch(BreakStatementSyntax original, BreakStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ContinueStatement"/>.
    /// </summary>
    partial class ContinueStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ContinueStatementSyntax, ContinueStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ContinueStatementSyntax, ContinueStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ContinueStatementSyntax, ContinueStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ContinueStatementSyntax, ContinueStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ContinueStatementSyntax, ContinueStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ContinueStatementSyntax original, ContinueStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ContinueStatementSyntax, ContinueStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ContinueStatementSyntax, ContinueStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ContinueStatementSyntax original, ContinueStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ContinueStatementSyntax, ContinueStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ContinueStatementSyntax original, ContinueStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ContinueKeyword, modified.ContinueKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ContinueStatementSyntax, ContinueStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ContinueStatementSyntax, ContinueStatementSyntax>.EqualityMatch(ContinueStatementSyntax original, ContinueStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ReturnStatement"/>.
    /// </summary>
    partial class ReturnStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ReturnStatementSyntax, ReturnStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ReturnStatementSyntax, ReturnStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ReturnStatementSyntax, ReturnStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ReturnStatementSyntax, ReturnStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ReturnStatementSyntax, ReturnStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ReturnStatementSyntax original, ReturnStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ReturnStatementSyntax, ReturnStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ReturnStatementSyntax, ReturnStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ReturnStatementSyntax original, ReturnStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ReturnStatementSyntax, ReturnStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ReturnStatementSyntax original, ReturnStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ReturnKeyword, modified.ReturnKeyword, context)) &&
                ((original.Expression == null && modified.Expression == null) || (original.Expression != null && modified.Expression != null && this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ReturnStatementSyntax, ReturnStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ReturnStatementSyntax, ReturnStatementSyntax>.EqualityMatch(ReturnStatementSyntax original, ReturnStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ThrowStatement"/>.
    /// </summary>
    partial class ThrowStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ThrowStatementSyntax, ThrowStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ThrowStatementSyntax, ThrowStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ThrowStatementSyntax, ThrowStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ThrowStatementSyntax, ThrowStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ThrowStatementSyntax, ThrowStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ThrowStatementSyntax original, ThrowStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ThrowStatementSyntax, ThrowStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ThrowStatementSyntax, ThrowStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ThrowStatementSyntax original, ThrowStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ThrowStatementSyntax, ThrowStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ThrowStatementSyntax original, ThrowStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ThrowKeyword, modified.ThrowKeyword, context)) &&
                ((original.Expression == null && modified.Expression == null) || (original.Expression != null && modified.Expression != null && this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ThrowStatementSyntax, ThrowStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ThrowStatementSyntax, ThrowStatementSyntax>.EqualityMatch(ThrowStatementSyntax original, ThrowStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="YieldStatement"/>.
    /// </summary>
    partial class YieldStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, YieldStatementSyntax, YieldStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(YieldStatementSyntax, YieldStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(YieldStatementSyntax, YieldStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(YieldStatementSyntax, YieldStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(YieldStatementSyntax, YieldStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(YieldStatementSyntax original, YieldStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(YieldStatementSyntax, YieldStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(YieldStatementSyntax, YieldStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(YieldStatementSyntax original, YieldStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(YieldStatementSyntax, YieldStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(YieldStatementSyntax original, YieldStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.YieldKeyword, modified.YieldKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ReturnOrBreakKeyword, modified.ReturnOrBreakKeyword, context)) &&
                ((original.Expression == null && modified.Expression == null) || (original.Expression != null && modified.Expression != null && this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(YieldStatementSyntax, YieldStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, YieldStatementSyntax, YieldStatementSyntax>.EqualityMatch(YieldStatementSyntax original, YieldStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="WhileStatement"/>.
    /// </summary>
    partial class WhileStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, WhileStatementSyntax, WhileStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(WhileStatementSyntax, WhileStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(WhileStatementSyntax, WhileStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(WhileStatementSyntax, WhileStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(WhileStatementSyntax, WhileStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(WhileStatementSyntax original, WhileStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(WhileStatementSyntax, WhileStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(WhileStatementSyntax, WhileStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(WhileStatementSyntax original, WhileStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(WhileStatementSyntax, WhileStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(WhileStatementSyntax original, WhileStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.WhileKeyword, modified.WhileKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Condition, modified.Condition, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(WhileStatementSyntax, WhileStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, WhileStatementSyntax, WhileStatementSyntax>.EqualityMatch(WhileStatementSyntax original, WhileStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="DoStatement"/>.
    /// </summary>
    partial class DoStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, DoStatementSyntax, DoStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(DoStatementSyntax, DoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DoStatementSyntax, DoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(DoStatementSyntax, DoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(DoStatementSyntax, DoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(DoStatementSyntax original, DoStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(DoStatementSyntax, DoStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DoStatementSyntax, DoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(DoStatementSyntax original, DoStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DoStatementSyntax, DoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(DoStatementSyntax original, DoStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.DoKeyword, modified.DoKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.WhileKeyword, modified.WhileKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Condition, modified.Condition, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SemicolonToken, modified.SemicolonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DoStatementSyntax, DoStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, DoStatementSyntax, DoStatementSyntax>.EqualityMatch(DoStatementSyntax original, DoStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ForStatement"/>.
    /// </summary>
    partial class ForStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ForStatementSyntax, ForStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ForStatementSyntax, ForStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ForStatementSyntax, ForStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ForStatementSyntax, ForStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ForStatementSyntax, ForStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ForStatementSyntax original, ForStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ForStatementSyntax, ForStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ForStatementSyntax, ForStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ForStatementSyntax original, ForStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ForStatementSyntax, ForStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ForStatementSyntax original, ForStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ForKeyword, modified.ForKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                ((original.Declaration == null && modified.Declaration == null) || (original.Declaration != null && modified.Declaration != null && this.LanguageServiceProvider.EqualityMatch(original.Declaration, modified.Declaration, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Initializers, modified.Initializers, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.FirstSemicolonToken, modified.FirstSemicolonToken, context)) &&
                ((original.Condition == null && modified.Condition == null) || (original.Condition != null && modified.Condition != null && this.LanguageServiceProvider.EqualityMatch(original.Condition, modified.Condition, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.SecondSemicolonToken, modified.SecondSemicolonToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Incrementors, modified.Incrementors, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ForStatementSyntax, ForStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ForStatementSyntax, ForStatementSyntax>.EqualityMatch(ForStatementSyntax original, ForStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="UsingStatement"/>.
    /// </summary>
    partial class UsingStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, UsingStatementSyntax, UsingStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(UsingStatementSyntax, UsingStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(UsingStatementSyntax, UsingStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(UsingStatementSyntax, UsingStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(UsingStatementSyntax, UsingStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(UsingStatementSyntax original, UsingStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(UsingStatementSyntax, UsingStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(UsingStatementSyntax, UsingStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(UsingStatementSyntax original, UsingStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(UsingStatementSyntax, UsingStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(UsingStatementSyntax original, UsingStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.UsingKeyword, modified.UsingKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                ((original.Declaration == null && modified.Declaration == null) || (original.Declaration != null && modified.Declaration != null && this.LanguageServiceProvider.EqualityMatch(original.Declaration, modified.Declaration, context))) &&
                ((original.Expression == null && modified.Expression == null) || (original.Expression != null && modified.Expression != null && this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(UsingStatementSyntax, UsingStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, UsingStatementSyntax, UsingStatementSyntax>.EqualityMatch(UsingStatementSyntax original, UsingStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="FixedStatement"/>.
    /// </summary>
    partial class FixedStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, FixedStatementSyntax, FixedStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(FixedStatementSyntax, FixedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(FixedStatementSyntax, FixedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(FixedStatementSyntax, FixedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(FixedStatementSyntax, FixedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(FixedStatementSyntax original, FixedStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(FixedStatementSyntax, FixedStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(FixedStatementSyntax, FixedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(FixedStatementSyntax original, FixedStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(FixedStatementSyntax, FixedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(FixedStatementSyntax original, FixedStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.FixedKeyword, modified.FixedKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Declaration, modified.Declaration, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(FixedStatementSyntax, FixedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, FixedStatementSyntax, FixedStatementSyntax>.EqualityMatch(FixedStatementSyntax original, FixedStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CheckedStatement"/>.
    /// </summary>
    partial class CheckedStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CheckedStatementSyntax, CheckedStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CheckedStatementSyntax, CheckedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CheckedStatementSyntax, CheckedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CheckedStatementSyntax, CheckedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CheckedStatementSyntax, CheckedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CheckedStatementSyntax original, CheckedStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CheckedStatementSyntax, CheckedStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CheckedStatementSyntax, CheckedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CheckedStatementSyntax original, CheckedStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CheckedStatementSyntax, CheckedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CheckedStatementSyntax original, CheckedStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Block, modified.Block, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CheckedStatementSyntax, CheckedStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CheckedStatementSyntax, CheckedStatementSyntax>.EqualityMatch(CheckedStatementSyntax original, CheckedStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="UnsafeStatement"/>.
    /// </summary>
    partial class UnsafeStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, UnsafeStatementSyntax, UnsafeStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(UnsafeStatementSyntax, UnsafeStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(UnsafeStatementSyntax, UnsafeStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(UnsafeStatementSyntax, UnsafeStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(UnsafeStatementSyntax, UnsafeStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(UnsafeStatementSyntax original, UnsafeStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(UnsafeStatementSyntax, UnsafeStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(UnsafeStatementSyntax, UnsafeStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(UnsafeStatementSyntax original, UnsafeStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(UnsafeStatementSyntax, UnsafeStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(UnsafeStatementSyntax original, UnsafeStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.UnsafeKeyword, modified.UnsafeKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Block, modified.Block, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(UnsafeStatementSyntax, UnsafeStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, UnsafeStatementSyntax, UnsafeStatementSyntax>.EqualityMatch(UnsafeStatementSyntax original, UnsafeStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="LockStatement"/>.
    /// </summary>
    partial class LockStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, LockStatementSyntax, LockStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(LockStatementSyntax, LockStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LockStatementSyntax, LockStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(LockStatementSyntax, LockStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(LockStatementSyntax, LockStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(LockStatementSyntax original, LockStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(LockStatementSyntax, LockStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(LockStatementSyntax, LockStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(LockStatementSyntax original, LockStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LockStatementSyntax, LockStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(LockStatementSyntax original, LockStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.LockKeyword, modified.LockKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(LockStatementSyntax, LockStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, LockStatementSyntax, LockStatementSyntax>.EqualityMatch(LockStatementSyntax original, LockStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="IfStatement"/>.
    /// </summary>
    partial class IfStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, IfStatementSyntax, IfStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(IfStatementSyntax, IfStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IfStatementSyntax, IfStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(IfStatementSyntax, IfStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(IfStatementSyntax, IfStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(IfStatementSyntax original, IfStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(IfStatementSyntax, IfStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(IfStatementSyntax, IfStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(IfStatementSyntax original, IfStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IfStatementSyntax, IfStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(IfStatementSyntax original, IfStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.IfKeyword, modified.IfKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Condition, modified.Condition, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)) &&
                ((original.Else == null && modified.Else == null) || (original.Else != null && modified.Else != null && this.LanguageServiceProvider.EqualityMatch(original.Else, modified.Else, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(IfStatementSyntax, IfStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, IfStatementSyntax, IfStatementSyntax>.EqualityMatch(IfStatementSyntax original, IfStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="SwitchStatement"/>.
    /// </summary>
    partial class SwitchStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, SwitchStatementSyntax, SwitchStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(SwitchStatementSyntax, SwitchStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SwitchStatementSyntax, SwitchStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(SwitchStatementSyntax, SwitchStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(SwitchStatementSyntax, SwitchStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(SwitchStatementSyntax original, SwitchStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(SwitchStatementSyntax, SwitchStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SwitchStatementSyntax, SwitchStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(SwitchStatementSyntax original, SwitchStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SwitchStatementSyntax, SwitchStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(SwitchStatementSyntax original, SwitchStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.SwitchKeyword, modified.SwitchKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenBraceToken, modified.OpenBraceToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Sections, modified.Sections, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseBraceToken, modified.CloseBraceToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SwitchStatementSyntax, SwitchStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, SwitchStatementSyntax, SwitchStatementSyntax>.EqualityMatch(SwitchStatementSyntax original, SwitchStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="TryStatement"/>.
    /// </summary>
    partial class TryStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, TryStatementSyntax, TryStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(TryStatementSyntax, TryStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TryStatementSyntax, TryStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(TryStatementSyntax, TryStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(TryStatementSyntax, TryStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(TryStatementSyntax original, TryStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(TryStatementSyntax, TryStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(TryStatementSyntax, TryStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(TryStatementSyntax original, TryStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TryStatementSyntax, TryStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(TryStatementSyntax original, TryStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.TryKeyword, modified.TryKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Block, modified.Block, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Catches, modified.Catches, context)) &&
                ((original.Finally == null && modified.Finally == null) || (original.Finally != null && modified.Finally != null && this.LanguageServiceProvider.EqualityMatch(original.Finally, modified.Finally, context))))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(TryStatementSyntax, TryStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, TryStatementSyntax, TryStatementSyntax>.EqualityMatch(TryStatementSyntax original, TryStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ForEachStatement"/>.
    /// </summary>
    partial class ForEachStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ForEachStatementSyntax, ForEachStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ForEachStatementSyntax, ForEachStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ForEachStatementSyntax, ForEachStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ForEachStatementSyntax, ForEachStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ForEachStatementSyntax, ForEachStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ForEachStatementSyntax original, ForEachStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ForEachStatementSyntax, ForEachStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ForEachStatementSyntax, ForEachStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ForEachStatementSyntax original, ForEachStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ForEachStatementSyntax, ForEachStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ForEachStatementSyntax original, ForEachStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ForEachKeyword, modified.ForEachKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Type, modified.Type, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.InKeyword, modified.InKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ForEachStatementSyntax, ForEachStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ForEachStatementSyntax, ForEachStatementSyntax>.EqualityMatch(ForEachStatementSyntax original, ForEachStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ForEachVariableStatement"/>.
    /// </summary>
    partial class ForEachVariableStatementServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ForEachVariableStatementSyntax, ForEachVariableStatementSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ForEachVariableStatementSyntax, ForEachVariableStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ForEachVariableStatementSyntax, ForEachVariableStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ForEachVariableStatementSyntax, ForEachVariableStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ForEachVariableStatementSyntax, ForEachVariableStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ForEachVariableStatementSyntax original, ForEachVariableStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ForEachVariableStatementSyntax, ForEachVariableStatementSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ForEachVariableStatementSyntax, ForEachVariableStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ForEachVariableStatementSyntax original, ForEachVariableStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ForEachVariableStatementSyntax, ForEachVariableStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ForEachVariableStatementSyntax original, ForEachVariableStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.ForEachKeyword, modified.ForEachKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Variable, modified.Variable, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.InKeyword, modified.InKeyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Expression, modified.Expression, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Statement, modified.Statement, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ForEachVariableStatementSyntax, ForEachVariableStatementSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ForEachVariableStatementSyntax, ForEachVariableStatementSyntax>.EqualityMatch(ForEachVariableStatementSyntax original, ForEachVariableStatementSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="SingleVariableDesignation"/>.
    /// </summary>
    partial class SingleVariableDesignationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, SingleVariableDesignationSyntax, SingleVariableDesignationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(SingleVariableDesignationSyntax, SingleVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SingleVariableDesignationSyntax, SingleVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(SingleVariableDesignationSyntax, SingleVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(SingleVariableDesignationSyntax, SingleVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(SingleVariableDesignationSyntax original, SingleVariableDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(SingleVariableDesignationSyntax, SingleVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(SingleVariableDesignationSyntax, SingleVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(SingleVariableDesignationSyntax original, SingleVariableDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SingleVariableDesignationSyntax, SingleVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(SingleVariableDesignationSyntax original, SingleVariableDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.Identifier, modified.Identifier, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(SingleVariableDesignationSyntax, SingleVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, SingleVariableDesignationSyntax, SingleVariableDesignationSyntax>.EqualityMatch(SingleVariableDesignationSyntax original, SingleVariableDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="DiscardDesignation"/>.
    /// </summary>
    partial class DiscardDesignationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, DiscardDesignationSyntax, DiscardDesignationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(DiscardDesignationSyntax, DiscardDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DiscardDesignationSyntax, DiscardDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(DiscardDesignationSyntax, DiscardDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(DiscardDesignationSyntax, DiscardDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(DiscardDesignationSyntax original, DiscardDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(DiscardDesignationSyntax, DiscardDesignationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DiscardDesignationSyntax, DiscardDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(DiscardDesignationSyntax original, DiscardDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DiscardDesignationSyntax, DiscardDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(DiscardDesignationSyntax original, DiscardDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if (this.LanguageServiceProvider.EqualityMatch(original.UnderscoreToken, modified.UnderscoreToken, context))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DiscardDesignationSyntax, DiscardDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, DiscardDesignationSyntax, DiscardDesignationSyntax>.EqualityMatch(DiscardDesignationSyntax original, DiscardDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="ParenthesizedVariableDesignation"/>.
    /// </summary>
    partial class ParenthesizedVariableDesignationServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, ParenthesizedVariableDesignationSyntax, ParenthesizedVariableDesignationSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(ParenthesizedVariableDesignationSyntax, ParenthesizedVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ParenthesizedVariableDesignationSyntax, ParenthesizedVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(ParenthesizedVariableDesignationSyntax, ParenthesizedVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(ParenthesizedVariableDesignationSyntax, ParenthesizedVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(ParenthesizedVariableDesignationSyntax original, ParenthesizedVariableDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(ParenthesizedVariableDesignationSyntax, ParenthesizedVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(ParenthesizedVariableDesignationSyntax, ParenthesizedVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(ParenthesizedVariableDesignationSyntax original, ParenthesizedVariableDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ParenthesizedVariableDesignationSyntax, ParenthesizedVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(ParenthesizedVariableDesignationSyntax original, ParenthesizedVariableDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.OpenParenToken, modified.OpenParenToken, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Variables, modified.Variables, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.CloseParenToken, modified.CloseParenToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(ParenthesizedVariableDesignationSyntax, ParenthesizedVariableDesignationSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, ParenthesizedVariableDesignationSyntax, ParenthesizedVariableDesignationSyntax>.EqualityMatch(ParenthesizedVariableDesignationSyntax original, ParenthesizedVariableDesignationSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CasePatternSwitchLabel"/>.
    /// </summary>
    partial class CasePatternSwitchLabelServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CasePatternSwitchLabelSyntax, CasePatternSwitchLabelSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CasePatternSwitchLabelSyntax, CasePatternSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CasePatternSwitchLabelSyntax, CasePatternSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CasePatternSwitchLabelSyntax, CasePatternSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CasePatternSwitchLabelSyntax, CasePatternSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CasePatternSwitchLabelSyntax original, CasePatternSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CasePatternSwitchLabelSyntax, CasePatternSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CasePatternSwitchLabelSyntax, CasePatternSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CasePatternSwitchLabelSyntax original, CasePatternSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CasePatternSwitchLabelSyntax, CasePatternSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CasePatternSwitchLabelSyntax original, CasePatternSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Pattern, modified.Pattern, context)) &&
                ((original.WhenClause == null && modified.WhenClause == null) || (original.WhenClause != null && modified.WhenClause != null && this.LanguageServiceProvider.EqualityMatch(original.WhenClause, modified.WhenClause, context))) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CasePatternSwitchLabelSyntax, CasePatternSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CasePatternSwitchLabelSyntax, CasePatternSwitchLabelSyntax>.EqualityMatch(CasePatternSwitchLabelSyntax original, CasePatternSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="CaseSwitchLabel"/>.
    /// </summary>
    partial class CaseSwitchLabelServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, CaseSwitchLabelSyntax, CaseSwitchLabelSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(CaseSwitchLabelSyntax, CaseSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CaseSwitchLabelSyntax, CaseSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(CaseSwitchLabelSyntax, CaseSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(CaseSwitchLabelSyntax, CaseSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(CaseSwitchLabelSyntax original, CaseSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(CaseSwitchLabelSyntax, CaseSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(CaseSwitchLabelSyntax, CaseSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(CaseSwitchLabelSyntax original, CaseSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CaseSwitchLabelSyntax, CaseSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(CaseSwitchLabelSyntax original, CaseSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.Value, modified.Value, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(CaseSwitchLabelSyntax, CaseSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, CaseSwitchLabelSyntax, CaseSwitchLabelSyntax>.EqualityMatch(CaseSwitchLabelSyntax original, CaseSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
    /// <summary>
    /// Provides language-aware services regarding <see cref="DefaultSwitchLabel"/>.
    /// </summary>
    partial class DefaultSwitchLabelServiceProvider : IEqualityCriterion<SyntaxNodeOrToken?, DefaultSwitchLabelSyntax, DefaultSwitchLabelSyntax>
    {	
    	/// <summary>
        /// Method hook for implementing logic to execute before the <see cref="EqualityMatch(DefaultSwitchLabelSyntax, DefaultSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DefaultSwitchLabelSyntax, DefaultSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="ignoreCore">If true, the <see cref="EqualityMatchCore(DefaultSwitchLabelSyntax, DefaultSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> is not executed and <see cref="EqualityMatch(DefaultSwitchLabelSyntax, DefaultSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/> returns the current value of <paramref name="result"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchBefore(DefaultSwitchLabelSyntax original, DefaultSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result, ref bool ignoreCore);
        
        /// <summary>
        /// Method hook for implementing logic to execute after the <see cref="EqualityMatchCore(DefaultSwitchLabelSyntax, DefaultSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?})"/>.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>Matches inferable after taking for granted the match among the given versions.</returns>
        /// <param name="result">Mechanism to modify the result of <see cref="EqualityMatch(DefaultSwitchLabelSyntax, DefaultSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</param>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        partial void EqualityMatchAfter(DefaultSwitchLabelSyntax original, DefaultSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, ref MatchInfo<SyntaxNodeOrToken?> matchingDescription, ref bool result);
    
        /// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DefaultSwitchLabelSyntax, DefaultSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        protected virtual bool EqualityMatchCore(DefaultSwitchLabelSyntax original, DefaultSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		matchingDescription = null;
    
    		if(original == null || modified == null) 
    			return false;
    
            if ((this.LanguageServiceProvider.EqualityMatch(original.Keyword, modified.Keyword, context)) &&
                (this.LanguageServiceProvider.EqualityMatch(original.ColonToken, modified.ColonToken, context)))
    		{
    			matchingDescription = new MatchInfo<SyntaxNodeOrToken?>((int)MatchInfoCriterions.Equality) { Original = original, Modified = modified };
    			return true;
    		}
    
    	    return false;
    	}	
    
    	/// <summary>
        /// Determines if two elements are exactly equal.
        /// </summary>
        /// <param name="original">the original version.</param>
        /// <param name="modified">the modified version.</param>
        /// <param name="context">the context wherein certain matching criterion is currently running.</param>
        /// <returns>true if the given elements are exactly equal, otherwise returns false.</returns>
        /// <param name="matchingDescription">in case the given elements are exactly equal, this parameter will contain the corresponding matching description. It should be actually an "out" parameter, but partial methods do not support "out" parameters.</param>
        /// <remarks>This is the default implementation for <see cref="EqualityMatch(DefaultSwitchLabelSyntax, DefaultSwitchLabelSyntax, MatchingContext{SyntaxNodeOrToken?}, ref MatchInfo{SyntaxNodeOrToken?})"/>.</remarks>
        bool IEqualityCriterion<SyntaxNodeOrToken?, DefaultSwitchLabelSyntax, DefaultSwitchLabelSyntax>.EqualityMatch(DefaultSwitchLabelSyntax original, DefaultSwitchLabelSyntax modified, MatchingContext<SyntaxNodeOrToken?> context, out MatchInfo<SyntaxNodeOrToken?> matchingDescription)
    	{
    		bool result = false;
    		var ignoreCore = false;
    		matchingDescription = null;
    		EqualityMatchBefore(original, modified, context, ref matchingDescription, ref result, ref ignoreCore);
    		if(ignoreCore) 
    			return result;
    		
    		result = this.EqualityMatchCore(original, modified, context, out matchingDescription);
    		EqualityMatchAfter(original, modified, context, ref matchingDescription, ref result);
    		return result;
    	}
    }
    
}
// Generated helper templates
// Generated items
