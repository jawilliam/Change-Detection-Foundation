<#@ template language="C#" debug="True" hostSpecific="true"#>
<#@ output extension=".cs" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.Common.2.7.0\lib\netstandard1.3\Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.CSharp.2.7.0\lib\netstandard1.3\Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)\packages\CodePlex.LinqToXsd.2.0.2\lib\Xml.Schema.Linq.dll" #>
<#@ assembly name="$(SolutionDir)\Jawilliam.CDF\bin\Debug\Jawilliam.CDF.dll" #>
<#@ assembly name="$(SolutionDir)\Jawilliam.CDF.XObjects\bin\Debug\Jawilliam.CDF.XObjects.dll" #>
<#@ assembly name="$(SolutionDir)\packages\System.Collections.Immutable.1.3.1\lib\portable-net45+win8+wp8+wpa81\System.Collections.Immutable.dll" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Jawilliam.CDF" #>
<#@ import namespace="Jawilliam.CDF.GTED" #>
<#@ import namespace="Jawilliam.CDF.XObjects.RDSL" #>
<#
// <copyright file="LearningFromCSharpSyntaxVisitor.tt" company="Jasoco" author="Jawilliam">
//  Copyright Â© . All Rights Reserved.
// </copyright>

Type csharpSyntaxVisitor = typeof(CSharpSyntaxVisitor);
MethodInfo[] allMethods = csharpSyntaxVisitor.GetMembers().OfType<MethodInfo>().ToArray();

// Filters to methods starting with 'Visit' prefix, except that being called just 'Visit'.
MethodInfo[] visitMethods = allMethods.Where(m => m.Name.StartsWith("Visit") && m.Name != "Visit").ToArray();

// This methods represents the case logic of CSharpSyntaxVisitor for each type of syntax node, then lets to collect all that syntax node types.
List<Type> syntaxNodeTypes = visitMethods.Select(m => m.GetParameters().Single(p => p.Name == "node").ParameterType).Distinct().ToList();

// Build up the class system of syntax node types by completing the total hierarchy. 
List<Type> syntaxNodeSystem = new List<Type>(syntaxNodeTypes);
List<Type> syntaxInnerNodes = new List<Type>(220);
syntaxInnerNodes.AddRange(syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Intersect(syntaxNodeSystem));
List<Type> missingSyntaxTypes = syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Except(syntaxNodeSystem).ToList();
while (missingSyntaxTypes.Any())
{
    syntaxInnerNodes.AddRange(missingSyntaxTypes);
    syntaxNodeSystem.AddRange(missingSyntaxTypes);
    missingSyntaxTypes = syntaxNodeSystem.Where(n => n.BaseType != typeof(object)).Select(n => n.BaseType).Distinct().Except(syntaxNodeSystem).ToList();
}

var syntaxNodeViews = syntaxNodeSystem
.Select(t => new
{
    Parent = t.BaseType.Name,
    Child = new Tree { Root = new Node { Label = t.Name } }
})
.ToList();

List<ITree> syntaxNodeHierarachies = new List<ITree>(220);
foreach (var parentType in syntaxInnerNodes)
{
    var parent = syntaxNodeViews.First(n => object.Equals(n.Child.Root.Label, parentType.Name));
    foreach (var child in syntaxNodeViews.Where(t => object.Equals(t.Parent, parent.Child.Root.Label)))
    {
        parent.Child.Children.Add(child.Child);
        child.Child.Parent = parent.Child;
    }
}

var syntaxSystemRoot = syntaxNodeViews.Where(t => t.Parent == typeof(object).Name).Single().Child;

CodeGenerationTools code = new CodeGenerationTools(this);
CodeRegion region = new CodeRegion(this, 1);
string namespaceName = code.VsNamespaceSuggestion();

var manager = EntityFrameworkTemplateFileManager.Create(this);

// var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.NodeTypes.Load(@"E:\Projects\Software Development Investigation\Jawilliam.Msr.Roslyn\CSharp\NodeTypeSystem.xml");
//var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.Load(@"E:\MyRepositories\Change-Detection-Foundation\Jawilliam.CDF.CSharp\RDSL.xml");
var xSyntaxTypeSystem = Jawilliam.CDF.XObjects.RDSL.Syntax.Load(@"D:\MyRepositories\Change-Detection-Foundation\Jawilliam.CDF.CSharp\RDSL.xml");

#>using Microsoft.CodeAnalysis.CSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

<#BeginNamespace(namespaceName, code);#>
[TestClass]
public partial class RoslynMLDeltaExpanderTests { }
<#EndNamespace(namespaceName);#>


<#
foreach(ITree syntaxNode in syntaxSystemRoot.PostOrder<ITree>(e => e.Children)
.Where(n => !object.Equals(n.Root.Label, "SyntaxNode") && 
            !object.Equals(n.Root.Label, "CSharpSyntaxNode")))
{
	var xSyntaxNodeType = xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == syntaxNode.Root.Label.ToString());
	if(xSyntaxNodeType == null) continue;
	var xSyntaxNodeBaseType = xSyntaxNodeType != null && xSyntaxNodeType.@base != null ?
	 xSyntaxTypeSystem.Nodes.Type.SingleOrDefault(n => n.name == xSyntaxNodeType.@base) 
	 : null;

	if(xSyntaxNodeType.@abstract || 
	   syntaxNode.Root.Label.ToString() == "ForStatementSyntax" ||	   
	   syntaxNode.Root.Label.ToString() == "PragmaChecksumDirectiveTriviaSyntax" ||	   
	   syntaxNode.Root.Label.ToString() == "XmlCrefAttributeSyntax" ||	   
	   syntaxNode.Root.Label.ToString() == "XmlElementSyntax" ||	   
	   syntaxNode.Root.Label.ToString() == "XmlNameSyntax" ||	   
	   syntaxNode.Root.Label.ToString() == "XmlNameAttributeSyntax" ||	   
	   syntaxNode.Root.Label.ToString() == "XmlTextAttributeSyntax" ||	   
	   syntaxNode.Root.Label.ToString() == "NameColonSyntax" ||	   
	   syntaxNode.Root.Label.ToString() == "NameEqualsSyntax")
		continue;
	
	var isUpdatable = false;
	if(xSyntaxNodeType != null && xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null)
		isUpdatable = xSyntaxNodeType.Properties.Property.Any(p => p.changepoint);

	if(xSyntaxNodeType != null)
    {
		var xSyntaxNodeBaseTypeProperties = xSyntaxNodeBaseType != null && xSyntaxNodeBaseType.Properties != null 
											&& xSyntaxNodeBaseType.Properties.Property != null 
				? xSyntaxNodeBaseType.Properties.Property
				: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var xSyntaxNodeProperties = xSyntaxNodeType.Properties != null && xSyntaxNodeType.Properties.Property != null 
			? xSyntaxNodeType.Properties.Property
			: new Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType[0];

		var currentType = typeof(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)
			.Assembly.GetType("Microsoft.CodeAnalysis.CSharp.Syntax." + code.Escape(syntaxNode.Root.Label.ToString()));
		var currentPropertiesMetadata = currentType.GetMembers().OfType<PropertyInfo>()
			.Where(p => xSyntaxNodeProperties.Any(n => n.name == p.Name))
			.Select(p => new Tuple<PropertyInfo, Syntax.NodesLocalType.TypeLocalType.PropertiesLocalType.PropertyLocalType>(p, xSyntaxNodeProperties.Single(n => n.name == p.Name)))
			.OrderBy(p => p.Item2.index)
			.ToArray();

	if(xSyntaxNodeType != null)
	{
		var pairwiseTunnelingProperties = currentPropertiesMetadata
			.Where(p => p.Item2.Rules?.Pairwise?.tunneling ?? false)
			.ToArray();

		var pairwiseTunnelingComplexProperties = pairwiseTunnelingProperties
			.Where(p => p.Item2.name != "SyntaxToken")
			.ToArray();

        var relevantProperty = (xSyntaxNodeType.Rules?.Topology?.leaf?.Contains("Terminal") ?? false) && currentPropertiesMetadata
        .Count(p => (p.Item2.Rules?.Topology?.relevant ?? false) && !( p.Item2.Rules?.Pairwise?.tunneling ?? false)) == 1
			? currentPropertiesMetadata.Single(p => (p.Item2.Rules?.Topology?.relevant ?? false) && 
                                                   !( p.Item2.Rules?.Pairwise?.tunneling ?? false))                                                   
            : null;

		manager.StartNewFile($"RoslynMLDeltaExpander{syntaxNode.Root.Label}Tests.cs");

		BeginNamespace(namespaceName, code);
#>
using Jawilliam.CDF.Approach;
using Jawilliam.CDF.CSharp.RoslynML;
using Jawilliam.CDF.XObjects.RDSL;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

partial class RoslynMLDeltaExpanderTests
{
     /// <summary>
     /// Provides the element revision pair(s) to test in <see cref="<#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>ServiceProvider_RoslynMLDeltaExpander_OK"/>.
     /// </summary>
     /// <param name="nodeRevisionPairs"> the element revision pair(s) to test</param>
	 partial void <#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>ServiceProvider_RoslynMLDeltaExpander_DataToTest(ref IEnumerable<(<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>)> nodeRevisionPairs);

	 /// <summary>
     /// Tests expansion logic for <see cref="<#= code.Escape(syntaxNode.Root.Label.ToString()) #>"/>.
     /// </summary>
	 [TestMethod]
     public void <#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>ServiceProvider_RoslynMLDeltaExpander_OK()
     {
		var converter = new CDF.CSharp.RoslynML.RoslynML();
		var selector = new CDF.CSharp.RoslynML.RoslynMLPruneSelector();
		int id = 0; 

	    IEnumerable<(<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>)> nodeRevisionPairs = null;
	    string oExpectedLabel = null, mExpectedLabel = null;
	    <#= code.Escape(syntaxNode.Root.Label.ToString()).Replace("Syntax", "") #>ServiceProvider_RoslynMLDeltaExpander_DataToTest(ref nodeRevisionPairs);
		foreach(((<#= code.Escape(syntaxNode.Root.Label.ToString()) #> Original, <#= code.Escape(syntaxNode.Root.Label.ToString()) #> Modified) nodeRevisionPair, Action<RoslynML, XElement> defoliate) in nodeRevisionPairs
			.SelectMany(n => new List<((<#= code.Escape(syntaxNode.Root.Label.ToString()) #>, <#= code.Escape(syntaxNode.Root.Label.ToString()) #>), Action<RoslynML, XElement>)>
				{ (n, (r, n1) => { }), (n, (r, n1) => r.Defoliate(n1)) }))
		{
			id = 0;
			oExpectedLabel = Enum.GetName(typeof(SyntaxKind), nodeRevisionPair.Original.Kind());
			mExpectedLabel = Enum.GetName(typeof(SyntaxKind), nodeRevisionPair.Modified.Kind());

			var oElement = converter.Visit(nodeRevisionPair.Original);
			converter.SetGumTreefiedIDs(oElement, ref id);
			converter.SetRoslynMLIDs(oElement, ref id);
			converter.Prune(oElement, selector.PruneSelector); 
			defoliate(converter, oElement);

			var mId = id;

			var mElement = converter.Visit(nodeRevisionPair.Modified);
			converter.SetGumTreefiedIDs(mElement, ref id);
			converter.SetRoslynMLIDs(mElement, ref id);
			converter.Prune(mElement, selector.PruneSelector); 
			defoliate(converter, mElement);

			id = 0;
			var oFullElement = converter.Visit(nodeRevisionPair.Original);
			converter.SetGumTreefiedIDs(oFullElement, ref id);
			converter.SetRoslynMLIDs(oFullElement, ref id);

			var mFullElement = converter.Visit(nodeRevisionPair.Modified);
			converter.SetGumTreefiedIDs(mFullElement, ref id);
			converter.SetRoslynMLIDs(mFullElement, ref id);

			DeltaExpander expander = new DeltaExpander();

			// Match
			expander.Expand(
				new RevisionPair<XElement> { Original = oElement, Modified = mElement },
				new RevisionPair<XElement> { Original = oFullElement, Modified = mFullElement }, 
				(Matches: new XElement[] 
				{ 
					new XElement("Match", 
						new XAttribute("oId", oElement.GtID()),
						new XAttribute("oLb", oElement.Label()),
						new XAttribute("mId", mElement.GtID()), 
						new XAttribute("mLb", mElement.Label())) 
				},
			Actions: new XElement[0]));
			
			var totalProperties = <#= pairwiseTunnelingProperties.Count() #>;
			var matchedProperties = totalProperties;
			var unmatchedOriginalProperties = 0;
			var unmatchedModifiedProperties = 0;
<#
		foreach(var p in pairwiseTunnelingProperties.Where(p1 => p1.Item2.optional).ToList())
		{
#>
			matchedProperties = oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>") && 
			                    mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>")
				? matchedProperties 
				: (matchedProperties - 1);
			if(!oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>") && 
			    mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>"))
				unmatchedModifiedProperties++; 
			if(oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>") && 
			   !mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>"))
				unmatchedOriginalProperties++; 
<#
		}
#>

			var relevantDescendants = 0;
<#

		if(relevantProperty != null)
		{
			if(relevantProperty.Item2.optional)
			{
#>
			if(oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= relevantProperty.Item2.name #>") &&
			   mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= relevantProperty.Item2.name #>"))
			{
				relevantDescendants = oFullElement.Elements().Single(e => e.Attribute("part").Value == "<#= relevantProperty.Item2.name #>")
					.PreOrder(n => n.Elements().Where(ne => ne is XNode))
					.Where(ne => ne.Attribute("GtID")?.Value != null)
					.Count();
			}
			else if(!oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= relevantProperty.Item2.name #>") &&
			        mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= relevantProperty.Item2.name #>"))
			{
				unmatchedModifiedProperties += mFullElement.Elements().Single(e => e.Attribute("part").Value == "<#= relevantProperty.Item2.name #>")
					.PreOrder(n => n.Elements().Where(ne => ne is XNode))
					.Where(ne => ne.Attribute("GtID")?.Value != null)
					.Count();
			}
			else if(oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= relevantProperty.Item2.name #>") &&
			        !mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= relevantProperty.Item2.name #>"))
			{
				unmatchedOriginalProperties += oFullElement.Elements().Single(e => e.Attribute("part").Value == "<#= relevantProperty.Item2.name #>")
					.PreOrder(n => n.Elements().Where(ne => ne is XNode))
					.Where(ne => ne.Attribute("GtID")?.Value != null)
					.Count();
			}
<#
			}
			else
			{
#>
			relevantDescendants = oFullElement.Elements().Single(e => e.Attribute("part").Value == "<#= relevantProperty.Item2.name #>")
				.PreOrder(n => n.Elements().Where(ne => ne is XNode))
				.Where(ne => ne.Attribute("GtID")?.Value != null)
				.Count();
<#
			}
		}
#>

			Assert.AreEqual(expander.FullDelta.Matches.Count(), matchedProperties + 1 + relevantDescendants);
			Assert.AreEqual(expander.FullDelta.Actions.Count(), unmatchedOriginalProperties + unmatchedModifiedProperties);

			Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oId").Value == oElement.GtID())
				.Attribute("mId").Value == mElement.GtID());
			Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oLb").Value == oExpectedLabel)
				.Attribute("mLb").Value == mExpectedLabel);
<#
		foreach(var p in pairwiseTunnelingProperties)
		{
			if(p.Item2.optional)
			{
#>

			var o<#= p.Item2.name #>Label = nodeRevisionPair.Original.<#= p.Item2.name #> == null || nodeRevisionPair.Original.<#= p.Item2.name #>.Kind() == SyntaxKind.None
				? null 
				: Enum.GetName(typeof(SyntaxKind), nodeRevisionPair.Original.<#= p.Item2.name #>.Kind());
			var m<#= p.Item2.name #>Label = nodeRevisionPair.Modified.<#= p.Item2.name #> == null || nodeRevisionPair.Modified.<#= p.Item2.name #>.Kind() == SyntaxKind.None
				? null 
				: Enum.GetName(typeof(SyntaxKind), nodeRevisionPair.Modified.<#= p.Item2.name #>.Kind());
			if(oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>") &&
			   mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>"))
			{
				Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oLb").Value == o<#= p.Item2.name #>Label)
					.Attribute("mLb").Value == m<#= p.Item2.name #>Label);
				Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oId").Value == 
					oFullElement.Elements().Single(e => e.Label() == o<#= p.Item2.name #>Label).GtID())
					.Attribute("mId").Value == 
					mFullElement.Elements().Single(e => e.Label() == m<#= p.Item2.name #>Label).GtID());
			} 
			else if(oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>") &&
			        !mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>"))
			{
				Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Delete" && a.Attribute("eId").Value == 
					oFullElement.Elements().Single(e => e.Label() == o<#= p.Item2.name #>Label).GtID())
				.Attribute("eLb").Value == o<#= p.Item2.name #>Label);
			}
			else if(!oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>") &&
			        mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>"))
			{
				Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Insert" && a.Attribute("eLb").Value == m<#= p.Item2.name #>Label)
					.Attribute("pLb").Value == oExpectedLabel);
				Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Insert" && a.Attribute("eId").Value == 
						mFullElement.Elements().Single(e => e.Label() == m<#= p.Item2.name #>Label).GtID())
					.Attribute("pId").Value == oFullElement.GtID());
			}
<#
			}
			else
			{
#>

			var o<#= p.Item2.name #>Label = Enum.GetName(typeof(SyntaxKind), nodeRevisionPair.Original.<#= p.Item2.name #>.Kind());
			var m<#= p.Item2.name #>Label = Enum.GetName(typeof(SyntaxKind), nodeRevisionPair.Modified.<#= p.Item2.name #>.Kind());
			Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oLb").Value == o<#= p.Item2.name #>Label)
				.Attribute("mLb").Value == m<#= p.Item2.name #>Label);
			Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oId").Value == 
				oFullElement.Elements().Single(e => e.Label() == o<#= p.Item2.name #>Label).GtID())
				.Attribute("mId").Value == 
				mFullElement.Elements().Single(e => e.Label() == m<#= p.Item2.name #>Label).GtID());
<#
			}
		}
#>

			// Insert
			expander.Expand(
				new RevisionPair<XElement> { Original = oElement, Modified = mElement },
				new RevisionPair<XElement> { Original = oFullElement, Modified = mFullElement }, 
				(Matches: new XElement[0],
				 Actions: new XElement[] 
				 { 
				 	new XElement("Insert", 
				 		new XAttribute("eId", mElement.GtID()), 
				 		new XAttribute("eLb", mElement.Label()), 
				 		new XAttribute("eVl", "##"), 
				 		new XAttribute("pId", mElement.GtID()), 
				 		new XAttribute("pLb", mElement.Label()), 
				 		new XAttribute("pos", "-1")) 
				 }));
			
            Assert.AreEqual(expander.FullDelta.Matches.Count(), 0);
            Assert.AreEqual(expander.FullDelta.Actions.Count(), matchedProperties + 1 + unmatchedModifiedProperties + relevantDescendants);

            Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Insert" && a.Attribute("eId").Value == mElement.GtID())
				.Attribute("pId").Value == mElement.GtID());
	        Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Insert" && a.Attribute("eLb").Value == mExpectedLabel)
				.Attribute("pLb").Value == mExpectedLabel);
<#
		foreach(var p in pairwiseTunnelingProperties)
		{
			if(p.Item2.optional)
			{
#>

			if(mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>"))
			{
				Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Insert" && a.Attribute("eLb").Value == m<#= p.Item2.name #>Label)
					.Attribute("pLb").Value == mExpectedLabel);
				Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Insert" && a.Attribute("eId").Value == 
						mFullElement.Elements().Single(e => e.Label() == m<#= p.Item2.name #>Label).GtID())
					.Attribute("pId").Value == mFullElement.GtID());
			}
<#
			}
			else
			{
#>

			Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Insert" && a.Attribute("eLb").Value == m<#= p.Item2.name #>Label)
					.Attribute("pLb").Value == mExpectedLabel);
			Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Insert" && a.Attribute("eId").Value == 
					mFullElement.Elements().Single(e => e.Label() == m<#= p.Item2.name #>Label).GtID())
				.Attribute("pId").Value == mFullElement.GtID());
<#
			}
		}
#>

			// Delete
			expander.Expand(
				new RevisionPair<XElement> { Original = oElement, Modified = mElement },
				new RevisionPair<XElement> { Original = oFullElement, Modified = mFullElement }, 
				(Matches: new XElement[0],
				 Actions: new XElement[] 
				 { 
				 	new XElement("Delete", 
				 		new XAttribute("eId", oElement.GtID()), 
				 		new XAttribute("eLb", oElement.Label()), 
				 		new XAttribute("eVl", "##"))
				 }));
			
            Assert.AreEqual(expander.FullDelta.Matches.Count(), 0);
            Assert.AreEqual(expander.FullDelta.Actions.Count(), matchedProperties + 1 + unmatchedOriginalProperties + relevantDescendants);

            Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Delete" && a.Attribute("eId").Value == oElement.GtID())
				.Attribute("eLb").Value == oElement.Label());
<#
		foreach(var p in pairwiseTunnelingProperties)
		{
			if(p.Item2.optional)
			{
#>

			if(oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>"))
			{
				Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Delete" && a.Attribute("eId").Value == 
						oFullElement.Elements().Single(e => e.Label() == o<#= p.Item2.name #>Label).GtID())
					.Attribute("eLb").Value == o<#= p.Item2.name #>Label);
			}
<#
			}
			else
			{
#>

			Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Delete" && a.Attribute("eId").Value == 
					oFullElement.Elements().Single(e => e.Label() == o<#= p.Item2.name #>Label).GtID())
				.Attribute("eLb").Value == o<#= p.Item2.name #>Label);
<#
			}
		}
#>

			// Update
			var mFullElement1 = converter.Visit(nodeRevisionPair.Modified);
			converter.SetGumTreefiedIDs(mFullElement1, ref mId);
			converter.SetRoslynMLIDs(mFullElement1, ref mId);
<#
			var propertyValues = pairwiseTunnelingProperties.Where(ptp => ptp.Item2.type == "SyntaxToken").Select((p1, i) => $"v{i.ToString()}").ToArray(); 
			for(int i = 0; i < pairwiseTunnelingProperties.Count(ptp => ptp.Item2.type == "SyntaxToken"); i++)
			{
				var p = pairwiseTunnelingProperties[i];
#>			
			if(mFullElement1.Elements().Any(e => e.Label() == m<#= p.Item2.name #>Label))
				mFullElement1.Elements().Single(e => e.Label() == m<#= p.Item2.name #>Label).Value = "<#= propertyValues[i] #>";
<#
			}
#>

			expander.Expand(
				new RevisionPair<XElement> { Original = oElement, Modified = mElement },
				new RevisionPair<XElement> { Original = oFullElement, Modified = mFullElement1 }, 
				(Matches: new XElement[] 
				{ 
					new XElement("Match", 
						new XAttribute("oId", oElement.GtID()),
						new XAttribute("oLb", oElement.Label()),
						new XAttribute("mId", mElement.GtID()), 
						new XAttribute("mLb", mElement.Label())) 
				},
			    Actions: new XElement[0]));
			
            Assert.AreEqual(expander.FullDelta.Matches.Count(), matchedProperties + 1 + relevantDescendants);
            Assert.AreEqual(expander.FullDelta.Actions.Count(), matchedProperties + unmatchedOriginalProperties + unmatchedModifiedProperties);

			Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oId").Value == oElement.GtID())
				.Attribute("mId").Value == mElement.GtID());
			Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oLb").Value == oExpectedLabel)
				.Attribute("mLb").Value == mExpectedLabel);
<#
		for(int i = 0; i < pairwiseTunnelingProperties.Count(ptp => ptp.Item2.type == "SyntaxToken"); i++)
		{
			var p = pairwiseTunnelingProperties[i];
			if(p.Item2.optional)
			{
#>

			if(oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>") &&
			   mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>"))
			{
				Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oLb").Value == o<#= p.Item2.name #>Label)
					.Attribute("mLb").Value == m<#= p.Item2.name #>Label);
				Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oId").Value == 
					oFullElement.Elements().Single(e => e.Label() == o<#= p.Item2.name #>Label).GtID())
					.Attribute("mId").Value == 
					mFullElement.Elements().Single(e => e.Label() == m<#= p.Item2.name #>Label).GtID());

				Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Update" && a.Attribute("eLb").Value == o<#= p.Item2.name #>Label)
					.Attribute("val").Value == "<#= propertyValues[i] #>");
				Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Update" && a.Attribute("eId").Value == 
						oFullElement.Elements().Single(e => e.Label() == o<#= p.Item2.name #>Label).GtID())
					.Attribute("val").Value == "<#= propertyValues[i] #>");
			} 
			else if(oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>") &&
			        !mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>"))
			{
				Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Delete" && a.Attribute("eId").Value == 
					oFullElement.Elements().Single(e => e.Label() == o<#= p.Item2.name #>Label).GtID())
				.Attribute("eLb").Value == o<#= p.Item2.name #>Label);
			}
			else if(!oFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>") &&
			        mFullElement.Elements().Any(e => e.Attribute("part").Value == "<#= p.Item2.name #>"))
			{
				Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Insert" && a.Attribute("eLb").Value == m<#= p.Item2.name #>Label)
					.Attribute("pLb").Value == oExpectedLabel);
				Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Insert" && a.Attribute("eId").Value == 
						mFullElement.Elements().Single(e => e.Label() == m<#= p.Item2.name #>Label).GtID())
					.Attribute("pId").Value == oFullElement.GtID());
			}
<#
			}
			else
			{
#>

			Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oLb").Value == o<#= p.Item2.name #>Label)
				.Attribute("mLb").Value == m<#= p.Item2.name #>Label);
			Assert.IsTrue(expander.FullDelta.Matches.Single(m => m.Attribute("oId").Value == 
				oFullElement.Elements().Single(e => e.Label() == o<#= p.Item2.name #>Label).GtID())
				.Attribute("mId").Value == 
				mFullElement.Elements().Single(e => e.Label() == m<#= p.Item2.name #>Label).GtID());
			Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Update" && a.Attribute("eLb").Value == o<#= p.Item2.name #>Label)
					.Attribute("val").Value == "<#= propertyValues[i] #>");
			Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Update" && a.Attribute("eId").Value == 
					oFullElement.Elements().Single(e => e.Label() == o<#= p.Item2.name #>Label).GtID())
				.Attribute("val").Value == "<#= propertyValues[i] #>");
<#
			}
		}
#>

			// Update
			expander.Expand(
				new RevisionPair<XElement> { Original = oElement, Modified = mElement },
				new RevisionPair<XElement> { Original = oFullElement, Modified = mFullElement }, 
				(Matches: new XElement[0],
				Actions: new XElement[] 
				{ 
					new XElement("Update",
						new XAttribute("eId", oFullElement.GtID()),
						new XAttribute("eLb", oFullElement.Attribute("kind")?.Value ?? oFullElement.Name.LocalName),
						new XAttribute("eVl", mFullElement.GtID()),
						new XAttribute("val", "t#v"))
				}));			
            Assert.AreEqual(expander.FullDelta.Matches.Count(), 0);
            Assert.AreEqual(expander.FullDelta.Actions.Count(), 1);

			Assert.IsTrue(expander.FullDelta.Actions
					.Single(a => a.Name.LocalName == "Update" && a.Attribute("eLb").Value == oExpectedLabel)
					.Attribute("val").Value == "t#v");
			Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Update" && a.Attribute("eId").Value == oFullElement.GtID())
				.Attribute("val").Value == "t#v");	

			// Move
			expander.Expand(
				new RevisionPair<XElement> { Original = oElement, Modified = mElement },
				new RevisionPair<XElement> { Original = oFullElement, Modified = mFullElement }, 
				(Matches: new XElement[0],
				 Actions: new XElement[] 
				 { 
				 	new XElement("Move", 
				 		new XAttribute("eId", oElement.GtID()),
				 		new XAttribute("eLb", oElement.Label()),
				 		new XAttribute("pId", mFullElement.GtID()),
				 		new XAttribute("pLb", mFullElement.Label()),
				 		new XAttribute("pos", "-1")) 
				 }));			
            Assert.AreEqual(expander.FullDelta.Matches.Count(), 0);
            Assert.AreEqual(expander.FullDelta.Actions.Count(), 1);

            Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Move" && a.Attribute("eId").Value == oElement.GtID())
				.Attribute("pId").Value == mFullElement.GtID());
	        Assert.IsTrue(expander.FullDelta.Actions
				.Single(a => a.Name.LocalName == "Move" && a.Attribute("eLb").Value == oExpectedLabel)
				.Attribute("pLb").Value == mExpectedLabel);
		}
     }
}
<#
	
EndNamespace(namespaceName);
	}
 }
}

manager.Process();
#>
<#+

/*protected IEnumerable<(string ElementLabel, List<string> PropertyLabels)> ExpectedLabels
{
	get
	{
		return new List<(string ElementLabel, List<string> PropertyLabels)>
		{
			("AttributeArgument", new List<string>{"", ""}),
		};
	}
}*/

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

string GetSyntaxType(Type t, CodeGenerationTools code, string listTypeArgument)
{
	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SeparatedSyntaxList"))
		return "SeparatedList_of_" + listTypeArgument;

	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SyntaxList"))
		return "List_of_" + listTypeArgument;

	if(t.FullName.StartsWith("Microsoft.CodeAnalysis.SyntaxTokenList"))
		return "TokenList";

	if(!t.FullName.StartsWith("Microsoft.CodeAnalysis."))
		return t.Name;

	if(t.Name == "SyntaxList`1" /*|| t.Name == "SeparatedSyntaxList`1"*/)
		return "IEnumerable<" + this.GetSyntaxType(t.GenericTypeArguments[0], code, "") + ">";

	var codeAnalysisTypes = new []{ "SyntaxNode"/*, "SyntaxTokenList"*/, "SyntaxTrivia" };
	return codeAnalysisTypes.Contains(t.Name) ? "Microsoft.CodeAnalysis." + code.Escape(t.Name) : code.Escape(t.Name) + "<TAnnotation>";
}
#>
